%!PS-Adobe-3.1
%ADO_DSC_Encoding: MacOS Roman
%%Title: pg_0006.pdf
%%Creator: Adobe Acrobat 9.5.3
%%For: varoquau
%%CreationDate: 03/26/2013, 01:06:45 PM
%%BoundingBox: 0 0 214 55
%%HiResBoundingBox: 0 0 213.6901 54.7520
%%CropBox: 0 0 213.6901 54.7520
%%LanguageLevel: 3
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq{pop}{setblackgeneration}ifelse
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq{pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1086 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-13:18:53        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
   xmp:CreateDate="2013-03-26T10:43:34+01:00"
   xmp:CreatorTool="LaTeX with hyperref package"
   xmp:ModifyDate="2013-03-26T10:43:34+01:00"
   pdf:Keywords=""
   pdf:Producer="pdfTeX-1.40.10"
   pdf:Trapped="False"
   pdfx:PTEX.Fullbanner="This is pdfTeX, Version 3.1415926-1.40.10-2.2 (TeX Live 2009/Debian) kpathsea version 5.0.0">
   <dc:creator>
    <rdf:Seq>
     <rdf:li/>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[{Catalog} {Doc_Metadata} /Metadata pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
<</PageSize [213.69 54.752 ] >> setpagedevice
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_CoolType_Core/ps get exec
true set_gvm
%ADOBeginSubsetFont: DLYAAA+CMSS10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /DLYAAA+CMSS10 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMSS10.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
def
/UniqueID 5000803 def
/FontBBox {-61 -250 999 759} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 444 461 656 678 694 716] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [61] def
/StdVW [78] def
/StemSnapH [61 64] def
/StemSnapV [78 89] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
1 dict dup begin
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/DVZBWJ+CMSS10 /DLYAAA+CMSS10 findfont ct_VMDictPut
true set_gvm
%ADOBeginSubsetFont: HRABAA+CMSS9 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /HRABAA+CMSS9 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMSS9.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
def
/UniqueID 5000802 def
/FontBBox {-63 -250 1027 760} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 444 461 654 676 694 716] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [65] def
/StdVW [83] def
/StemSnapH [59 65] def
/StemSnapV [83 96] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
1 dict dup begin
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/DVZBWK+CMSS9 /HRABAA+CMSS9 findfont ct_VMDictPut
true set_gvm
%ADOBeginSubsetFont: RUQAAA+CMSSBX10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /RUQAAA+CMSSBX10 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMSSBX10.) def
/Weight (Bold) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
def
/UniqueID 5000806 def
/FontBBox {-71 -250 1099 780} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 458 475 694 716] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [94] def
/StdVW [136] def
/StemSnapV [136 147] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
1 dict dup begin
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/DVZBWL+CMSSBX10 /RUQAAA+CMSSBX10 findfont ct_VMDictPut
Adobe_CoolType_Core/pt get exec
%%EndPageSetup
1 -1 scale 0 -54.752 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 54.752 li
213.69 54.752 li
213.69 0 li
cp
clp
[1 0 0 1 0 0 ]ct
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
true set_gvm
%ADOBeginSubsetFont: HRABAA+CMSS9 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
DVZBWK+CMSS9 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/colon <1C60D8A8C9B84FD8F93E5F23AFB84246DF387AC64A604ACFE36EB4D3
B5594946709A14F3F4E650797544> |-
/I <1C60D8A8C9B84D354550AB29F718F07EFECE901D91DA2EBA5CE3D1CB6F88
32C2> |-
/a <1C60D8A8C9B7AED803479F895DA89BF438A70F4D938F70F88AFE598D8DCD
1BBCE9E9D31D9175A51DFFEDD8A2C70DF73CF1E97D9112E6FCEB30D323DF9271
C09BEBACA122C4540EEC5BAA0CE6E43BDB7DF5EABEB58478FFB7B831604F32B4
F37C06E56C287AAFC0280501BB5F456AA075375DCCDB49> |-
/e <1C60D8A8C9B7734FF4F3E7BCFFCA91142C500836475C15153CDEB67E3341
C7113C8B03714F55D507852A634CC6832FE3434DAE2663213689ACE5CBF1D306
3602E0B80ED8AC41E4D7C67BF0556E9BF0AB4EAEA19214ACE875619A16CB50EA
A488E53D8EB1294A53> |-
/g <1C60D8A8C9B7BA8F197A6FEAD04E4EBE020858FD9A2AE2212A7934BD763B
1C284D6F3818549BB1540E5D147A5D9E9B5146CA52C4E2FCC4EE0F897F74AD15
D5D3674134111EF16E631D9FC7EA4524AEDFC7045EA9F043D424BBA812813434
6DA10406E6D8A684E5951C4E0F0197D00CA5CD8AA212F6BBAB7F1633E1DCEC03
8EDCFB0AED6F7AB8ACE76D1537E74D405ACABBEF51F0609CC1698CFA9AD6B3B2
47612EFD82E6A9D63753EA1D17FD008BCBE9EF1580BFF6EA6D38440942548742
D6B14D55B2E77B5612F7DD96A16A6C84D0249E0D16> |-
/i <1C60D8A8C9B8771BA79D8DB9F9EE0A4208D462A21ADA22C31E5A313B44F5
978919BD86FEABF204AD7F22BC680B874F> |-
/n <1C60D8A8C9B7890D0A580A77B2A7F7929C41CEB27320B88CE01DDC6128B9
BF6672F7D9F98E1FC3DE1FDA8B931E7B06A676C6F78E88B1886E3136EF1B4C47
80C114A32887A7> |-
/o <1C60D8A8C9B7BA8F6239473DA895CD1FAF335134AA807927EDBA1BEE8425
1487C4489D20164DAF3E0B9CC603EE659C11E7441DE3D33A7102EFF55FBFB4AE
1FFED5BB37F51218AA9AB4FB4D0F5EDEC617E969330EE86D24CDA3> |-
/r <1C60D8A8C9B80D901E94CB86B8B3E12150550D207388EBAB1332FEE5526D
056A37B1648E01D31C0FA10222A74188D39B160B> |-
/t <1C60D8A8C9B728C5DDD80236056327E47BCB94B39696D919F2D8F10EE972
39AD96FE625B778F4CE59148E11D79BC4292565F1B5DBE62BEDC2B5F1BE0CA36
105094A13EB4A688B7928C87BB9C4EAEFEA172> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DVZBWK+CMSS9 /Encoding get
dup 58 /colon put
dup 73 /I put
dup 97 /a put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 116 /t put
pop
%ADOEndSubsetFont
reset_gvm
/DVZBWK+CMSS9*1 
[58{/.notdef}rp /colon 14{/.notdef}rp /I 23{/.notdef}rp /a 3{/.notdef}rp /e 
/.notdef /g /.notdef /i 4{/.notdef}rp /n /o 2{/.notdef}rp 
/r /.notdef /t 139{/.notdef}rp]
DVZBWK+CMSS9 nf
DVZBWK+CMSS9*1 [8.9664 0 0 -8.9664 0 0 ]msf
10.732 24.512 mo
(Integration:)
[2.57338 4.76025 3.32738 4.09587 4.60784 3.14814 4.42765 3.32737 2.20042 4.60784 4.76025 0 
]xsh
true set_gvm
%ADOBeginSubsetFont: DLYAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
DVZBWJ+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B8574464859E074121EF25E578E57727A0111D8F02> |-
/zero <1C60D8A8C9B7A73D3B44BE74C368F4E2FC0D1E282D6B80C084CC069A0
A14712591F89EABDE27294D1768DD69DB23E7FDCDF76DD01EA2CE0CCF6F4531C
8A5BCAB0F1BE07F8191DEC09C9A3BC8F2BD2C623D1D6E463DE09FAA97A87D431
A34F6930759E9BEDE1196203F9A0CFDDAE3BE022EED71EB4AA4845FF1759BB73
5B5433870BF2F7C4D6B648D9C9DDAA0B7F47B27B9132A> |-
/four <1C60D8A8C9B7A73DC573E0FDE3AD73FEE82F9F14DB3F0AB3BE38D56A8
122A7A5F8B6ED2296ABF48856509B4E6DEF566772A914D1A13C3C012A3EDA96B
E7B991608A6C22F61F497C6E362> |-
/five <1C60D8A8C9B7A73D3B44BE743C0D26AD679F5F93FC6E985F4FDB089B8
726C660FA9B5F57D310BE08C36ED05112B17AD96AEB48FF2FC2898E2D336EBE9
EAD56A8D07216507E5146B1B78A220C1E81864951416BE98FD5933A8730B6A85
BD795303C655D884BCE53> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DVZBWJ+CMSS10 /Encoding get
dup 46 /period put
dup 48 /zero put
dup 52 /four put
dup 53 /five put
pop
%ADOEndSubsetFont
reset_gvm
/DVZBWJ+CMSS10*1 
[46{/.notdef}rp /period /.notdef /zero 3{/.notdef}rp /four /five 202{/.notdef}rp]
DVZBWJ+CMSS10 nf
DVZBWJ+CMSS10*1 [9.9626 0 0 -9.9626 0 0 ]msf
21.583 36.467 mo
(0.554)
[4.9813 2.76762 4.9813 4.9813 0 ]xsh
gsave
56.781 54.237 mo
110.504 54.237 li
110.504 .513493 li
56.781 .513493 li
56.781 54.237 li
clp
56.781 54.237 mo
110.504 54.237 li
110.504 .513493 li
56.781 .513493 li
56.781 54.237 li
1 /0 /CSD get_res sepcs
0 sep
f
60.7027 53.9684 mo
110.208 53.9684 li
110.208 4.46314 li
60.7027 4.46314 li
60.7027 53.9684 li
f
gsave
60.7027 53.9684 mo
110.208 53.9684 li
110.208 4.46314 li
60.7027 4.46314 li
60.7027 53.9684 li
clp
106.992 53.844 mo
60.7027 53.844 li
60.7027 4.58753 li
106.992 4.58753 li
106.992 11.2021 li
106.881 11.2705 106.784 11.3583 106.699 11.4656 cv
106.467 11.7611 106.35 12.1774 106.35 12.7147 cv
106.35 13.2564 106.467 13.6728 106.699 13.9638 cv
106.784 14.0711 106.881 14.1583 106.992 14.2259 cv
106.992 27.7039 li
106.881 27.7722 106.784 27.8601 106.699 27.9674 cv
106.467 28.2628 106.35 28.6792 106.35 29.2165 cv
106.35 29.7582 106.467 30.1745 106.699 30.4655 cv
106.784 30.5728 106.881 30.66 106.992 30.7276 cv
106.992 44.3136 li
106.939 44.3599 106.89 44.4117 106.845 44.4691 cv
106.612 44.7646 106.496 45.1809 106.496 45.7182 cv
106.496 46.2599 106.612 46.6763 106.845 46.9672 cv
106.89 47.0246 106.939 47.0763 106.992 47.1223 cv
106.992 53.844 li
gsave
/1 
[/DeviceCMYK] /CSA add_res
/1 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 54.752 ]ct
[46.5604 0 0 49.6047 60.5236 .783616 ]ct
snap_to_device
<<
/T 1
/W 260 
/H 277 
/M[260 0 0 -277 0 277 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"-M0l]P]&-Gf$Vr8t.3n#gJ"G,:]YL+*r_2e0`rV:nalLk.'8P_`m@hIO%9'C+CU74d^]o>I&F"*fl
Z&!9M-1j)2dESM@hSpbN\WkIq=@>*7&pbLTkiPc0DdsC8>Y=3s/>AV,$,)<eFE8n)\$:a,/g^-J(=CC'
K\j]m]"+'PgK6j&QP+T`Ms0;$6>p?Gh-<S9D(MEN9*r:k7<ET"Tsq:_DD!7-2AX]bV1d^F,.b=Ld+_Yj
2jY/')iNqB;F5;3&`$\ak\VlFRnF($NC@r1.A=5ULi+gkoJRK4c)$*M`Zi")PgJ/e6oUGFH5he+k#+Na
@hIO%9'C+CU74d^]o>I&F"*flZ&!9M-1j)2dESM@hSpbN\WkIq=@>*7&pbLTkiPc0DdsC8>Y=3s/>AV,
$,)<eFE8n)\$:a,/g^-J(=CC'K\j]m]"+'PgK6j&QP+T`Ms0;$6>p?Gh-<S9D(MEN9*r:k7<ET"Tsq:_
DD!7-2AX]bV1d^F,.b=Ld+_Yj2jY/')iNqB;F5;3&`$\ak\VlFRnF($NC@r1.A=5ULi+gkoJRK4c)$*M
`Zi")PgJ/e6oUGFH5he+k#+Na@hIO%9'C+CU74d^]o>I&F"*flZ&!9M-1j)2dESM@hSpbN\WkIq=@>*7
&pbLTkiPc0DdsC8>Y=3s/>AV,$,)<eFE8n)\$:a,/g^-J(=CC'K\j]m]"+'PgK6j&QP+T`Ms0;$6>p?G
h-<S9D(MEN9*r:k7<ET"Tsq:_DD!7-2AX]bV1d^F,.b=Ld+_Yj2jY/')iNqB;F5;3&`$\ak\VlFRnF($
NC@r1.A=5ULi+j03Tr\26oUGFH5he+k#+Na@hIO%9'C+CU74d^]o>I&F"*flZ&!9M-1j)2dESM@hSpbN
\WkIq=@>*7&pbLTkiPc0DdsC8>Y=3s/>AV,$,)<eFE8n)\$:a,/g^-J(=CC'K\j]m]"+'PgK6j&QP+T`
Ms0;$6>p?Gh-<S9D(MEN9*r:k7<ET"Tsq:_DD!7-2AX]bV1d^F,.b=Ld+_Yj2jY/')iNqB;F5;3&`$\a
k\VlFRnF($NC@r1.A=5ULi+gkoJRK4c)$*M`Zi")PgJ/e6oUGFH5he+k#+Na@hIO%9'C+CU74d^]o>I&
F"*flZ&!9M-1j)2dESM@hSpbN\WkIq=@>*7&pbLTkiPc0DdsC8>Y=3s/>AV,$,)<eFE8n)\$:a,/g^-J
(=CC'K\j]m]"+'PgK6j&QP+T`Ms0;$6>p?Gh-<S9D(MEN9*r:k7<ET"Tsq:_DD!7-2AX]bV1d^F,.b=L
d+_Yj2jY/')iNqB;F5;3&`$\ak\VlFRnF($NC@r1.A=5ULi+gkoJRK4c)$*M`Zi")PgJ/e6oUGFH5he+
k#+Na@hIO%9'C+CU74d^]o>I&F"*flZ&!9M-1j)2dESM@hSpbN\WkIq=@>*7&pbLTkiPc0DdsC8>Y=3s
/>AV,$,)<eFE8n)\$:a,/g^-J(=CC'K\j]m]"+'PgK6j&QP+T`Ms0;$6>p?Gh-<S9D(MEN9*r:k7<ET"
Tsq:_DD!7-2AX]bV1d^F,.b=Ld+_Yj2jY/')iNqB;F5;3&`$\ak\VlFRnJ&;qN"h,SYQYcc<AScU^Qh?
>0rh9$hV_Jd%-s?oZgXeSYQYcc<AScU^Qh?>0rh9$hV_Jd%-s?oZgXeSYQYcc<AScU^Qh?>0rh9$hV_J
d%-s?oZgXeSYQYcc<AScU^Qh?>0rh9$hV_Jd%-s?oZgXeSYQYcc<AScU^Qh?>0rh9$hV_Jd%-s?oZgXe
SYQYcc<AScU^Qh?>0rh9$hV_Jd%-s?oZgXeSYQYcc<AScU^Qh?>0rh9$hV_Jd%-s?oZgXeSYQYcc<ASc
U^Qh?>0rh9$hV_Jd%-s?oZgXeSYQYcc<AScU^Qh?>0rh9$hV_Jd%-s?oZgXeSYQYcc<AScU^Qh?>0rh9
$hV_Jd%-s?oZgXeSYQYcc<AScU^Qh?>0rh9$hV_Jd%-s?oZgXeSYQYcc<AScU^Qh?>0rh9$hV_Jd%-s?
oZgXeSYQYcc<AScU^Qh?>0rh9$hV_Jd%-s?oZgXeSYQYcc<AScU^Qh?>0rh9$hV_Jd%-s?oZgXeSYQYc
c<AScU^Qh?>0rh9$hV_Jd%-s?oZgXeSYQYcc<AScU^Qh?>0rh9$hV_Jd%-s?oZgXeSYQYcc<AScU^Qh?
>0rh9$hV_Jd%-s?oZgXeSYQYcc<AScU^Qh?>0rh9$hV_Jd%-s?oZgXeSYQYcc<AScU^Qh?>0rh9$hV_J
d%-s?oZgXeSYQYcc<AScU^Qh?>0rh9$hV_Jd%-s?oZgXeSYQYcc<AScU^Qh?>0rh9$hV_Jd%-s?oZgXe
SYQYcc<AScU^Qh?>0rh9$hV_Jd%-s?oZgXeSYQYcc<AScU^Qh?>0rh9$hV_Jr!reb4D/:~>

%%EndBinary
grestore
np
grestore
68.9536 4.46315 mo
68.9536 4.46315 li
1 /0 /CSD get_res sepcs
1 sep
f
.12436 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
68.9536 4.46315 mo
68.9536 4.46315 li
@
69.1887 2.30476 mo
69.0231 2.30476 68.8977 2.3361 68.8171 2.38982 cv
68.7365 2.44355 68.6962 2.52413 68.6962 2.63158 cv
68.6962 2.73007 68.7276 2.81066 68.7947 2.86438 cv
68.8619 2.92258 68.9559 2.94944 69.0723 2.94944 cv
69.22 2.94944 69.3454 2.9002 69.4439 2.79275 cv
69.5424 2.6853 69.5961 2.55547 69.5961 2.3943 cv
69.5961 2.30476 li
69.1887 2.30476 li
70.3841 2.00928 mo
70.3841 3.40609 li
69.5961 3.40609 li
69.5961 3.04346 li
69.4887 3.19568 69.3723 3.30312 69.2424 3.3658 cv
69.1081 3.42848 68.9514 3.46429 68.7634 3.46429 cv
68.5082 3.46429 68.3023 3.39266 68.1456 3.24492 cv
67.9844 3.10166 67.9083 2.90915 67.9083 2.67187 cv
67.9083 2.38535 68.0068 2.17493 68.2038 2.04062 cv
68.4008 1.90631 68.7097 1.83916 69.135 1.83916 cv
69.5961 1.83916 li
69.5961 1.77648 li
69.5961 1.6556 69.5469 1.56606 69.4484 1.50786 cv
69.3499 1.44966 69.1977 1.41832 68.9917 1.41832 cv
68.8216 1.41832 68.6649 1.43623 68.5216 1.47205 cv
68.3784 1.50786 68.2441 1.55711 68.1232 1.61979 cv
68.1232 1.02435 li
68.2888 .984058 68.4545 .952719 68.6246 .930334 cv
68.7947 .912426 68.9649 .898996 69.135 .898996 cv
69.5737 .898996 69.8916 .988535 70.0886 1.16314 cv
70.2856 1.33774 70.3841 1.61979 70.3841 2.00928 cv
f
85.4553 4.46315 mo
85.4553 4.46315 li
f
85.4553 4.46315 mo
85.4553 4.46315 li
@
85.8206 2.9002 mo
85.9863 2.9002 86.1116 2.842 86.2012 2.71664 cv
86.2907 2.59576 86.3355 2.41669 86.3355 2.18388 cv
86.3355 1.95108 86.2907 1.77648 86.2012 1.65112 cv
86.1116 1.53025 85.9863 1.46757 85.8206 1.46757 cv
85.6505 1.46757 85.5251 1.53025 85.4356 1.65112 cv
85.3461 1.77648 85.3013 1.95108 85.3013 2.18388 cv
85.3013 2.41669 85.3461 2.59576 85.4356 2.71664 cv
85.5251 2.842 85.6505 2.9002 85.8206 2.9002 cv
85.3013 1.31535 mo
85.4087 1.17209 85.5251 1.06912 85.6594 1.00197 cv
85.7893 .934811 85.9415 .898996 86.1116 .898996 cv
86.4116 .898996 86.6578 1.01987 86.8548 1.26163 cv
87.0473 1.50339 87.1458 1.80782 87.1458 2.18388 cv
87.1458 2.56442 87.0473 2.87334 86.8548 3.11061 cv
86.6578 3.34789 86.4116 3.46429 86.1116 3.46429 cv
85.9415 3.46429 85.7893 3.42848 85.6594 3.3658 cv
85.5251 3.30312 85.4087 3.19568 85.3013 3.05241 cv
85.3013 3.40609 li
84.5178 3.40609 li
84.5178 .00360346 li
85.3013 .00360346 li
85.3013 1.31535 li
f
101.957 4.46315 mo
101.957 4.46315 li
f
101.957 4.46315 mo
101.957 4.46315 li
@
103.232 1.0333 mo
103.232 1.67351 li
103.124 1.60188 103.017 1.54815 102.909 1.51234 cv
102.802 1.47652 102.69 1.45862 102.578 1.45862 cv
102.359 1.45862 102.188 1.52577 102.068 1.65112 cv
101.942 1.77648 101.884 1.95556 101.884 2.18388 cv
101.884 2.41669 101.942 2.59576 102.068 2.72112 cv
102.188 2.84647 102.359 2.90915 102.578 2.90915 cv
102.699 2.90915 102.815 2.89124 102.927 2.85543 cv
103.035 2.81961 103.138 2.76589 103.232 2.69426 cv
103.232 3.33446 li
103.106 3.37923 102.981 3.41057 102.855 3.43296 cv
102.73 3.45086 102.605 3.46429 102.479 3.46429 cv
102.036 3.46429 101.691 3.35237 101.441 3.12852 cv
101.19 2.90467 101.069 2.58681 101.069 2.18388 cv
101.069 1.78096 101.19 1.46757 101.441 1.23924 cv
101.691 1.0154 102.036 .898996 102.479 .898996 cv
102.605 .898996 102.73 .912426 102.855 .934811 cv
102.981 .957196 103.106 .988535 103.232 1.0333 cv
f
60.7027 12.714 mo
60.7027 12.714 li
f
60.7027 12.714 mo
60.7027 12.714 li
@
f
110.208 12.714 mo
110.208 12.714 li
@
58.7052 12.8349 mo
58.5395 12.8349 58.4142 12.8663 58.3336 12.92 cv
58.253 12.9737 58.2127 13.0543 58.2127 13.1617 cv
58.2127 13.2602 58.2441 13.3408 58.3112 13.3945 cv
58.3784 13.4527 58.4724 13.4796 58.5888 13.4796 cv
58.7365 13.4796 58.8619 13.4304 58.9604 13.3229 cv
59.0589 13.2155 59.1126 13.0856 59.1126 12.9245 cv
59.1126 12.8349 li
58.7052 12.8349 li
59.9005 12.5394 mo
59.9005 13.9362 li
59.1126 13.9362 li
59.1126 13.5736 li
59.0051 13.7258 58.8887 13.8333 58.7589 13.896 cv
58.6246 13.9586 58.4679 13.9944 58.2799 13.9944 cv
58.0247 13.9944 57.8188 13.9228 57.6621 13.7751 cv
57.5009 13.6318 57.4248 13.4393 57.4248 13.202 cv
57.4248 12.9155 57.5233 12.7051 57.7203 12.5708 cv
57.9172 12.4365 58.2262 12.3693 58.6515 12.3693 cv
59.1126 12.3693 li
59.1126 12.3066 li
59.1126 12.1858 59.0633 12.0962 58.9649 12.038 cv
58.8664 11.9798 58.7141 11.9485 58.5082 11.9485 cv
58.3381 11.9485 58.1814 11.9664 58.0381 12.0022 cv
57.8949 12.038 57.7606 12.0873 57.6397 12.1499 cv
57.6397 11.5545 li
57.8053 11.5142 57.971 11.4829 58.1411 11.4605 cv
58.3112 11.4426 58.4813 11.4292 58.6515 11.4292 cv
59.0902 11.4292 59.4081 11.5187 59.6051 11.6933 cv
59.802 11.8679 59.9005 12.1499 59.9005 12.5394 cv
f
60.7027 29.2158 mo
60.7027 29.2158 li
f
60.7027 29.2158 mo
60.7027 29.2158 li
@
f
110.208 29.2158 mo
110.208 29.2158 li
@
58.7596 30.379 mo
58.9252 30.379 59.0506 30.3208 59.1401 30.1955 cv
59.2296 30.0746 59.2744 29.8955 59.2744 29.6627 cv
59.2744 29.4299 59.2296 29.2553 59.1401 29.1299 cv
59.0506 29.0091 58.9252 28.9464 58.7596 28.9464 cv
58.5894 28.9464 58.4641 29.0091 58.3745 29.1299 cv
58.285 29.2553 58.2402 29.4299 58.2402 29.6627 cv
58.2402 29.8955 58.285 30.0746 58.3745 30.1955 cv
58.4641 30.3208 58.5894 30.379 58.7596 30.379 cv
58.2402 28.7942 mo
58.3477 28.6509 58.4641 28.5479 58.5984 28.4808 cv
58.7282 28.4136 58.8804 28.3778 59.0506 28.3778 cv
59.3505 28.3778 59.5968 28.4987 59.7937 28.7404 cv
59.9863 28.9822 60.0847 29.2866 60.0847 29.6627 cv
60.0847 30.0432 59.9863 30.3522 59.7937 30.5894 cv
59.5968 30.8267 59.3505 30.9431 59.0506 30.9431 cv
58.8804 30.9431 58.7282 30.9073 58.5984 30.8446 cv
58.4641 30.7819 58.3477 30.6745 58.2402 30.5312 cv
58.2402 30.8849 li
57.4568 30.8849 li
57.4568 27.4824 li
58.2402 27.4824 li
58.2402 28.7942 li
f
60.7027 45.7175 mo
60.7027 45.7175 li
f
60.7027 45.7175 mo
60.7027 45.7175 li
@
f
110.208 45.7175 mo
110.208 45.7175 li
@
59.9019 44.5669 mo
59.9019 45.2072 li
59.7945 45.1355 59.687 45.0818 59.5796 45.046 cv
59.4721 45.0102 59.3602 44.9923 59.2483 44.9923 cv
59.0289 44.9923 58.8588 45.0594 58.7379 45.1848 cv
58.6126 45.3101 58.5544 45.4892 58.5544 45.7175 cv
58.5544 45.9503 58.6126 46.1294 58.7379 46.2548 cv
58.8588 46.3801 59.0289 46.4428 59.2483 46.4428 cv
59.3692 46.4428 59.4856 46.4249 59.5975 46.3891 cv
59.7049 46.3533 59.8079 46.2995 59.9019 46.2279 cv
59.9019 46.8681 li
59.7766 46.9129 59.6512 46.9442 59.5259 46.9666 cv
59.4005 46.9845 59.2752 46.9979 59.1498 46.9979 cv
58.7066 46.9979 58.3619 46.886 58.1112 46.6622 cv
57.8604 46.4383 57.7396 46.1205 57.7396 45.7175 cv
57.7396 45.3146 57.8604 45.0012 58.1112 44.7729 cv
58.3619 44.549 58.7066 44.4326 59.1498 44.4326 cv
59.2752 44.4326 59.4005 44.4461 59.5259 44.4685 cv
59.6512 44.4908 59.7766 44.5222 59.9019 44.5669 cv
f
60.5783 4.3388 mo
110.332 4.3388 li
110.332 4.58753 li
60.5783 4.58753 li
60.5783 4.3388 li
f
110.084 54.0927 mo
110.084 4.3388 li
110.332 4.3388 li
110.332 54.0927 li
110.084 54.0927 li
f
60.5783 53.844 mo
110.332 53.844 li
110.332 54.0927 li
60.5783 54.0927 li
60.5783 53.844 li
f
.24872 lw
2 lc
60.7027 53.9684 mo
60.7027 4.46315 li
@
62.7522 13.7623 mo
63.4954 13.7623 li
63.4954 11.6537 li
62.7343 11.8103 li
62.7343 11.2373 li
63.4909 11.0806 li
64.2923 11.0806 li
64.2923 13.7623 li
65.0355 13.7623 li
65.0355 14.3443 li
62.7522 14.3443 li
62.7522 13.7623 li
1 /0 /CSD get_res sepcs
0 sep
f
65.801 13.4982 mo
66.589 13.4982 li
66.589 14.3443 li
65.801 14.3443 li
65.801 13.4982 li
f
69.105 12.7102 mo
69.105 12.3028 69.0647 12.0163 68.9886 11.8462 cv
68.9125 11.6805 68.7827 11.5955 68.6036 11.5955 cv
68.4245 11.5955 68.2947 11.6805 68.2186 11.8462 cv
68.138 12.0163 68.1022 12.3028 68.1022 12.7102 cv
68.1022 13.1221 68.138 13.4131 68.2186 13.5832 cv
68.2947 13.7533 68.4245 13.8339 68.6036 13.8339 cv
68.7827 13.8339 68.9081 13.7533 68.9886 13.5832 cv
69.0647 13.4131 69.105 13.1221 69.105 12.7102 cv
69.9467 12.7147 mo
69.9467 13.2564 69.8303 13.6728 69.5975 13.9638 cv
69.3647 14.2592 69.0334 14.4025 68.6036 14.4025 cv
68.1738 14.4025 67.8425 14.2592 67.6097 13.9638 cv
67.3769 13.6728 67.2605 13.2564 67.2605 12.7147 cv
67.2605 12.1775 67.3769 11.7611 67.6097 11.4656 cv
67.8425 11.1701 68.1738 11.0224 68.6036 11.0224 cv
69.0334 11.0224 69.3647 11.1701 69.5975 11.4656 cv
69.8303 11.7611 69.9467 12.1775 69.9467 12.7147 cv
f
72.221 12.7102 mo
72.221 12.3028 72.1807 12.0163 72.1046 11.8462 cv
72.0285 11.6805 71.8987 11.5955 71.7196 11.5955 cv
71.5405 11.5955 71.4107 11.6805 71.3346 11.8462 cv
71.254 12.0163 71.2182 12.3028 71.2182 12.7102 cv
71.2182 13.1221 71.254 13.4131 71.3346 13.5832 cv
71.4107 13.7533 71.5405 13.8339 71.7196 13.8339 cv
71.8987 13.8339 72.024 13.7533 72.1046 13.5832 cv
72.1807 13.4131 72.221 13.1221 72.221 12.7102 cv
73.0627 12.7147 mo
73.0627 13.2564 72.9463 13.6728 72.7135 13.9638 cv
72.4807 14.2592 72.1494 14.4025 71.7196 14.4025 cv
71.2898 14.4025 70.9585 14.2592 70.7257 13.9638 cv
70.4929 13.6728 70.3765 13.2564 70.3765 12.7147 cv
70.3765 12.1775 70.4929 11.7611 70.7257 11.4656 cv
70.9585 11.1701 71.2898 11.0224 71.7196 11.0224 cv
72.1494 11.0224 72.4807 11.1701 72.7135 11.4656 cv
72.9463 11.7611 73.0627 12.1775 73.0627 12.7147 cv
f
75.337 12.7102 mo
75.337 12.3028 75.2967 12.0163 75.2206 11.8462 cv
75.1444 11.6805 75.0146 11.5955 74.8355 11.5955 cv
74.6565 11.5955 74.5266 11.6805 74.4505 11.8462 cv
74.3699 12.0163 74.3341 12.3028 74.3341 12.7102 cv
74.3341 13.1221 74.3699 13.4131 74.4505 13.5832 cv
74.5266 13.7533 74.6565 13.8339 74.8355 13.8339 cv
75.0146 13.8339 75.14 13.7533 75.2206 13.5832 cv
75.2967 13.4131 75.337 13.1221 75.337 12.7102 cv
76.1786 12.7147 mo
76.1786 13.2564 76.0622 13.6728 75.8294 13.9638 cv
75.5966 14.2592 75.2653 14.4025 74.8355 14.4025 cv
74.4058 14.4025 74.0745 14.2592 73.8417 13.9638 cv
73.6089 13.6728 73.4925 13.2564 73.4925 12.7147 cv
73.4925 12.1775 73.6089 11.7611 73.8417 11.4656 cv
74.0745 11.1701 74.4058 11.0224 74.8355 11.0224 cv
75.2653 11.0224 75.5966 11.1701 75.8294 11.4656 cv
76.0622 11.7611 76.1786 12.1775 76.1786 12.7147 cv
f
64.1421 29.212 mo
64.1421 28.8046 64.1018 28.518 64.0257 28.3479 cv
63.9496 28.1823 63.8197 28.0972 63.6407 28.0972 cv
63.4616 28.0972 63.3317 28.1823 63.2556 28.3479 cv
63.175 28.518 63.1392 28.8046 63.1392 29.212 cv
63.1392 29.6238 63.175 29.9148 63.2556 30.085 cv
63.3317 30.2551 63.4616 30.3357 63.6407 30.3357 cv
63.8197 30.3357 63.9451 30.2551 64.0257 30.085 cv
64.1018 29.9148 64.1421 29.6238 64.1421 29.212 cv
64.9837 29.2164 mo
64.9837 29.7581 64.8673 30.1745 64.6345 30.4655 cv
64.4017 30.761 64.0704 30.9042 63.6407 30.9042 cv
63.2109 30.9042 62.8796 30.761 62.6468 30.4655 cv
62.414 30.1745 62.2976 29.7581 62.2976 29.2164 cv
62.2976 28.6792 62.414 28.2628 62.6468 27.9674 cv
62.8796 27.6719 63.2109 27.5241 63.6407 27.5241 cv
64.0704 27.5241 64.4017 27.6719 64.6345 27.9674 cv
64.8673 28.2628 64.9837 28.6792 64.9837 29.2164 cv
1 /0 /CSD get_res sepcs
1 sep
f
65.6553 29.9999 mo
66.4432 29.9999 li
66.4432 30.846 li
65.6553 30.846 li
65.6553 29.9999 li
f
68.5474 28.2763 mo
67.6252 29.6417 li
68.5474 29.6417 li
68.5474 28.2763 li
68.4086 27.5823 mo
69.3443 27.5823 li
69.3443 29.6417 li
69.8099 29.6417 li
69.8099 30.2506 li
69.3443 30.2506 li
69.3443 30.846 li
68.5474 30.846 li
68.5474 30.2506 li
67.1014 30.2506 li
67.1014 29.5298 li
68.4086 27.5823 li
f
70.4904 27.5823 mo
72.5812 27.5823 li
72.5812 28.2002 li
71.162 28.2002 li
71.162 28.7061 li
71.3545 28.6658 li
71.5559 28.6523 li
71.9544 28.6523 72.2633 28.7553 72.4871 28.9523 cv
72.7065 29.1493 72.8184 29.4269 72.8184 29.7805 cv
72.8184 30.1342 72.6976 30.4118 72.4558 30.6088 cv
72.2141 30.8058 71.8783 30.9042 71.453 30.9042 cv
71.2649 30.9042 71.0814 30.8863 70.9023 30.8505 cv
70.7187 30.8192 70.5397 30.7655 70.3606 30.6938 cv
70.3606 30.0312 li
70.5397 30.1342 70.7053 30.2103 70.8665 30.2596 cv
71.0277 30.3133 71.1754 30.3357 71.3187 30.3357 cv
71.5201 30.3357 71.6813 30.2864 71.7977 30.1879 cv
71.9141 30.0894 71.9768 29.9507 71.9768 29.7805 cv
71.9768 29.6104 71.9141 29.4761 71.7977 29.3776 cv
71.6813 29.2791 71.5201 29.2254 71.3187 29.2254 cv
71.1933 29.2254 71.0635 29.2433 70.9292 29.2746 cv
70.7949 29.306 70.6471 29.3552 70.4904 29.4179 cv
70.4904 27.5823 li
f
75.1912 29.212 mo
75.1912 28.8046 75.1509 28.518 75.0748 28.3479 cv
74.9987 28.1823 74.8689 28.0972 74.6898 28.0972 cv
74.5107 28.0972 74.3809 28.1823 74.3048 28.3479 cv
74.2242 28.518 74.1884 28.8046 74.1884 29.212 cv
74.1884 29.6238 74.2242 29.9148 74.3048 30.085 cv
74.3809 30.2551 74.5107 30.3357 74.6898 30.3357 cv
74.8689 30.3357 74.9942 30.2551 75.0748 30.085 cv
75.1509 29.9148 75.1912 29.6238 75.1912 29.212 cv
76.0329 29.2164 mo
76.0329 29.7581 75.9165 30.1745 75.6837 30.4655 cv
75.4509 30.761 75.1196 30.9042 74.6898 30.9042 cv
74.26 30.9042 73.9287 30.761 73.6959 30.4655 cv
73.4631 30.1745 73.3467 29.7581 73.3467 29.2164 cv
73.3467 28.6792 73.4631 28.2628 73.6959 27.9674 cv
73.9287 27.6719 74.26 27.5241 74.6898 27.5241 cv
75.1196 27.5241 75.4509 27.6719 75.6837 27.9674 cv
75.9165 28.2628 76.0329 28.6792 76.0329 29.2164 cv
f
64.1421 45.7137 mo
64.1421 45.3063 64.1018 45.0198 64.0257 44.8497 cv
63.9496 44.684 63.8197 44.5989 63.6407 44.5989 cv
63.4616 44.5989 63.3317 44.684 63.2556 44.8497 cv
63.175 45.0198 63.1392 45.3063 63.1392 45.7137 cv
63.1392 46.1256 63.175 46.4166 63.2556 46.5867 cv
63.3317 46.7568 63.4616 46.8374 63.6407 46.8374 cv
63.8197 46.8374 63.9451 46.7568 64.0257 46.5867 cv
64.1018 46.4166 64.1421 46.1256 64.1421 45.7137 cv
64.9837 45.7182 mo
64.9837 46.2599 64.8673 46.6763 64.6345 46.9673 cv
64.4017 47.2627 64.0704 47.406 63.6407 47.406 cv
63.2109 47.406 62.8796 47.2627 62.6468 46.9673 cv
62.414 46.6763 62.2976 46.2599 62.2976 45.7182 cv
62.2976 45.1809 62.414 44.7646 62.6468 44.4691 cv
62.8796 44.1736 63.2109 44.0259 63.6407 44.0259 cv
64.0704 44.0259 64.4017 44.1736 64.6345 44.4691 cv
64.8673 44.7646 64.9837 45.1809 64.9837 45.7182 cv
f
65.6553 46.5016 mo
66.4432 46.5016 li
66.4432 47.3478 li
65.6553 47.3478 li
65.6553 46.5016 li
f
68.5474 44.778 mo
67.6252 46.1435 li
68.5474 46.1435 li
68.5474 44.778 li
68.4086 44.0841 mo
69.3443 44.0841 li
69.3443 46.1435 li
69.8099 46.1435 li
69.8099 46.7524 li
69.3443 46.7524 li
69.3443 47.3478 li
68.5474 47.3478 li
68.5474 46.7524 li
67.1014 46.7524 li
67.1014 46.0316 li
68.4086 44.0841 li
f
70.4904 44.0841 mo
72.5812 44.0841 li
72.5812 44.7019 li
71.162 44.7019 li
71.162 45.2078 li
71.3545 45.1675 li
71.5559 45.1541 li
71.9544 45.1541 72.2633 45.2571 72.4871 45.454 cv
72.7065 45.651 72.8184 45.9286 72.8184 46.2823 cv
72.8184 46.636 72.6976 46.9135 72.4558 47.1105 cv
72.2141 47.3075 71.8783 47.406 71.453 47.406 cv
71.2649 47.406 71.0814 47.3881 70.9023 47.3523 cv
70.7187 47.3209 70.5397 47.2672 70.3606 47.1956 cv
70.3606 46.533 li
70.5397 46.636 70.7053 46.7121 70.8665 46.7613 cv
71.0277 46.815 71.1754 46.8374 71.3187 46.8374 cv
71.5201 46.8374 71.6813 46.7882 71.7977 46.6897 cv
71.9141 46.5912 71.9768 46.4524 71.9768 46.2823 cv
71.9768 46.1122 71.9141 45.9778 71.7977 45.8793 cv
71.6813 45.7809 71.5201 45.7271 71.3187 45.7271 cv
71.1933 45.7271 71.0635 45.745 70.9292 45.7764 cv
70.7949 45.8077 70.6471 45.857 70.4904 45.9196 cv
70.4904 44.0841 li
f
75.1912 45.7137 mo
75.1912 45.3063 75.1509 45.0198 75.0748 44.8497 cv
74.9987 44.684 74.8689 44.5989 74.6898 44.5989 cv
74.5107 44.5989 74.3809 44.684 74.3048 44.8497 cv
74.2242 45.0198 74.1884 45.3063 74.1884 45.7137 cv
74.1884 46.1256 74.2242 46.4166 74.3048 46.5867 cv
74.3809 46.7568 74.5107 46.8374 74.6898 46.8374 cv
74.8689 46.8374 74.9942 46.7568 75.0748 46.5867 cv
75.1509 46.4166 75.1912 46.1256 75.1912 45.7137 cv
76.0329 45.7182 mo
76.0329 46.2599 75.9165 46.6763 75.6837 46.9673 cv
75.4509 47.2627 75.1196 47.406 74.6898 47.406 cv
74.26 47.406 73.9287 47.2627 73.6959 46.9673 cv
73.4631 46.6763 73.3467 46.2599 73.3467 45.7182 cv
73.3467 45.1809 73.4631 44.7646 73.6959 44.4691 cv
73.9287 44.1736 74.26 44.0259 74.6898 44.0259 cv
75.1196 44.0259 75.4509 44.1736 75.6837 44.4691 cv
75.9165 44.7646 76.0329 45.1809 76.0329 45.7182 cv
f
80.6438 12.7102 mo
80.6438 12.3028 80.6035 12.0163 80.5274 11.8462 cv
80.4513 11.6805 80.3215 11.5955 80.1424 11.5955 cv
79.9633 11.5955 79.8335 11.6805 79.7574 11.8462 cv
79.6768 12.0163 79.641 12.3028 79.641 12.7102 cv
79.641 13.1221 79.6768 13.4131 79.7574 13.5832 cv
79.8335 13.7533 79.9633 13.8339 80.1424 13.8339 cv
80.3215 13.8339 80.4468 13.7533 80.5274 13.5832 cv
80.6035 13.4131 80.6438 13.1221 80.6438 12.7102 cv
81.4855 12.7147 mo
81.4855 13.2564 81.3691 13.6728 81.1363 13.9638 cv
80.9035 14.2592 80.5722 14.4025 80.1424 14.4025 cv
79.7126 14.4025 79.3813 14.2592 79.1485 13.9638 cv
78.9157 13.6728 78.7993 13.2564 78.7993 12.7147 cv
78.7993 12.1775 78.9157 11.7611 79.1485 11.4656 cv
79.3813 11.1701 79.7126 11.0224 80.1424 11.0224 cv
80.5722 11.0224 80.9035 11.1701 81.1363 11.4656 cv
81.3691 11.7611 81.4855 12.1775 81.4855 12.7147 cv
f
82.157 13.4982 mo
82.945 13.4982 li
82.945 14.3443 li
82.157 14.3443 li
82.157 13.4982 li
f
85.0492 11.7745 mo
84.1269 13.14 li
85.0492 13.14 li
85.0492 11.7745 li
84.9104 11.0806 mo
85.8461 11.0806 li
85.8461 13.14 li
86.3117 13.14 li
86.3117 13.7489 li
85.8461 13.7489 li
85.8461 14.3443 li
85.0492 14.3443 li
85.0492 13.7489 li
83.6031 13.7489 li
83.6031 13.0281 li
84.9104 11.0806 li
f
86.9922 11.0806 mo
89.0829 11.0806 li
89.0829 11.6984 li
87.6637 11.6984 li
87.6637 12.2043 li
87.8562 12.164 li
88.0577 12.1506 li
88.4561 12.1506 88.765 12.2536 88.9889 12.4506 cv
89.2083 12.6475 89.3202 12.9251 89.3202 13.2788 cv
89.3202 13.6325 89.1993 13.91 88.9575 14.107 cv
88.7158 14.304 88.38 14.4025 87.9547 14.4025 cv
87.7667 14.4025 87.5831 14.3846 87.404 14.3488 cv
87.2205 14.3174 87.0414 14.2637 86.8623 14.1921 cv
86.8623 13.5295 li
87.0414 13.6325 87.2071 13.7086 87.3682 13.7578 cv
87.5294 13.8115 87.6771 13.8339 87.8204 13.8339 cv
88.0219 13.8339 88.183 13.7847 88.2994 13.6862 cv
88.4158 13.5877 88.4785 13.4489 88.4785 13.2788 cv
88.4785 13.1087 88.4158 12.9744 88.2994 12.8759 cv
88.183 12.7774 88.0219 12.7236 87.8204 12.7236 cv
87.695 12.7236 87.5652 12.7416 87.4309 12.7729 cv
87.2966 12.8042 87.1488 12.8535 86.9922 12.9162 cv
86.9922 11.0806 li
f
91.693 12.7102 mo
91.693 12.3028 91.6527 12.0163 91.5766 11.8462 cv
91.5005 11.6805 91.3706 11.5955 91.1916 11.5955 cv
91.0125 11.5955 90.8826 11.6805 90.8065 11.8462 cv
90.7259 12.0163 90.6901 12.3028 90.6901 12.7102 cv
90.6901 13.1221 90.7259 13.4131 90.8065 13.5832 cv
90.8826 13.7533 91.0125 13.8339 91.1916 13.8339 cv
91.3706 13.8339 91.496 13.7533 91.5766 13.5832 cv
91.6527 13.4131 91.693 13.1221 91.693 12.7102 cv
92.5346 12.7147 mo
92.5346 13.2564 92.4182 13.6728 92.1854 13.9638 cv
91.9526 14.2592 91.6213 14.4025 91.1916 14.4025 cv
90.7618 14.4025 90.4305 14.2592 90.1977 13.9638 cv
89.9649 13.6728 89.8485 13.2564 89.8485 12.7147 cv
89.8485 12.1775 89.9649 11.7611 90.1977 11.4656 cv
90.4305 11.1701 90.7618 11.0224 91.1916 11.0224 cv
91.6213 11.0224 91.9526 11.1701 92.1854 11.4656 cv
92.4182 11.7611 92.5346 12.1775 92.5346 12.7147 cv
f
79.254 30.264 mo
79.9971 30.264 li
79.9971 28.1554 li
79.236 28.3121 li
79.236 27.739 li
79.9927 27.5823 li
80.794 27.5823 li
80.794 30.264 li
81.5372 30.264 li
81.5372 30.846 li
79.254 30.846 li
79.254 30.264 li
1 /0 /CSD get_res sepcs
0 sep
f
82.3028 29.9999 mo
83.0907 29.9999 li
83.0907 30.846 li
82.3028 30.846 li
82.3028 29.9999 li
f
85.6068 29.212 mo
85.6068 28.8046 85.5665 28.518 85.4904 28.3479 cv
85.4143 28.1823 85.2844 28.0972 85.1054 28.0972 cv
84.9263 28.0972 84.7964 28.1823 84.7203 28.3479 cv
84.6398 28.518 84.6039 28.8046 84.6039 29.212 cv
84.6039 29.6238 84.6398 29.9148 84.7203 30.085 cv
84.7964 30.2551 84.9263 30.3357 85.1054 30.3357 cv
85.2844 30.3357 85.4098 30.2551 85.4904 30.085 cv
85.5665 29.9148 85.6068 29.6238 85.6068 29.212 cv
86.4484 29.2164 mo
86.4484 29.7581 86.332 30.1745 86.0992 30.4655 cv
85.8664 30.761 85.5351 30.9042 85.1054 30.9042 cv
84.6756 30.9042 84.3443 30.761 84.1115 30.4655 cv
83.8787 30.1745 83.7623 29.7581 83.7623 29.2164 cv
83.7623 28.6792 83.8787 28.2628 84.1115 27.9674 cv
84.3443 27.6719 84.6756 27.5241 85.1054 27.5241 cv
85.5351 27.5241 85.8664 27.6719 86.0992 27.9674 cv
86.332 28.2628 86.4484 28.6792 86.4484 29.2164 cv
f
88.7227 29.212 mo
88.7227 28.8046 88.6824 28.518 88.6063 28.3479 cv
88.5302 28.1823 88.4004 28.0972 88.2213 28.0972 cv
88.0422 28.0972 87.9124 28.1823 87.8363 28.3479 cv
87.7557 28.518 87.7199 28.8046 87.7199 29.212 cv
87.7199 29.6238 87.7557 29.9148 87.8363 30.085 cv
87.9124 30.2551 88.0422 30.3357 88.2213 30.3357 cv
88.4004 30.3357 88.5258 30.2551 88.6063 30.085 cv
88.6824 29.9148 88.7227 29.6238 88.7227 29.212 cv
89.5644 29.2164 mo
89.5644 29.7581 89.448 30.1745 89.2152 30.4655 cv
88.9824 30.761 88.6511 30.9042 88.2213 30.9042 cv
87.7915 30.9042 87.4602 30.761 87.2274 30.4655 cv
86.9946 30.1745 86.8782 29.7581 86.8782 29.2164 cv
86.8782 28.6792 86.9946 28.2628 87.2274 27.9674 cv
87.4602 27.6719 87.7915 27.5241 88.2213 27.5241 cv
88.6511 27.5241 88.9824 27.6719 89.2152 27.9674 cv
89.448 28.2628 89.5644 28.6792 89.5644 29.2164 cv
f
91.8387 29.212 mo
91.8387 28.8046 91.7984 28.518 91.7223 28.3479 cv
91.6462 28.1823 91.5164 28.0972 91.3373 28.0972 cv
91.1582 28.0972 91.0284 28.1823 90.9523 28.3479 cv
90.8717 28.518 90.8359 28.8046 90.8359 29.212 cv
90.8359 29.6238 90.8717 29.9148 90.9523 30.085 cv
91.0284 30.2551 91.1582 30.3357 91.3373 30.3357 cv
91.5164 30.3357 91.6417 30.2551 91.7223 30.085 cv
91.7984 29.9148 91.8387 29.6238 91.8387 29.212 cv
92.6804 29.2164 mo
92.6804 29.7581 92.564 30.1745 92.3312 30.4655 cv
92.0984 30.761 91.7671 30.9042 91.3373 30.9042 cv
90.9075 30.9042 90.5762 30.761 90.3434 30.4655 cv
90.1106 30.1745 89.9942 29.7581 89.9942 29.2164 cv
89.9942 28.6792 90.1106 28.2628 90.3434 27.9674 cv
90.5762 27.6719 90.9075 27.5241 91.3373 27.5241 cv
91.7671 27.5241 92.0984 27.6719 92.3312 27.9674 cv
92.564 28.2628 92.6804 28.6792 92.6804 29.2164 cv
f
80.6438 45.7137 mo
80.6438 45.3063 80.6035 45.0198 80.5274 44.8497 cv
80.4513 44.684 80.3215 44.5989 80.1424 44.5989 cv
79.9633 44.5989 79.8335 44.684 79.7574 44.8497 cv
79.6768 45.0198 79.641 45.3063 79.641 45.7137 cv
79.641 46.1256 79.6768 46.4166 79.7574 46.5867 cv
79.8335 46.7568 79.9633 46.8374 80.1424 46.8374 cv
80.3215 46.8374 80.4468 46.7568 80.5274 46.5867 cv
80.6035 46.4166 80.6438 46.1256 80.6438 45.7137 cv
81.4855 45.7182 mo
81.4855 46.2599 81.3691 46.6763 81.1363 46.9673 cv
80.9035 47.2627 80.5722 47.406 80.1424 47.406 cv
79.7126 47.406 79.3813 47.2627 79.1485 46.9673 cv
78.9157 46.6763 78.7993 46.2599 78.7993 45.7182 cv
78.7993 45.1809 78.9157 44.7646 79.1485 44.4691 cv
79.3813 44.1736 79.7126 44.0259 80.1424 44.0259 cv
80.5722 44.0259 80.9035 44.1736 81.1363 44.4691 cv
81.3691 44.7646 81.4855 45.1809 81.4855 45.7182 cv
1 /0 /CSD get_res sepcs
1 sep
f
82.157 46.5016 mo
82.945 46.5016 li
82.945 47.3478 li
82.157 47.3478 li
82.157 46.5016 li
f
85.0492 44.778 mo
84.1269 46.1435 li
85.0492 46.1435 li
85.0492 44.778 li
84.9104 44.0841 mo
85.8461 44.0841 li
85.8461 46.1435 li
86.3117 46.1435 li
86.3117 46.7524 li
85.8461 46.7524 li
85.8461 47.3478 li
85.0492 47.3478 li
85.0492 46.7524 li
83.6031 46.7524 li
83.6031 46.0316 li
84.9104 44.0841 li
f
86.9922 44.0841 mo
89.0829 44.0841 li
89.0829 44.7019 li
87.6637 44.7019 li
87.6637 45.2078 li
87.8562 45.1675 li
88.0577 45.1541 li
88.4561 45.1541 88.765 45.2571 88.9889 45.454 cv
89.2083 45.651 89.3202 45.9286 89.3202 46.2823 cv
89.3202 46.636 89.1993 46.9135 88.9575 47.1105 cv
88.7158 47.3075 88.38 47.406 87.9547 47.406 cv
87.7667 47.406 87.5831 47.3881 87.404 47.3523 cv
87.2205 47.3209 87.0414 47.2672 86.8623 47.1956 cv
86.8623 46.533 li
87.0414 46.636 87.2071 46.7121 87.3682 46.7613 cv
87.5294 46.815 87.6771 46.8374 87.8204 46.8374 cv
88.0219 46.8374 88.183 46.7882 88.2994 46.6897 cv
88.4158 46.5912 88.4785 46.4524 88.4785 46.2823 cv
88.4785 46.1122 88.4158 45.9778 88.2994 45.8793 cv
88.183 45.7809 88.0219 45.7271 87.8204 45.7271 cv
87.695 45.7271 87.5652 45.745 87.4309 45.7764 cv
87.2966 45.8077 87.1488 45.857 86.9922 45.9196 cv
86.9922 44.0841 li
f
91.693 45.7137 mo
91.693 45.3063 91.6527 45.0198 91.5766 44.8497 cv
91.5005 44.684 91.3706 44.5989 91.1916 44.5989 cv
91.0125 44.5989 90.8826 44.684 90.8065 44.8497 cv
90.7259 45.0198 90.6901 45.3063 90.6901 45.7137 cv
90.6901 46.1256 90.7259 46.4166 90.8065 46.5867 cv
90.8826 46.7568 91.0125 46.8374 91.1916 46.8374 cv
91.3706 46.8374 91.496 46.7568 91.5766 46.5867 cv
91.6527 46.4166 91.693 46.1256 91.693 45.7137 cv
92.5346 45.7182 mo
92.5346 46.2599 92.4182 46.6763 92.1854 46.9673 cv
91.9526 47.2627 91.6213 47.406 91.1916 47.406 cv
90.7618 47.406 90.4305 47.2627 90.1977 46.9673 cv
89.9649 46.6763 89.8485 46.2599 89.8485 45.7182 cv
89.8485 45.1809 89.9649 44.7646 90.1977 44.4691 cv
90.4305 44.1736 90.7618 44.0259 91.1916 44.0259 cv
91.6213 44.0259 91.9526 44.1736 92.1854 44.4691 cv
92.4182 44.7646 92.5346 45.1809 92.5346 45.7182 cv
f
97.1456 12.7102 mo
97.1456 12.3028 97.1053 12.0163 97.0292 11.8462 cv
96.953 11.6805 96.8232 11.5955 96.6441 11.5955 cv
96.4651 11.5955 96.3352 11.6805 96.2591 11.8462 cv
96.1785 12.0163 96.1427 12.3028 96.1427 12.7102 cv
96.1427 13.1221 96.1785 13.4131 96.2591 13.5832 cv
96.3352 13.7533 96.4651 13.8339 96.6441 13.8339 cv
96.8232 13.8339 96.9486 13.7533 97.0292 13.5832 cv
97.1053 13.4131 97.1456 13.1221 97.1456 12.7102 cv
97.9872 12.7147 mo
97.9872 13.2564 97.8708 13.6728 97.638 13.9638 cv
97.4052 14.2592 97.0739 14.4025 96.6441 14.4025 cv
96.2144 14.4025 95.8831 14.2592 95.6503 13.9638 cv
95.4175 13.6728 95.3011 13.2564 95.3011 12.7147 cv
95.3011 12.1775 95.4175 11.7611 95.6503 11.4656 cv
95.8831 11.1701 96.2144 11.0224 96.6441 11.0224 cv
97.0739 11.0224 97.4052 11.1701 97.638 11.4656 cv
97.8708 11.7611 97.9872 12.1775 97.9872 12.7147 cv
f
98.6588 13.4982 mo
99.4467 13.4982 li
99.4467 14.3443 li
98.6588 14.3443 li
98.6588 13.4982 li
f
101.551 11.7745 mo
100.629 13.14 li
101.551 13.14 li
101.551 11.7745 li
101.412 11.0806 mo
102.348 11.0806 li
102.348 13.14 li
102.813 13.14 li
102.813 13.7489 li
102.348 13.7489 li
102.348 14.3443 li
101.551 14.3443 li
101.551 13.7489 li
100.105 13.7489 li
100.105 13.0281 li
101.412 11.0806 li
f
103.494 11.0806 mo
105.585 11.0806 li
105.585 11.6984 li
104.165 11.6984 li
104.165 12.2043 li
104.358 12.164 li
104.559 12.1506 li
104.958 12.1506 105.267 12.2536 105.491 12.4506 cv
105.71 12.6475 105.822 12.9251 105.822 13.2788 cv
105.822 13.6325 105.701 13.91 105.459 14.107 cv
105.218 14.304 104.882 14.4025 104.456 14.4025 cv
104.268 14.4025 104.085 14.3846 103.906 14.3488 cv
103.722 14.3174 103.543 14.2637 103.364 14.1921 cv
103.364 13.5295 li
103.543 13.6325 103.709 13.7086 103.87 13.7578 cv
104.031 13.8115 104.179 13.8339 104.322 13.8339 cv
104.524 13.8339 104.685 13.7847 104.801 13.6862 cv
104.918 13.5877 104.98 13.4489 104.98 13.2788 cv
104.98 13.1087 104.918 12.9744 104.801 12.8759 cv
104.685 12.7774 104.524 12.7236 104.322 12.7236 cv
104.197 12.7236 104.067 12.7416 103.933 12.7729 cv
103.798 12.8042 103.651 12.8535 103.494 12.9162 cv
103.494 11.0806 li
f
108.195 12.7102 mo
108.195 12.3028 108.154 12.0163 108.078 11.8461 cv
108.002 11.6805 107.872 11.5955 107.693 11.5955 cv
107.514 11.5955 107.384 11.6805 107.308 11.8461 cv
107.228 12.0163 107.192 12.3028 107.192 12.7102 cv
107.192 13.1221 107.228 13.4131 107.308 13.5832 cv
107.384 13.7534 107.514 13.8339 107.693 13.8339 cv
107.872 13.8339 107.998 13.7534 108.078 13.5832 cv
108.154 13.4131 108.195 13.1221 108.195 12.7102 cv
109.036 12.7147 mo
109.036 13.2564 108.92 13.6728 108.687 13.9638 cv
108.454 14.2593 108.123 14.4025 107.693 14.4025 cv
107.263 14.4025 106.932 14.2593 106.699 13.9638 cv
106.467 13.6728 106.35 13.2564 106.35 12.7147 cv
106.35 12.1774 106.467 11.7611 106.699 11.4656 cv
106.932 11.1701 107.263 11.0224 107.693 11.0224 cv
108.123 11.0224 108.454 11.1701 108.687 11.4656 cv
108.92 11.7611 109.036 12.1774 109.036 12.7147 cv
f
97.1456 29.212 mo
97.1456 28.8046 97.1053 28.518 97.0292 28.3479 cv
96.953 28.1823 96.8232 28.0972 96.6441 28.0972 cv
96.4651 28.0972 96.3352 28.1823 96.2591 28.3479 cv
96.1785 28.518 96.1427 28.8046 96.1427 29.212 cv
96.1427 29.6238 96.1785 29.9148 96.2591 30.085 cv
96.3352 30.2551 96.4651 30.3357 96.6441 30.3357 cv
96.8232 30.3357 96.9486 30.2551 97.0292 30.085 cv
97.1053 29.9148 97.1456 29.6238 97.1456 29.212 cv
97.9872 29.2164 mo
97.9872 29.7581 97.8708 30.1745 97.638 30.4655 cv
97.4052 30.761 97.0739 30.9042 96.6441 30.9042 cv
96.2144 30.9042 95.8831 30.761 95.6503 30.4655 cv
95.4175 30.1745 95.3011 29.7581 95.3011 29.2164 cv
95.3011 28.6792 95.4175 28.2628 95.6503 27.9674 cv
95.8831 27.6719 96.2144 27.5241 96.6441 27.5241 cv
97.0739 27.5241 97.4052 27.6719 97.638 27.9674 cv
97.8708 28.2628 97.9872 28.6792 97.9872 29.2164 cv
f
98.6588 29.9999 mo
99.4467 29.9999 li
99.4467 30.846 li
98.6588 30.846 li
98.6588 29.9999 li
f
101.551 28.2763 mo
100.629 29.6417 li
101.551 29.6417 li
101.551 28.2763 li
101.412 27.5823 mo
102.348 27.5823 li
102.348 29.6417 li
102.813 29.6417 li
102.813 30.2506 li
102.348 30.2506 li
102.348 30.846 li
101.551 30.846 li
101.551 30.2506 li
100.105 30.2506 li
100.105 29.5298 li
101.412 27.5823 li
f
103.494 27.5823 mo
105.585 27.5823 li
105.585 28.2002 li
104.165 28.2002 li
104.165 28.7061 li
104.358 28.6658 li
104.559 28.6523 li
104.958 28.6523 105.267 28.7553 105.491 28.9523 cv
105.71 29.1493 105.822 29.4269 105.822 29.7805 cv
105.822 30.1342 105.701 30.4118 105.459 30.6088 cv
105.218 30.8058 104.882 30.9042 104.456 30.9042 cv
104.268 30.9042 104.085 30.8863 103.906 30.8505 cv
103.722 30.8192 103.543 30.7655 103.364 30.6938 cv
103.364 30.0312 li
103.543 30.1342 103.709 30.2103 103.87 30.2596 cv
104.031 30.3133 104.179 30.3357 104.322 30.3357 cv
104.524 30.3357 104.685 30.2864 104.801 30.1879 cv
104.918 30.0894 104.98 29.9507 104.98 29.7805 cv
104.98 29.6104 104.918 29.4761 104.801 29.3776 cv
104.685 29.2791 104.524 29.2254 104.322 29.2254 cv
104.197 29.2254 104.067 29.2433 103.933 29.2746 cv
103.798 29.306 103.651 29.3552 103.494 29.4179 cv
103.494 27.5823 li
f
108.195 29.212 mo
108.195 28.8046 108.154 28.518 108.078 28.3479 cv
108.002 28.1822 107.872 28.0972 107.693 28.0972 cv
107.514 28.0972 107.384 28.1822 107.308 28.3479 cv
107.228 28.518 107.192 28.8046 107.192 29.212 cv
107.192 29.6239 107.228 29.9148 107.308 30.085 cv
107.384 30.2551 107.514 30.3357 107.693 30.3357 cv
107.872 30.3357 107.998 30.2551 108.078 30.085 cv
108.154 29.9148 108.195 29.6239 108.195 29.212 cv
109.036 29.2165 mo
109.036 29.7582 108.92 30.1745 108.687 30.4655 cv
108.454 30.761 108.123 30.9043 107.693 30.9043 cv
107.263 30.9043 106.932 30.761 106.699 30.4655 cv
106.467 30.1745 106.35 29.7582 106.35 29.2165 cv
106.35 28.6792 106.467 28.2628 106.699 27.9674 cv
106.932 27.6719 107.263 27.5242 107.693 27.5242 cv
108.123 27.5242 108.454 27.6719 108.687 27.9674 cv
108.92 28.2628 109.036 28.6792 109.036 29.2165 cv
f
95.7557 46.7658 mo
96.4989 46.7658 li
96.4989 44.6571 li
95.7378 44.8138 li
95.7378 44.2408 li
96.4944 44.0841 li
97.2958 44.0841 li
97.2958 46.7658 li
98.0389 46.7658 li
98.0389 47.3478 li
95.7557 47.3478 li
95.7557 46.7658 li
1 /0 /CSD get_res sepcs
0 sep
f
98.8045 46.5016 mo
99.5925 46.5016 li
99.5925 47.3478 li
98.8045 47.3478 li
98.8045 46.5016 li
f
102.109 45.7137 mo
102.109 45.3063 102.068 45.0198 101.992 44.8497 cv
101.916 44.684 101.786 44.5989 101.607 44.5989 cv
101.428 44.5989 101.298 44.684 101.222 44.8497 cv
101.141 45.0198 101.106 45.3063 101.106 45.7137 cv
101.106 46.1256 101.141 46.4166 101.222 46.5867 cv
101.298 46.7568 101.428 46.8374 101.607 46.8374 cv
101.786 46.8374 101.912 46.7568 101.992 46.5867 cv
102.068 46.4166 102.109 46.1256 102.109 45.7137 cv
102.95 45.7182 mo
102.95 46.2599 102.834 46.6763 102.601 46.9673 cv
102.368 47.2627 102.037 47.406 101.607 47.406 cv
101.177 47.406 100.846 47.2627 100.613 46.9673 cv
100.38 46.6763 100.264 46.2599 100.264 45.7182 cv
100.264 45.1809 100.38 44.7646 100.613 44.4691 cv
100.846 44.1736 101.177 44.0259 101.607 44.0259 cv
102.037 44.0259 102.368 44.1736 102.601 44.4691 cv
102.834 44.7646 102.95 45.1809 102.95 45.7182 cv
f
105.224 45.7137 mo
105.224 45.3063 105.184 45.0198 105.108 44.8497 cv
105.032 44.684 104.902 44.5989 104.723 44.5989 cv
104.544 44.5989 104.414 44.684 104.338 44.8497 cv
104.257 45.0198 104.222 45.3063 104.222 45.7137 cv
104.222 46.1256 104.257 46.4166 104.338 46.5867 cv
104.414 46.7568 104.544 46.8374 104.723 46.8374 cv
104.902 46.8374 105.028 46.7568 105.108 46.5867 cv
105.184 46.4166 105.224 46.1256 105.224 45.7137 cv
106.066 45.7182 mo
106.066 46.2599 105.95 46.6763 105.717 46.9673 cv
105.484 47.2627 105.153 47.406 104.723 47.406 cv
104.293 47.406 103.962 47.2627 103.729 46.9673 cv
103.496 46.6763 103.38 46.2599 103.38 45.7182 cv
103.38 45.1809 103.496 44.7646 103.729 44.4691 cv
103.962 44.1736 104.293 44.0259 104.723 44.0259 cv
105.153 44.0259 105.484 44.1736 105.717 44.4691 cv
105.95 44.7646 106.066 45.1809 106.066 45.7182 cv
f
108.34 45.7137 mo
108.34 45.3063 108.3 45.0198 108.224 44.8497 cv
108.148 44.684 108.018 44.5989 107.839 44.5989 cv
107.66 44.5989 107.53 44.684 107.454 44.8497 cv
107.373 45.0198 107.338 45.3063 107.338 45.7137 cv
107.338 46.1256 107.373 46.4166 107.454 46.5867 cv
107.53 46.7568 107.66 46.8374 107.839 46.8374 cv
108.018 46.8374 108.143 46.7568 108.224 46.5867 cv
108.3 46.4166 108.34 46.1256 108.34 45.7137 cv
109.182 45.7182 mo
109.182 46.2599 109.066 46.6763 108.833 46.9672 cv
108.6 47.2627 108.269 47.406 107.839 47.406 cv
107.409 47.406 107.078 47.2627 106.845 46.9672 cv
106.612 46.6763 106.496 46.2599 106.496 45.7182 cv
106.496 45.1809 106.612 44.7646 106.845 44.4691 cv
107.078 44.1736 107.409 44.0259 107.839 44.0259 cv
108.269 44.0259 108.6 44.1736 108.833 44.4691 cv
109.066 44.7646 109.182 45.1809 109.182 45.7182 cv
f
grestore
gsave
106.992 54.252 mo
115.278 54.252 li
115.278 4.53743 li
106.992 4.53743 li
106.992 54.252 li
clp
106.992 54.252 mo
115.278 54.252 li
115.278 4.53743 li
106.992 4.53743 li
106.992 54.252 li
1 /0 /CSD get_res sepcs
0 sep
f
107.241 54.0034 mo
115.029 54.0034 li
115.029 4.78601 li
107.241 4.78601 li
107.241 54.0034 li
f
gsave
107.241 54.0034 mo
115.029 54.0034 li
115.029 4.78601 li
107.241 4.78601 li
107.241 54.0034 li
clp
111.763 53.8884 mo
107.241 53.8884 li
107.241 4.90112 li
111.763 4.90112 li
111.763 53.8884 li
gsave
/1 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 54.752 ]ct
[4.80574 0 0 49.2174 107.075 .748576 ]ct
snap_to_device
<<
/T 1
/W 29 
/H 297 
/M[29 0 0 -297 0 297 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"-OlVA7;!64QdiGuFLE+GE(Zr5AI`&-X/'s4FU9BqB\7aA(dX"dl'"g3T$UKKQ.S)$c9mGJZjO%5.e
-:C6?MF`JXOj6TX&L3N]IH#)@#Hd07EHq$,^2KWfO)n[eGph8GJc5K4kLbYbln*$BqsDXE],^N#Cu7;@
9l)n^p=!j4&)%uU^-5NK_"L4MXqPVUb'2IDI9*oA38:?$MN4rY3a,e/<`!("bI5.)nKV7em=?1aF`dqi
g%(/i<jAbe=a#HM\"UHt/a$)%"l"B`'kMKb/&,Ruh/p/kmG6nS#MZ8beKo$7kA#n-10\PgYeAT\F!99W
([H:L]mf5,2R_3i2giNOr+b7nCs0![qDm<Rm:SAa^!tH@O_r4tD$=b?SUZ%2p>W2)q.q^og=NVnn*\8,
>NG$pT5C:24."9Y_m[ADb@[746RLPM+5UFqlc2W+3PZ!1<8\M"B7Qgp:BMJN:BB\\4hW+kd6/8OV#Y4G
:B1dU*XCi6bm*=9blUerP(==URD<XI)*ft3FC:u]FLK5?WGL%68Sh=V$#EOjEGUhiZ##VSLY*pT&$Sb.
mLOOV(`gEUn\@](EPMjg,iCkpZ+rM=M82rr#D'^-@t6j]UOdu4UO`>[,Cfp*H\$VInSH)D)r!%hQ>Hm=
_fch-`AR^PA@kb_!Jh#kUDK]cJT/%WJQO%R/K+n+M\NAs+`&<PL!:fL!7RjlJ)V:6"UVA_VpGC_*@+lU
U,tp$(?c)<rs3]Rg_Ar`\093OE'6bi-1GQ/\0>l`i1e!jJMr):"^2(5"I]M>#W)jX&i_'(Mnh&u3e:Ic
*s@T2*#>Ia-ke!DE!V[6lkLo]fI^JIfHIIn@&q)0!h0?O$#C/$&6LUTTtji_%g:Ghj9T9(A-lcR]Ig?c
@"lC:JY`Dc!pKc#I_J5PcO%henNH4$9BEKB.58rc2oEftc,2JC@(_s],frCiqQQ;>;.,?<Dj6_DCq,BU
I&OiRDE@(`^5)p+8=MlO5SRRY<?RMZb1rkP&Vq1+$,fEFki.SkY+P4jp]V?n'taSh!I'Xh(:Y[;-.")[
P:k_I&@a?3:#N%eAUt52ETXo!Mnj649`g:UolN+`P<b*mQ,*-9Z)1daOFU9F+](KAA+g6D$LAJZ:)@cU
$>^=L6sp+&Pkdim?XTEi*aPS`'j*&L/W`C;@GV]C<F?]8eRSq:(.b2.2[]cN#c%g'd"RluJLLX6ksEW>
!_EHMF<P7l^tl\Yoj[P)JUqnYdpKm[B6rDsT2d"-^_.@\*<79oiS4~>

%%EndBinary
grestore
np
grestore
107.126 4.67095 mo
115.144 4.67095 li
115.144 4.90112 li
107.126 4.90112 li
107.126 4.67095 li
1 /0 /CSD get_res sepcs
1 sep
f
114.914 54.1185 mo
114.914 4.67095 li
115.144 4.67095 li
115.144 54.1185 li
114.914 54.1185 li
f
107.126 53.8884 mo
115.144 53.8884 li
115.144 54.1185 li
107.126 54.1185 li
107.126 53.8884 li
f
.23016 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
107.241 54.0034 mo
107.241 4.78601 li
@
grestore
1 /0 /CSD get_res sepcs
1 sep
true set_gvm
%ADOBeginSubsetFont: RUQAAA+CMSSBX10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
DVZBWL+CMSSBX10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/zero <1C60D8A8C9B795A0335964371F4A4CA7FE73AF3B8BEC93A4723E1E000
6587A524086FFB8AFE852C45BAD4113AFD64CF3B4AA1AE0CB7FD854DB68ADBA8
300892E0591E04AA71233C37D4CAFB659E8CA41D5D53D4D6F32CCE483FBF1316
456353D58DDB1063D61EB69A4FC385EA560ED68E8D6C2FC59AAE3538D4C1891A
E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DVZBWL+CMSSBX10 /Encoding get
dup 48 /zero put
pop
%ADOEndSubsetFont
reset_gvm
/DVZBWL+CMSSBX10*1 
[48{/.notdef}rp /zero 207{/.notdef}rp]
DVZBWL+CMSSBX10 nf
DVZBWL+CMSSBX10*1 [6.9738 0 0 -6.9738 0 0 ]msf
109.126 52.536 mo
(0)sh
1 /0 /CSD get_res sepcs
0 sep
true set_gvm
%ADOBeginSubsetFont: RUQAAA+CMSSBX10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
DVZBWL+CMSSBX10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B795A0CD6BCD21B40205F6F7BA65C738D282953681BF5185
9DC859EB177150154F0E13E86B5C92A79F1E2BB1E30C10719657DE6A0E40F3D0
74BE07DBDA4DC7BFCD0099861FED004AA46F2B2C2C3870E8553A9E2F3F4C154B
0F4494E5> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DVZBWL+CMSSBX10 /Encoding get
dup 49 /one put
pop
%ADOEndSubsetFont
reset_gvm
/DVZBWL+CMSSBX10*1 
[48{/.notdef}rp /zero /one 206{/.notdef}rp]
DVZBWL+CMSSBX10 nf
DVZBWL+CMSSBX10*1 [6.9738 0 0 -6.9738 0 0 ]msf
109.126 10.928 mo
(1)sh
gsave
111.763 54.237 mo
165.487 54.237 li
165.487 .513493 li
111.763 .513493 li
111.763 54.237 li
clp
111.763 54.237 mo
165.487 54.237 li
165.487 .513493 li
111.763 .513493 li
111.763 54.237 li
f
115.685 53.9684 mo
165.19 53.9684 li
165.19 4.46314 li
115.685 4.46314 li
115.685 53.9684 li
f
gsave
115.685 53.9684 mo
165.19 53.9684 li
165.19 4.46314 li
115.685 4.46314 li
115.685 53.9684 li
clp
165.19 53.9684 mo
115.685 53.9684 li
115.685 4.46314 li
165.19 4.46314 li
165.19 53.9684 li
gsave
/1 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 54.752 ]ct
[49.7838 0 0 49.7838 115.506 .604537 ]ct
snap_to_device
<<
/T 1
/W 278 
/H 278 
/M[278 0 0 -278 0 278 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"-MZ#'RD$j8iscJ3m]cCCjSQQfMIT4%,<WIS*bIt.ISo;M-(kA-[^g)cf&X@P9NUcYVO2cc^n/(1!=
VAh&6N>:^'C=A.Wl,JU&B=7!DMKE>s]!L+4@n!u6,2HC=]!3I8=HW$Q2VhJtDQHBQ<h"!.82jSF40)(7
<hpZbd[epc)_9?r($X"Ydu>+,`enkN[HY\gFCRbNZeBM27Co`Jh-"U+Yp/"+Om];/h,oeWX@RP9Rr5;u
2cc_9X%bNRU`1i4S^jSV/(0Cll-=%mN>:]tMKEL=l,JU&@n!u8g2pgn]!3I8=`(aT,2H@`m]8>&=HRL&
89\+(DQHAf<hqgX9fH+K)_9@-eYX99dZ#"+c>(gf($W_qFD&#G`enkJ7CohZFCRbNYp/",D7Ztrh,og-
X>\m:O`%6kG?12NX@P9NUcYVO2cc^n/(1!=VAh&6N>:^'C=A.Wl,JU&B=7!DMKE>s]!L+4@n!u6,2HC=
]!3I8=HW$Q2VhJtDQHBQ<h"!.82jSF40)(7<hpZbd[epc)_9?r($X"Ydu>+,`enkN[HY\gFCRbNZeBM2
7Co`Jh-"U+Yp/"+Om];/h,oeWX@RP9Rr5;u2cc_9X%bNRU`1i4S^jSV/(0Cll-=%mN>:]tMKEL=l,JU&
@n!u8g2pgn]!3I8=`(aT,2H@`m]8>&=HRL&89\+(DQHAf<hqgX9fH+K)_9@-eYX99dZ#"+c>(gf($W_q
FD&#G`enkJ7CohZFCRbNYp/",D7Ztrh,og-X>\m:O`%6kG?12NX@P9NUcYVO2cc^n/(1!=VAh&6N>:^'
C=A.Wl,JU&B=7!DMKE>s]!L+4@n!u6,2HC=]!3I8=HW$Q2VhJtDQHBQ<h"!.82jSF40)(7<hpZbd[epc
)_9?r($X"Ydu>+,`enkN[HY\gFCRbNZeBM27Co`Jh-"U+Yp/"+Om];/h,oeWX@RP9Rr5;u2cc_9X%bNR
U`1i4S^jSV/(0Cll-=%mN>:]tMKEL=l,JU&@n!u8g2pgn]!3I8=`(aT,2H@`m]8>&=HRL&89\+(DQHAf
<hqgX9fH+K)_9@-eYX99dZ#"+c>(gf($W_qFD&#GHPbq]<hsXtF%nSoUi/G<9fH+KDa&5:2cc_m5''FW
<hsXtF%nSoUi/G<9fH+KDa&5:2cc_m5''FW<hsXtF%nSoUi/G<9fH+KDa&5:2cc_m5''FW<hsXtF%nSo
Ui/G<9fH+KDa&5:2cc_m5''FW<hsXtF%nSoUi/G<9fH+KDa&5:2cc_m5''FW<hsXtF%nSoUi/G<9fH+K
Da&5:2cc_m5''FW<hsXtF%nSoUi/G<9fH+KDa&5:2cc_m5''FW<hsXtF%nSoUi/G<9fH+KDa&5:2cc_m
5''FW<hsXtF%nSoUi/G<9fH+KDa&5:2cc_m5''FW<hsXtF%nSoUi/G<9fH+KDa&5:2cc_m5''FW<hsXt
F%nSoUi/G<9fH+KDa&5:2cc_m5''FW<hsXtF%nSoUi/G<9fH+KDa&5:2cc_m5''FW<hsXtF%nSoUi/G<
9fH+KDa&5:2cc_m5''FW<hsXtF%nSoUi/G<9fH+KDa&5:2cc_m5''FW<hsXtF%nSoUi/G<9fH+KDa&5:
2cc_m5''FW<hsXtF%nSoUi/G<9fH+KDa&5:2cc_m5''FW<hsXtF%nSoUi/G<9fH+KDa&5:2cc_m5''FW
<hsXtF%nSoUi/G<9fH+KDa&5:2cc_m5''FW<hsXtF%nSoUi/G<9fH+KDa&5:2cc_m5''FW<hsXtF%nSo
Ui/G<9fH+KDa&5:2cc_m5''FW<hsXtF%nSoUi/G<9fH+KDa&5:2cc_m5''FW<hsXtF%nSoUi/G<9fH+K
Da&5:2cc_m5''FW<hsXtF%nSoUi/G<9fH+KDa&5:2cc_m?LuklT>#T5rbFC&Z/Tk87CofDh,n[.Yp/",
NGbgWh,og-X@>-LS8PE!G?1IX.o&$(UcYX)N>8?1/(1!=kf/M/N>:^'C33t)l,JU&B/R9*icJ[!]!E=2
=E1pW,2HC]DQGhR=HW$Q7Q4A<DQHBQ<hgTa:,c4L40-bg'rN!$d[eqP`er6)($X"YFCW;S`enkN27g'P
FCRbNZPqY%EOrD!h-#_TX>o$<Om];?2ccGdX@RP9UDk^Y2cc_9X3lnAV]./7S^lrDMURP"l-=$cA&[]P
MKEJg]!:7:@n!u8)VnM8]!3I8=cI=#38I]!m]8l:<h+'/89\+0)_4ZB<hqgXd>\m=)_9@-e`b#1du>+,
c>%H2`TbC"FD!JBZ/Tk87CofDh,n[.Yp/",NGbgWh,og-X@>-LS8PE!G?1IX.o&$(UcYX)N>8?1/(1!=
kf/M/N>:^'C33t)l,JU&B/R9*icJ[!]!E=2=E1pW,2HC]DQGhR=HW$Q7Q4A<DQHBQ<hgTa:,c4L40-bg
'rN!$d[eqP`er6)($X"YFCW;S`enkN27g'PFCRbNZPqY%EOrD!h-#_TX>o$<Om];?2ccGdX@RP9UDk^Y
2cc_9X3lnAV]./7S^lrDMURP"l-=$cA&[]PMKEJg]!:7:@n!u8)VnM8]!3I8=cI=#38I]!m]8l:<h+'/
89\+0)_4ZB<hqgXd>\m=)_9@-e`b#1du>+,c>%H2`TbC"FD!JBZ/Tk87CofDh,n[.Yp/",NGbgWh,og-
X@>-LS8PE!G?1IX.o&$(UcYX)N>8?1/(1!=kf/M/N>:^'C33t)l,JU&B/R9*icJ[!]!E=2=E1pW,2HC]
DQGhR=HW$Q7Q4A<DQHBQ<hgTa:,c4L40-bg'rN!$d[eqP`er6)($X"YFCW;S`enkN27g'PFCRbNZPqY%
EOrD!h-#_TX>o$<Om];?2ccGdX@RP9UDk^Y2cc_9X3lnAV]./7S^lrDMURP"l-=$cA&[]PMKEJg]!:7:
@n!u8)VnM8]!3I8=cI=#38I]!m]8l:<h+'/89\,+56-K"##>~>

%%EndBinary
grestore
np
grestore
123.936 4.46315 mo
123.936 4.46315 li
1 /0 /CSD get_res sepcs
1 sep
f
.12436 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
123.936 4.46315 mo
123.936 4.46315 li
@
124.171 2.30476 mo
124.005 2.30476 123.88 2.3361 123.799 2.38982 cv
123.719 2.44355 123.678 2.52413 123.678 2.63158 cv
123.678 2.73007 123.71 2.81066 123.777 2.86438 cv
123.844 2.92258 123.938 2.94944 124.054 2.94944 cv
124.202 2.94944 124.327 2.9002 124.426 2.79275 cv
124.524 2.6853 124.578 2.55547 124.578 2.3943 cv
124.578 2.30476 li
124.171 2.30476 li
125.366 2.00928 mo
125.366 3.40609 li
124.578 3.40609 li
124.578 3.04346 li
124.471 3.19568 124.354 3.30312 124.224 3.3658 cv
124.09 3.42848 123.933 3.46429 123.745 3.46429 cv
123.49 3.46429 123.284 3.39266 123.128 3.24492 cv
122.966 3.10166 122.89 2.90915 122.89 2.67187 cv
122.89 2.38535 122.989 2.17493 123.186 2.04062 cv
123.383 1.90631 123.692 1.83916 124.117 1.83916 cv
124.578 1.83916 li
124.578 1.77648 li
124.578 1.6556 124.529 1.56606 124.43 1.50786 cv
124.332 1.44966 124.18 1.41832 123.974 1.41832 cv
123.804 1.41832 123.647 1.43623 123.504 1.47205 cv
123.36 1.50786 123.226 1.55711 123.105 1.61979 cv
123.105 1.02435 li
123.271 .984058 123.436 .952719 123.607 .930334 cv
123.777 .912426 123.947 .898996 124.117 .898996 cv
124.556 .898996 124.874 .988535 125.071 1.16314 cv
125.268 1.33774 125.366 1.61979 125.366 2.00928 cv
f
140.437 4.46315 mo
140.437 4.46315 li
f
140.437 4.46315 mo
140.437 4.46315 li
@
140.803 2.9002 mo
140.968 2.9002 141.094 2.842 141.183 2.71664 cv
141.273 2.59576 141.317 2.41669 141.317 2.18388 cv
141.317 1.95108 141.273 1.77648 141.183 1.65112 cv
141.094 1.53025 140.968 1.46757 140.803 1.46757 cv
140.632 1.46757 140.507 1.53025 140.418 1.65112 cv
140.328 1.77648 140.283 1.95108 140.283 2.18388 cv
140.283 2.41669 140.328 2.59576 140.418 2.71664 cv
140.507 2.842 140.632 2.9002 140.803 2.9002 cv
140.283 1.31535 mo
140.391 1.17209 140.507 1.06912 140.641 1.00197 cv
140.771 .934811 140.923 .898996 141.094 .898996 cv
141.394 .898996 141.64 1.01987 141.837 1.26163 cv
142.029 1.50339 142.128 1.80782 142.128 2.18388 cv
142.128 2.56442 142.029 2.87334 141.837 3.11061 cv
141.64 3.34789 141.394 3.46429 141.094 3.46429 cv
140.923 3.46429 140.771 3.42848 140.641 3.3658 cv
140.507 3.30312 140.391 3.19568 140.283 3.05241 cv
140.283 3.40609 li
139.5 3.40609 li
139.5 .00360346 li
140.283 .00360346 li
140.283 1.31535 li
f
156.939 4.46315 mo
156.939 4.46315 li
f
156.939 4.46315 mo
156.939 4.46315 li
@
158.214 1.0333 mo
158.214 1.67351 li
158.106 1.60188 157.999 1.54815 157.891 1.51234 cv
157.784 1.47652 157.672 1.45862 157.56 1.45862 cv
157.341 1.45862 157.17 1.52577 157.05 1.65112 cv
156.924 1.77648 156.866 1.95556 156.866 2.18388 cv
156.866 2.41669 156.924 2.59576 157.05 2.72112 cv
157.17 2.84647 157.341 2.90915 157.56 2.90915 cv
157.681 2.90915 157.797 2.89124 157.909 2.85543 cv
158.017 2.81961 158.12 2.76589 158.214 2.69426 cv
158.214 3.33446 li
158.088 3.37923 157.963 3.41057 157.837 3.43296 cv
157.712 3.45086 157.587 3.46429 157.461 3.46429 cv
157.018 3.46429 156.673 3.35237 156.423 3.12852 cv
156.172 2.90467 156.051 2.58681 156.051 2.18388 cv
156.051 1.78096 156.172 1.46757 156.423 1.23924 cv
156.673 1.0154 157.018 .898996 157.461 .898996 cv
157.587 .898996 157.712 .912426 157.837 .934811 cv
157.963 .957196 158.088 .988535 158.214 1.0333 cv
f
115.685 12.714 mo
115.685 12.714 li
f
115.685 12.714 mo
115.685 12.714 li
@
165.19 12.714 mo
165.19 12.714 li
f
165.19 12.714 mo
165.19 12.714 li
@
113.687 12.8349 mo
113.522 12.8349 113.396 12.8663 113.316 12.92 cv
113.235 12.9737 113.195 13.0543 113.195 13.1617 cv
113.195 13.2602 113.226 13.3408 113.293 13.3945 cv
113.36 13.4527 113.454 13.4796 113.571 13.4796 cv
113.719 13.4796 113.844 13.4304 113.942 13.3229 cv
114.041 13.2155 114.095 13.0856 114.095 12.9245 cv
114.095 12.8349 li
113.687 12.8349 li
114.883 12.5394 mo
114.883 13.9362 li
114.095 13.9362 li
114.095 13.5736 li
113.987 13.7258 113.871 13.8333 113.741 13.896 cv
113.607 13.9586 113.45 13.9944 113.262 13.9944 cv
113.007 13.9944 112.801 13.9228 112.644 13.7751 cv
112.483 13.6318 112.407 13.4393 112.407 13.202 cv
112.407 12.9155 112.505 12.7051 112.702 12.5708 cv
112.899 12.4365 113.208 12.3693 113.633 12.3693 cv
114.095 12.3693 li
114.095 12.3066 li
114.095 12.1858 114.045 12.0962 113.947 12.038 cv
113.848 11.9798 113.696 11.9485 113.49 11.9485 cv
113.32 11.9485 113.163 11.9664 113.02 12.0022 cv
112.877 12.038 112.743 12.0873 112.622 12.1499 cv
112.622 11.5545 li
112.787 11.5142 112.953 11.4829 113.123 11.4605 cv
113.293 11.4426 113.463 11.4292 113.633 11.4292 cv
114.072 11.4292 114.39 11.5187 114.587 11.6933 cv
114.784 11.8679 114.883 12.1499 114.883 12.5394 cv
f
115.685 29.2158 mo
115.685 29.2158 li
f
115.685 29.2158 mo
115.685 29.2158 li
@
165.19 29.2158 mo
165.19 29.2158 li
f
165.19 29.2158 mo
165.19 29.2158 li
@
113.742 30.379 mo
113.907 30.379 114.033 30.3208 114.122 30.1955 cv
114.212 30.0746 114.256 29.8955 114.256 29.6627 cv
114.256 29.4299 114.212 29.2553 114.122 29.1299 cv
114.033 29.0091 113.907 28.9464 113.742 28.9464 cv
113.571 28.9464 113.446 29.0091 113.357 29.1299 cv
113.267 29.2553 113.222 29.4299 113.222 29.6627 cv
113.222 29.8955 113.267 30.0746 113.357 30.1955 cv
113.446 30.3208 113.571 30.379 113.742 30.379 cv
113.222 28.7942 mo
113.33 28.6509 113.446 28.5479 113.58 28.4808 cv
113.71 28.4136 113.862 28.3778 114.033 28.3778 cv
114.333 28.3778 114.579 28.4987 114.776 28.7404 cv
114.968 28.9822 115.067 29.2866 115.067 29.6627 cv
115.067 30.0432 114.968 30.3522 114.776 30.5894 cv
114.579 30.8267 114.333 30.9431 114.033 30.9431 cv
113.862 30.9431 113.71 30.9073 113.58 30.8446 cv
113.446 30.7819 113.33 30.6745 113.222 30.5312 cv
113.222 30.8849 li
112.439 30.8849 li
112.439 27.4824 li
113.222 27.4824 li
113.222 28.7942 li
f
115.685 45.7175 mo
115.685 45.7175 li
f
115.685 45.7175 mo
115.685 45.7175 li
@
165.19 45.7175 mo
165.19 45.7175 li
f
165.19 45.7175 mo
165.19 45.7175 li
@
114.884 44.5669 mo
114.884 45.2072 li
114.776 45.1355 114.669 45.0818 114.562 45.046 cv
114.454 45.0102 114.342 44.9923 114.23 44.9923 cv
114.011 44.9923 113.841 45.0594 113.72 45.1848 cv
113.595 45.3101 113.536 45.4892 113.536 45.7175 cv
113.536 45.9503 113.595 46.1294 113.72 46.2548 cv
113.841 46.3801 114.011 46.4428 114.23 46.4428 cv
114.351 46.4428 114.468 46.4249 114.58 46.3891 cv
114.687 46.3533 114.79 46.2995 114.884 46.2279 cv
114.884 46.8681 li
114.759 46.9129 114.633 46.9442 114.508 46.9666 cv
114.383 46.9845 114.257 46.9979 114.132 46.9979 cv
113.689 46.9979 113.344 46.886 113.093 46.6622 cv
112.842 46.4383 112.722 46.1205 112.722 45.7175 cv
112.722 45.3146 112.842 45.0012 113.093 44.7729 cv
113.344 44.549 113.689 44.4326 114.132 44.4326 cv
114.257 44.4326 114.383 44.4461 114.508 44.4685 cv
114.633 44.4908 114.759 44.5222 114.884 44.5669 cv
f
.24872 lw
2 lc
115.685 4.46315 mo
165.19 4.46315 li
@
165.19 53.9684 mo
165.19 4.46315 li
@
115.685 53.9684 mo
165.19 53.9684 li
@
115.685 53.9684 mo
115.685 4.46315 li
@
117.734 13.7623 mo
118.477 13.7623 li
118.477 11.6537 li
117.716 11.8103 li
117.716 11.2373 li
118.473 11.0806 li
119.274 11.0806 li
119.274 13.7623 li
120.017 13.7623 li
120.017 14.3443 li
117.734 14.3443 li
117.734 13.7623 li
1 /0 /CSD get_res sepcs
0 sep
f
120.783 13.4982 mo
121.571 13.4982 li
121.571 14.3443 li
120.783 14.3443 li
120.783 13.4982 li
f
124.087 12.7102 mo
124.087 12.3028 124.047 12.0163 123.971 11.8462 cv
123.895 11.6805 123.765 11.5955 123.586 11.5955 cv
123.407 11.5955 123.277 11.6805 123.201 11.8462 cv
123.12 12.0163 123.084 12.3028 123.084 12.7102 cv
123.084 13.1221 123.12 13.4131 123.201 13.5832 cv
123.277 13.7533 123.407 13.8339 123.586 13.8339 cv
123.765 13.8339 123.89 13.7533 123.971 13.5832 cv
124.047 13.4131 124.087 13.1221 124.087 12.7102 cv
124.929 12.7147 mo
124.929 13.2564 124.812 13.6728 124.579 13.9638 cv
124.347 14.2592 124.015 14.4025 123.586 14.4025 cv
123.156 14.4025 122.825 14.2592 122.592 13.9638 cv
122.359 13.6728 122.243 13.2564 122.243 12.7147 cv
122.243 12.1775 122.359 11.7611 122.592 11.4656 cv
122.825 11.1701 123.156 11.0224 123.586 11.0224 cv
124.015 11.0224 124.347 11.1701 124.579 11.4656 cv
124.812 11.7611 124.929 12.1775 124.929 12.7147 cv
f
127.203 12.7102 mo
127.203 12.3028 127.163 12.0163 127.087 11.8462 cv
127.01 11.6805 126.881 11.5955 126.702 11.5955 cv
126.523 11.5955 126.393 11.6805 126.317 11.8462 cv
126.236 12.0163 126.2 12.3028 126.2 12.7102 cv
126.2 13.1221 126.236 13.4131 126.317 13.5832 cv
126.393 13.7533 126.523 13.8339 126.702 13.8339 cv
126.881 13.8339 127.006 13.7533 127.087 13.5832 cv
127.163 13.4131 127.203 13.1221 127.203 12.7102 cv
128.045 12.7147 mo
128.045 13.2564 127.928 13.6728 127.695 13.9638 cv
127.463 14.2592 127.131 14.4025 126.702 14.4025 cv
126.272 14.4025 125.94 14.2592 125.708 13.9638 cv
125.475 13.6728 125.358 13.2564 125.358 12.7147 cv
125.358 12.1775 125.475 11.7611 125.708 11.4656 cv
125.94 11.1701 126.272 11.0224 126.702 11.0224 cv
127.131 11.0224 127.463 11.1701 127.695 11.4656 cv
127.928 11.7611 128.045 12.1775 128.045 12.7147 cv
f
130.319 12.7102 mo
130.319 12.3028 130.279 12.0163 130.203 11.8462 cv
130.126 11.6805 129.997 11.5955 129.818 11.5955 cv
129.638 11.5955 129.509 11.6805 129.433 11.8462 cv
129.352 12.0163 129.316 12.3028 129.316 12.7102 cv
129.316 13.1221 129.352 13.4131 129.433 13.5832 cv
129.509 13.7533 129.638 13.8339 129.818 13.8339 cv
129.997 13.8339 130.122 13.7533 130.203 13.5832 cv
130.279 13.4131 130.319 13.1221 130.319 12.7102 cv
131.161 12.7147 mo
131.161 13.2564 131.044 13.6728 130.811 13.9638 cv
130.579 14.2592 130.247 14.4025 129.818 14.4025 cv
129.388 14.4025 129.056 14.2592 128.824 13.9638 cv
128.591 13.6728 128.474 13.2564 128.474 12.7147 cv
128.474 12.1775 128.591 11.7611 128.824 11.4656 cv
129.056 11.1701 129.388 11.0224 129.818 11.0224 cv
130.247 11.0224 130.579 11.1701 130.811 11.4656 cv
131.044 11.7611 131.161 12.1775 131.161 12.7147 cv
f
119.175 29.212 mo
119.175 28.8046 119.134 28.518 119.058 28.3479 cv
118.982 28.1823 118.852 28.0972 118.673 28.0972 cv
118.494 28.0972 118.364 28.1823 118.288 28.3479 cv
118.208 28.518 118.172 28.8046 118.172 29.212 cv
118.172 29.6238 118.208 29.9148 118.288 30.085 cv
118.364 30.2551 118.494 30.3357 118.673 30.3357 cv
118.852 30.3357 118.978 30.2551 119.058 30.085 cv
119.134 29.9148 119.175 29.6238 119.175 29.212 cv
120.016 29.2164 mo
120.016 29.7581 119.9 30.1745 119.667 30.4655 cv
119.434 30.761 119.103 30.9042 118.673 30.9042 cv
118.243 30.9042 117.912 30.761 117.679 30.4655 cv
117.446 30.1745 117.33 29.7581 117.33 29.2164 cv
117.33 28.6792 117.446 28.2628 117.679 27.9674 cv
117.912 27.6719 118.243 27.5241 118.673 27.5241 cv
119.103 27.5241 119.434 27.6719 119.667 27.9674 cv
119.9 28.2628 120.016 28.6792 120.016 29.2164 cv
f
120.688 29.9999 mo
121.476 29.9999 li
121.476 30.846 li
120.688 30.846 li
120.688 29.9999 li
f
123.553 29.2343 mo
123.405 29.2343 123.293 29.2836 123.222 29.3776 cv
123.146 29.4761 123.11 29.6194 123.11 29.8074 cv
123.11 29.9999 123.146 30.1432 123.222 30.2372 cv
123.293 30.3357 123.405 30.3804 123.553 30.3804 cv
123.701 30.3804 123.813 30.3357 123.884 30.2372 cv
123.956 30.1432 123.996 29.9999 123.996 29.8074 cv
123.996 29.6194 123.956 29.4761 123.884 29.3776 cv
123.813 29.2836 123.701 29.2343 123.553 29.2343 cv
124.592 27.6674 mo
124.592 28.2718 li
124.453 28.2091 124.323 28.1599 124.202 28.1285 cv
124.077 28.0972 123.96 28.0793 123.844 28.0793 cv
123.593 28.0793 123.396 28.1509 123.258 28.2897 cv
123.114 28.4285 123.034 28.6344 123.011 28.9075 cv
123.105 28.8359 123.208 28.7822 123.325 28.7464 cv
123.437 28.7105 123.558 28.6926 123.692 28.6926 cv
124.023 28.6926 124.292 28.7911 124.498 28.9881 cv
124.704 29.1851 124.807 29.4403 124.807 29.7537 cv
124.807 30.1029 124.69 30.3849 124.462 30.5909 cv
124.234 30.8013 123.929 30.9042 123.544 30.9042 cv
123.119 30.9042 122.792 30.7655 122.559 30.4789 cv
122.326 30.1924 122.21 29.7895 122.21 29.2612 cv
122.21 28.724 122.344 28.2987 122.617 27.9897 cv
122.886 27.6853 123.262 27.5286 123.737 27.5286 cv
123.884 27.5286 124.028 27.5421 124.171 27.5644 cv
124.314 27.5868 124.453 27.6226 124.592 27.6674 cv
f
125.348 27.5823 mo
127.806 27.5823 li
127.806 28.0569 li
126.535 30.846 li
125.715 30.846 li
126.92 28.2002 li
125.348 28.2002 li
125.348 27.5823 li
f
128.639 27.5823 mo
130.73 27.5823 li
130.73 28.2002 li
129.31 28.2002 li
129.31 28.7061 li
129.503 28.6658 li
129.704 28.6523 li
130.103 28.6523 130.412 28.7553 130.636 28.9523 cv
130.855 29.1493 130.967 29.4269 130.967 29.7805 cv
130.967 30.1342 130.846 30.4118 130.604 30.6088 cv
130.363 30.8058 130.027 30.9042 129.601 30.9042 cv
129.413 30.9042 129.23 30.8863 129.051 30.8505 cv
128.867 30.8192 128.688 30.7655 128.509 30.6938 cv
128.509 30.0312 li
128.688 30.1342 128.854 30.2103 129.015 30.2596 cv
129.176 30.3133 129.324 30.3357 129.467 30.3357 cv
129.669 30.3357 129.83 30.2864 129.946 30.1879 cv
130.063 30.0894 130.125 29.9507 130.125 29.7805 cv
130.125 29.6104 130.063 29.4761 129.946 29.3776 cv
129.83 29.2791 129.669 29.2254 129.467 29.2254 cv
129.342 29.2254 129.212 29.2433 129.078 29.2746 cv
128.943 29.306 128.796 29.3552 128.639 29.4179 cv
128.639 27.5823 li
f
119.124 45.7137 mo
119.124 45.3063 119.084 45.0198 119.008 44.8497 cv
118.932 44.684 118.802 44.5989 118.623 44.5989 cv
118.444 44.5989 118.314 44.684 118.238 44.8497 cv
118.157 45.0198 118.121 45.3063 118.121 45.7137 cv
118.121 46.1256 118.157 46.4166 118.238 46.5867 cv
118.314 46.7568 118.444 46.8374 118.623 46.8374 cv
118.802 46.8374 118.927 46.7568 119.008 46.5867 cv
119.084 46.4166 119.124 46.1256 119.124 45.7137 cv
119.966 45.7182 mo
119.966 46.2599 119.849 46.6763 119.617 46.9673 cv
119.384 47.2627 119.052 47.406 118.623 47.406 cv
118.193 47.406 117.862 47.2627 117.629 46.9673 cv
117.396 46.6763 117.28 46.2599 117.28 45.7182 cv
117.28 45.1809 117.396 44.7646 117.629 44.4691 cv
117.862 44.1736 118.193 44.0259 118.623 44.0259 cv
119.052 44.0259 119.384 44.1736 119.617 44.4691 cv
119.849 44.7646 119.966 45.1809 119.966 45.7182 cv
1 /0 /CSD get_res sepcs
1 sep
f
120.637 46.5016 mo
121.425 46.5016 li
121.425 47.3478 li
120.637 47.3478 li
120.637 46.5016 li
f
123.941 45.7137 mo
123.941 45.3063 123.901 45.0198 123.825 44.8497 cv
123.749 44.684 123.619 44.5989 123.44 44.5989 cv
123.261 44.5989 123.131 44.684 123.055 44.8497 cv
122.974 45.0198 122.938 45.3063 122.938 45.7137 cv
122.938 46.1256 122.974 46.4166 123.055 46.5867 cv
123.131 46.7568 123.261 46.8374 123.44 46.8374 cv
123.619 46.8374 123.744 46.7568 123.825 46.5867 cv
123.901 46.4166 123.941 46.1256 123.941 45.7137 cv
124.783 45.7182 mo
124.783 46.2599 124.667 46.6763 124.434 46.9673 cv
124.201 47.2627 123.87 47.406 123.44 47.406 cv
123.01 47.406 122.679 47.2627 122.446 46.9673 cv
122.213 46.6763 122.097 46.2599 122.097 45.7182 cv
122.097 45.1809 122.213 44.7646 122.446 44.4691 cv
122.679 44.1736 123.01 44.0259 123.44 44.0259 cv
123.87 44.0259 124.201 44.1736 124.434 44.4691 cv
124.667 44.7646 124.783 45.1809 124.783 45.7182 cv
f
127.057 45.7137 mo
127.057 45.3063 127.017 45.0198 126.941 44.8497 cv
126.865 44.684 126.735 44.5989 126.556 44.5989 cv
126.377 44.5989 126.247 44.684 126.171 44.8497 cv
126.09 45.0198 126.054 45.3063 126.054 45.7137 cv
126.054 46.1256 126.09 46.4166 126.171 46.5867 cv
126.247 46.7568 126.377 46.8374 126.556 46.8374 cv
126.735 46.8374 126.86 46.7568 126.941 46.5867 cv
127.017 46.4166 127.057 46.1256 127.057 45.7137 cv
127.899 45.7182 mo
127.899 46.2599 127.783 46.6763 127.55 46.9673 cv
127.317 47.2627 126.986 47.406 126.556 47.406 cv
126.126 47.406 125.795 47.2627 125.562 46.9673 cv
125.329 46.6763 125.213 46.2599 125.213 45.7182 cv
125.213 45.1809 125.329 44.7646 125.562 44.4691 cv
125.795 44.1736 126.126 44.0259 126.556 44.0259 cv
126.986 44.0259 127.317 44.1736 127.55 44.4691 cv
127.783 44.7646 127.899 45.1809 127.899 45.7182 cv
f
130.173 45.7137 mo
130.173 45.3063 130.133 45.0198 130.057 44.8497 cv
129.981 44.684 129.851 44.5989 129.672 44.5989 cv
129.493 44.5989 129.363 44.684 129.287 44.8497 cv
129.206 45.0198 129.17 45.3063 129.17 45.7137 cv
129.17 46.1256 129.206 46.4166 129.287 46.5867 cv
129.363 46.7568 129.493 46.8374 129.672 46.8374 cv
129.851 46.8374 129.976 46.7568 130.057 46.5867 cv
130.133 46.4166 130.173 46.1256 130.173 45.7137 cv
131.015 45.7182 mo
131.015 46.2599 130.898 46.6763 130.666 46.9673 cv
130.433 47.2627 130.102 47.406 129.672 47.406 cv
129.242 47.406 128.911 47.2627 128.678 46.9673 cv
128.445 46.6763 128.329 46.2599 128.329 45.7182 cv
128.329 45.1809 128.445 44.7646 128.678 44.4691 cv
128.911 44.1736 129.242 44.0259 129.672 44.0259 cv
130.102 44.0259 130.433 44.1736 130.666 44.4691 cv
130.898 44.7646 131.015 45.1809 131.015 45.7182 cv
f
135.676 12.7102 mo
135.676 12.3028 135.636 12.0163 135.56 11.8462 cv
135.484 11.6805 135.354 11.5955 135.175 11.5955 cv
134.996 11.5955 134.866 11.6805 134.79 11.8462 cv
134.709 12.0163 134.674 12.3028 134.674 12.7102 cv
134.674 13.1221 134.709 13.4131 134.79 13.5832 cv
134.866 13.7533 134.996 13.8339 135.175 13.8339 cv
135.354 13.8339 135.479 13.7533 135.56 13.5832 cv
135.636 13.4131 135.676 13.1221 135.676 12.7102 cv
136.518 12.7147 mo
136.518 13.2564 136.402 13.6728 136.169 13.9638 cv
135.936 14.2592 135.605 14.4025 135.175 14.4025 cv
134.745 14.4025 134.414 14.2592 134.181 13.9638 cv
133.948 13.6728 133.832 13.2564 133.832 12.7147 cv
133.832 12.1775 133.948 11.7611 134.181 11.4656 cv
134.414 11.1701 134.745 11.0224 135.175 11.0224 cv
135.605 11.0224 135.936 11.1701 136.169 11.4656 cv
136.402 11.7611 136.518 12.1775 136.518 12.7147 cv
1 /0 /CSD get_res sepcs
0 sep
f
137.19 13.4982 mo
137.977 13.4982 li
137.977 14.3443 li
137.19 14.3443 li
137.19 13.4982 li
f
140.055 12.7326 mo
139.907 12.7326 139.795 12.7818 139.724 12.8759 cv
139.647 12.9744 139.612 13.1176 139.612 13.3057 cv
139.612 13.4982 139.647 13.6414 139.724 13.7354 cv
139.795 13.8339 139.907 13.8787 140.055 13.8787 cv
140.203 13.8787 140.314 13.8339 140.386 13.7354 cv
140.458 13.6414 140.498 13.4982 140.498 13.3057 cv
140.498 13.1176 140.458 12.9744 140.386 12.8759 cv
140.314 12.7818 140.203 12.7326 140.055 12.7326 cv
141.093 11.1657 mo
141.093 11.7701 li
140.955 11.7074 140.825 11.6581 140.704 11.6268 cv
140.579 11.5955 140.462 11.5775 140.346 11.5775 cv
140.095 11.5775 139.898 11.6492 139.759 11.788 cv
139.616 11.9267 139.535 12.1327 139.513 12.4058 cv
139.607 12.3342 139.71 12.2804 139.826 12.2446 cv
139.938 12.2088 140.059 12.1909 140.194 12.1909 cv
140.525 12.1909 140.794 12.2894 140.999 12.4864 cv
141.205 12.6834 141.308 12.9385 141.308 13.2519 cv
141.308 13.6011 141.192 13.8832 140.964 14.0891 cv
140.735 14.2995 140.431 14.4025 140.046 14.4025 cv
139.621 14.4025 139.294 14.2637 139.061 13.9772 cv
138.828 13.6907 138.712 13.2877 138.712 12.7595 cv
138.712 12.2222 138.846 11.7969 139.119 11.488 cv
139.388 11.1836 139.764 11.0269 140.238 11.0269 cv
140.386 11.0269 140.529 11.0403 140.673 11.0627 cv
140.816 11.0851 140.955 11.1209 141.093 11.1657 cv
f
141.85 11.0806 mo
144.308 11.0806 li
144.308 11.5552 li
143.036 14.3443 li
142.217 14.3443 li
143.421 11.6984 li
141.85 11.6984 li
141.85 11.0806 li
f
145.141 11.0806 mo
147.231 11.0806 li
147.231 11.6984 li
145.812 11.6984 li
145.812 12.2043 li
146.005 12.164 li
146.206 12.1506 li
146.605 12.1506 146.914 12.2536 147.137 12.4506 cv
147.357 12.6475 147.469 12.9251 147.469 13.2788 cv
147.469 13.6325 147.348 13.91 147.106 14.107 cv
146.864 14.304 146.529 14.4025 146.103 14.4025 cv
145.915 14.4025 145.732 14.3846 145.553 14.3488 cv
145.369 14.3174 145.19 14.2637 145.011 14.1921 cv
145.011 13.5295 li
145.19 13.6325 145.356 13.7086 145.517 13.7578 cv
145.678 13.8115 145.826 13.8339 145.969 13.8339 cv
146.17 13.8339 146.332 13.7847 146.448 13.6862 cv
146.564 13.5877 146.627 13.4489 146.627 13.2788 cv
146.627 13.1087 146.564 12.9744 146.448 12.8759 cv
146.332 12.7774 146.17 12.7236 145.969 12.7236 cv
145.844 12.7236 145.714 12.7416 145.579 12.7729 cv
145.445 12.8042 145.297 12.8535 145.141 12.9162 cv
145.141 11.0806 li
f
134.236 30.264 mo
134.979 30.264 li
134.979 28.1554 li
134.218 28.3121 li
134.218 27.739 li
134.975 27.5823 li
135.776 27.5823 li
135.776 30.264 li
136.519 30.264 li
136.519 30.846 li
134.236 30.846 li
134.236 30.264 li
f
137.285 29.9999 mo
138.073 29.9999 li
138.073 30.846 li
137.285 30.846 li
137.285 29.9999 li
f
140.589 29.212 mo
140.589 28.8046 140.548 28.518 140.472 28.3479 cv
140.396 28.1823 140.266 28.0972 140.087 28.0972 cv
139.908 28.0972 139.778 28.1823 139.702 28.3479 cv
139.622 28.518 139.586 28.8046 139.586 29.212 cv
139.586 29.6238 139.622 29.9148 139.702 30.085 cv
139.778 30.2551 139.908 30.3357 140.087 30.3357 cv
140.266 30.3357 140.392 30.2551 140.472 30.085 cv
140.548 29.9148 140.589 29.6238 140.589 29.212 cv
141.43 29.2164 mo
141.43 29.7581 141.314 30.1745 141.081 30.4655 cv
140.848 30.761 140.517 30.9042 140.087 30.9042 cv
139.658 30.9042 139.326 30.761 139.093 30.4655 cv
138.861 30.1745 138.744 29.7581 138.744 29.2164 cv
138.744 28.6792 138.861 28.2628 139.093 27.9674 cv
139.326 27.6719 139.658 27.5241 140.087 27.5241 cv
140.517 27.5241 140.848 27.6719 141.081 27.9674 cv
141.314 28.2628 141.43 28.6792 141.43 29.2164 cv
f
143.705 29.212 mo
143.705 28.8046 143.664 28.518 143.588 28.3479 cv
143.512 28.1823 143.382 28.0972 143.203 28.0972 cv
143.024 28.0972 142.894 28.1823 142.818 28.3479 cv
142.738 28.518 142.702 28.8046 142.702 29.212 cv
142.702 29.6238 142.738 29.9148 142.818 30.085 cv
142.894 30.2551 143.024 30.3357 143.203 30.3357 cv
143.382 30.3357 143.508 30.2551 143.588 30.085 cv
143.664 29.9148 143.705 29.6238 143.705 29.212 cv
144.546 29.2164 mo
144.546 29.7581 144.43 30.1745 144.197 30.4655 cv
143.964 30.761 143.633 30.9042 143.203 30.9042 cv
142.774 30.9042 142.442 30.761 142.209 30.4655 cv
141.977 30.1745 141.86 29.7581 141.86 29.2164 cv
141.86 28.6792 141.977 28.2628 142.209 27.9674 cv
142.442 27.6719 142.774 27.5241 143.203 27.5241 cv
143.633 27.5241 143.964 27.6719 144.197 27.9674 cv
144.43 28.2628 144.546 28.6792 144.546 29.2164 cv
f
146.821 29.212 mo
146.821 28.8046 146.78 28.518 146.704 28.3479 cv
146.628 28.1823 146.498 28.0972 146.319 28.0972 cv
146.14 28.0972 146.01 28.1823 145.934 28.3479 cv
145.854 28.518 145.818 28.8046 145.818 29.212 cv
145.818 29.6238 145.854 29.9148 145.934 30.085 cv
146.01 30.2551 146.14 30.3357 146.319 30.3357 cv
146.498 30.3357 146.624 30.2551 146.704 30.085 cv
146.78 29.9148 146.821 29.6238 146.821 29.212 cv
147.662 29.2164 mo
147.662 29.7581 147.546 30.1745 147.313 30.4655 cv
147.08 30.761 146.749 30.9042 146.319 30.9042 cv
145.889 30.9042 145.558 30.761 145.325 30.4655 cv
145.093 30.1745 144.976 29.7581 144.976 29.2164 cv
144.976 28.6792 145.093 28.2628 145.325 27.9674 cv
145.558 27.6719 145.889 27.5241 146.319 27.5241 cv
146.749 27.5241 147.08 27.6719 147.313 27.9674 cv
147.546 28.2628 147.662 28.6792 147.662 29.2164 cv
f
135.676 45.7137 mo
135.676 45.3063 135.636 45.0198 135.56 44.8497 cv
135.484 44.684 135.354 44.5989 135.175 44.5989 cv
134.996 44.5989 134.866 44.684 134.79 44.8497 cv
134.709 45.0198 134.674 45.3063 134.674 45.7137 cv
134.674 46.1256 134.709 46.4166 134.79 46.5867 cv
134.866 46.7568 134.996 46.8374 135.175 46.8374 cv
135.354 46.8374 135.479 46.7568 135.56 46.5867 cv
135.636 46.4166 135.676 46.1256 135.676 45.7137 cv
136.518 45.7182 mo
136.518 46.2599 136.402 46.6763 136.169 46.9673 cv
135.936 47.2627 135.605 47.406 135.175 47.406 cv
134.745 47.406 134.414 47.2627 134.181 46.9673 cv
133.948 46.6763 133.832 46.2599 133.832 45.7182 cv
133.832 45.1809 133.948 44.7646 134.181 44.4691 cv
134.414 44.1736 134.745 44.0259 135.175 44.0259 cv
135.605 44.0259 135.936 44.1736 136.169 44.4691 cv
136.402 44.7646 136.518 45.1809 136.518 45.7182 cv
f
137.19 46.5016 mo
137.977 46.5016 li
137.977 47.3478 li
137.19 47.3478 li
137.19 46.5016 li
f
140.055 45.7361 mo
139.907 45.7361 139.795 45.7853 139.724 45.8793 cv
139.647 45.9778 139.612 46.1211 139.612 46.3091 cv
139.612 46.5016 139.647 46.6449 139.724 46.7389 cv
139.795 46.8374 139.907 46.8822 140.055 46.8822 cv
140.203 46.8822 140.314 46.8374 140.386 46.7389 cv
140.458 46.6449 140.498 46.5016 140.498 46.3091 cv
140.498 46.1211 140.458 45.9778 140.386 45.8793 cv
140.314 45.7853 140.203 45.7361 140.055 45.7361 cv
141.093 44.1692 mo
141.093 44.7735 li
140.955 44.7109 140.825 44.6616 140.704 44.6303 cv
140.579 44.5989 140.462 44.581 140.346 44.581 cv
140.095 44.581 139.898 44.6527 139.759 44.7915 cv
139.616 44.9302 139.535 45.1362 139.513 45.4093 cv
139.607 45.3376 139.71 45.2839 139.826 45.2481 cv
139.938 45.2123 140.059 45.1944 140.194 45.1944 cv
140.525 45.1944 140.794 45.2929 140.999 45.4899 cv
141.205 45.6868 141.308 45.942 141.308 46.2554 cv
141.308 46.6046 141.192 46.8867 140.964 47.0926 cv
140.735 47.303 140.431 47.406 140.046 47.406 cv
139.621 47.406 139.294 47.2672 139.061 46.9807 cv
138.828 46.6942 138.712 46.2912 138.712 45.763 cv
138.712 45.2257 138.846 44.8004 139.119 44.4915 cv
139.388 44.1871 139.764 44.0304 140.238 44.0304 cv
140.386 44.0304 140.529 44.0438 140.673 44.0662 cv
140.816 44.0886 140.955 44.1244 141.093 44.1692 cv
f
141.85 44.0841 mo
144.308 44.0841 li
144.308 44.5586 li
143.036 47.3478 li
142.217 47.3478 li
143.421 44.7019 li
141.85 44.7019 li
141.85 44.0841 li
f
145.141 44.0841 mo
147.231 44.0841 li
147.231 44.7019 li
145.812 44.7019 li
145.812 45.2078 li
146.005 45.1675 li
146.206 45.1541 li
146.605 45.1541 146.914 45.2571 147.137 45.454 cv
147.357 45.651 147.469 45.9286 147.469 46.2823 cv
147.469 46.636 147.348 46.9135 147.106 47.1105 cv
146.864 47.3075 146.529 47.406 146.103 47.406 cv
145.915 47.406 145.732 47.3881 145.553 47.3523 cv
145.369 47.3209 145.19 47.2672 145.011 47.1956 cv
145.011 46.533 li
145.19 46.636 145.356 46.7121 145.517 46.7613 cv
145.678 46.815 145.826 46.8374 145.969 46.8374 cv
146.17 46.8374 146.332 46.7882 146.448 46.6897 cv
146.564 46.5912 146.627 46.4524 146.627 46.2823 cv
146.627 46.1122 146.564 45.9778 146.448 45.8793 cv
146.332 45.7809 146.17 45.7271 145.969 45.7271 cv
145.844 45.7271 145.714 45.745 145.579 45.7764 cv
145.445 45.8077 145.297 45.857 145.141 45.9196 cv
145.141 44.0841 li
f
152.128 12.7102 mo
152.128 12.3028 152.087 12.0163 152.011 11.8462 cv
151.935 11.6805 151.805 11.5955 151.626 11.5955 cv
151.447 11.5955 151.317 11.6805 151.241 11.8462 cv
151.161 12.0163 151.125 12.3028 151.125 12.7102 cv
151.125 13.1221 151.161 13.4131 151.241 13.5832 cv
151.317 13.7533 151.447 13.8339 151.626 13.8339 cv
151.805 13.8339 151.931 13.7533 152.011 13.5832 cv
152.087 13.4131 152.128 13.1221 152.128 12.7102 cv
152.969 12.7147 mo
152.969 13.2564 152.853 13.6728 152.62 13.9638 cv
152.387 14.2592 152.056 14.4025 151.626 14.4025 cv
151.196 14.4025 150.865 14.2592 150.632 13.9638 cv
150.399 13.6728 150.283 13.2564 150.283 12.7147 cv
150.283 12.1775 150.399 11.7611 150.632 11.4656 cv
150.865 11.1701 151.196 11.0224 151.626 11.0224 cv
152.056 11.0224 152.387 11.1701 152.62 11.4656 cv
152.853 11.7611 152.969 12.1775 152.969 12.7147 cv
1 /0 /CSD get_res sepcs
1 sep
f
153.641 13.4982 mo
154.429 13.4982 li
154.429 14.3443 li
153.641 14.3443 li
153.641 13.4982 li
f
156.945 12.7102 mo
156.945 12.3028 156.904 12.0163 156.828 11.8462 cv
156.752 11.6805 156.622 11.5955 156.443 11.5955 cv
156.264 11.5955 156.134 11.6805 156.058 11.8462 cv
155.978 12.0163 155.942 12.3028 155.942 12.7102 cv
155.942 13.1221 155.978 13.4131 156.058 13.5832 cv
156.134 13.7533 156.264 13.8339 156.443 13.8339 cv
156.622 13.8339 156.748 13.7533 156.828 13.5832 cv
156.904 13.4131 156.945 13.1221 156.945 12.7102 cv
157.786 12.7147 mo
157.786 13.2564 157.67 13.6728 157.437 13.9638 cv
157.204 14.2592 156.873 14.4025 156.443 14.4025 cv
156.014 14.4025 155.682 14.2592 155.449 13.9638 cv
155.217 13.6728 155.1 13.2564 155.1 12.7147 cv
155.1 12.1775 155.217 11.7611 155.449 11.4656 cv
155.682 11.1701 156.014 11.0224 156.443 11.0224 cv
156.873 11.0224 157.204 11.1701 157.437 11.4656 cv
157.67 11.7611 157.786 12.1775 157.786 12.7147 cv
f
160.061 12.7102 mo
160.061 12.3028 160.02 12.0163 159.944 11.8462 cv
159.868 11.6805 159.738 11.5955 159.559 11.5955 cv
159.38 11.5955 159.25 11.6805 159.174 11.8462 cv
159.094 12.0163 159.058 12.3028 159.058 12.7102 cv
159.058 13.1221 159.094 13.4131 159.174 13.5832 cv
159.25 13.7533 159.38 13.8339 159.559 13.8339 cv
159.738 13.8339 159.864 13.7533 159.944 13.5832 cv
160.02 13.4131 160.061 13.1221 160.061 12.7102 cv
160.902 12.7147 mo
160.902 13.2564 160.786 13.6728 160.553 13.9638 cv
160.32 14.2592 159.989 14.4025 159.559 14.4025 cv
159.13 14.4025 158.798 14.2592 158.565 13.9638 cv
158.333 13.6728 158.216 13.2564 158.216 12.7147 cv
158.216 12.1775 158.333 11.7611 158.565 11.4656 cv
158.798 11.1701 159.13 11.0224 159.559 11.0224 cv
159.989 11.0224 160.32 11.1701 160.553 11.4656 cv
160.786 11.7611 160.902 12.1775 160.902 12.7147 cv
f
163.177 12.7102 mo
163.177 12.3028 163.136 12.0163 163.06 11.8462 cv
162.984 11.6805 162.854 11.5955 162.675 11.5955 cv
162.496 11.5955 162.366 11.6805 162.29 11.8462 cv
162.21 12.0163 162.174 12.3028 162.174 12.7102 cv
162.174 13.1221 162.21 13.4131 162.29 13.5832 cv
162.366 13.7533 162.496 13.8339 162.675 13.8339 cv
162.854 13.8339 162.98 13.7533 163.06 13.5832 cv
163.136 13.4131 163.177 13.1221 163.177 12.7102 cv
164.018 12.7147 mo
164.018 13.2564 163.902 13.6728 163.669 13.9638 cv
163.436 14.2592 163.105 14.4025 162.675 14.4025 cv
162.245 14.4025 161.914 14.2592 161.681 13.9638 cv
161.449 13.6728 161.332 13.2564 161.332 12.7147 cv
161.332 12.1775 161.449 11.7611 161.681 11.4656 cv
161.914 11.1701 162.245 11.0224 162.675 11.0224 cv
163.105 11.0224 163.436 11.1701 163.669 11.4656 cv
163.902 11.7611 164.018 12.1775 164.018 12.7147 cv
f
152.178 29.212 mo
152.178 28.8046 152.138 28.518 152.062 28.3479 cv
151.986 28.1823 151.856 28.0972 151.677 28.0972 cv
151.498 28.0972 151.368 28.1823 151.292 28.3479 cv
151.211 28.518 151.175 28.8046 151.175 29.212 cv
151.175 29.6238 151.211 29.9148 151.292 30.085 cv
151.368 30.2551 151.498 30.3357 151.677 30.3357 cv
151.856 30.3357 151.981 30.2551 152.062 30.085 cv
152.138 29.9148 152.178 29.6238 152.178 29.212 cv
153.02 29.2164 mo
153.02 29.7581 152.903 30.1745 152.671 30.4655 cv
152.438 30.761 152.106 30.9042 151.677 30.9042 cv
151.247 30.9042 150.916 30.761 150.683 30.4655 cv
150.45 30.1745 150.334 29.7581 150.334 29.2164 cv
150.334 28.6792 150.45 28.2628 150.683 27.9674 cv
150.916 27.6719 151.247 27.5241 151.677 27.5241 cv
152.106 27.5241 152.438 27.6719 152.671 27.9674 cv
152.903 28.2628 153.02 28.6792 153.02 29.2164 cv
1 /0 /CSD get_res sepcs
0 sep
f
153.691 29.9999 mo
154.479 29.9999 li
154.479 30.846 li
153.691 30.846 li
153.691 29.9999 li
f
156.557 29.2343 mo
156.409 29.2343 156.297 29.2836 156.225 29.3776 cv
156.149 29.4761 156.113 29.6194 156.113 29.8074 cv
156.113 29.9999 156.149 30.1432 156.225 30.2372 cv
156.297 30.3357 156.409 30.3804 156.557 30.3804 cv
156.704 30.3804 156.816 30.3357 156.888 30.2372 cv
156.96 30.1432 157 29.9999 157 29.8074 cv
157 29.6194 156.96 29.4761 156.888 29.3776 cv
156.816 29.2836 156.704 29.2343 156.557 29.2343 cv
157.595 27.6674 mo
157.595 28.2718 li
157.456 28.2091 157.327 28.1599 157.206 28.1285 cv
157.08 28.0972 156.964 28.0793 156.848 28.0793 cv
156.597 28.0793 156.4 28.1509 156.261 28.2897 cv
156.118 28.4285 156.037 28.6344 156.015 28.9075 cv
156.109 28.8359 156.212 28.7822 156.328 28.7464 cv
156.44 28.7105 156.561 28.6926 156.695 28.6926 cv
157.027 28.6926 157.295 28.7911 157.501 28.9881 cv
157.707 29.1851 157.81 29.4403 157.81 29.7537 cv
157.81 30.1029 157.694 30.3849 157.465 30.5909 cv
157.237 30.8013 156.933 30.9042 156.548 30.9042 cv
156.122 30.9042 155.795 30.7655 155.563 30.4789 cv
155.33 30.1924 155.213 29.7895 155.213 29.2612 cv
155.213 28.724 155.348 28.2987 155.621 27.9897 cv
155.89 27.6853 156.266 27.5286 156.74 27.5286 cv
156.888 27.5286 157.031 27.5421 157.174 27.5644 cv
157.318 27.5868 157.456 27.6226 157.595 27.6674 cv
f
158.352 27.5823 mo
160.81 27.5823 li
160.81 28.0569 li
159.538 30.846 li
158.719 30.846 li
159.923 28.2002 li
158.352 28.2002 li
158.352 27.5823 li
f
161.642 27.5823 mo
163.733 27.5823 li
163.733 28.2002 li
162.314 28.2002 li
162.314 28.7061 li
162.506 28.6658 li
162.708 28.6523 li
163.106 28.6523 163.415 28.7553 163.639 28.9523 cv
163.858 29.1493 163.97 29.4269 163.97 29.7805 cv
163.97 30.1342 163.85 30.4118 163.608 30.6088 cv
163.366 30.8058 163.03 30.9042 162.605 30.9042 cv
162.417 30.9042 162.233 30.8863 162.054 30.8505 cv
161.871 30.8192 161.692 30.7655 161.513 30.6938 cv
161.513 30.0312 li
161.692 30.1342 161.857 30.2103 162.018 30.2596 cv
162.18 30.3133 162.327 30.3357 162.471 30.3357 cv
162.672 30.3357 162.833 30.2864 162.95 30.1879 cv
163.066 30.0894 163.129 29.9507 163.129 29.7805 cv
163.129 29.6104 163.066 29.4761 162.95 29.3776 cv
162.833 29.2791 162.672 29.2254 162.471 29.2254 cv
162.345 29.2254 162.215 29.2433 162.081 29.2746 cv
161.947 29.306 161.799 29.3552 161.642 29.4179 cv
161.642 27.5823 li
f
150.738 46.7658 mo
151.481 46.7658 li
151.481 44.6571 li
150.72 44.8138 li
150.72 44.2408 li
151.476 44.0841 li
152.278 44.0841 li
152.278 46.7658 li
153.021 46.7658 li
153.021 47.3478 li
150.738 47.3478 li
150.738 46.7658 li
f
153.787 46.5016 mo
154.574 46.5016 li
154.574 47.3478 li
153.787 47.3478 li
153.787 46.5016 li
f
157.091 45.7137 mo
157.091 45.3063 157.05 45.0198 156.974 44.8497 cv
156.898 44.684 156.768 44.5989 156.589 44.5989 cv
156.41 44.5989 156.28 44.684 156.204 44.8497 cv
156.124 45.0198 156.088 45.3063 156.088 45.7137 cv
156.088 46.1256 156.124 46.4166 156.204 46.5867 cv
156.28 46.7568 156.41 46.8374 156.589 46.8374 cv
156.768 46.8374 156.894 46.7568 156.974 46.5867 cv
157.05 46.4166 157.091 46.1256 157.091 45.7137 cv
157.932 45.7182 mo
157.932 46.2599 157.816 46.6763 157.583 46.9673 cv
157.35 47.2627 157.019 47.406 156.589 47.406 cv
156.159 47.406 155.828 47.2627 155.595 46.9673 cv
155.362 46.6763 155.246 46.2599 155.246 45.7182 cv
155.246 45.1809 155.362 44.7646 155.595 44.4691 cv
155.828 44.1736 156.159 44.0259 156.589 44.0259 cv
157.019 44.0259 157.35 44.1736 157.583 44.4691 cv
157.816 44.7646 157.932 45.1809 157.932 45.7182 cv
f
160.206 45.7137 mo
160.206 45.3063 160.166 45.0198 160.09 44.8497 cv
160.014 44.684 159.884 44.5989 159.705 44.5989 cv
159.526 44.5989 159.396 44.684 159.32 44.8497 cv
159.239 45.0198 159.204 45.3063 159.204 45.7137 cv
159.204 46.1256 159.239 46.4166 159.32 46.5867 cv
159.396 46.7568 159.526 46.8374 159.705 46.8374 cv
159.884 46.8374 160.009 46.7568 160.09 46.5867 cv
160.166 46.4166 160.206 46.1256 160.206 45.7137 cv
161.048 45.7182 mo
161.048 46.2599 160.932 46.6763 160.699 46.9673 cv
160.466 47.2627 160.135 47.406 159.705 47.406 cv
159.275 47.406 158.944 47.2627 158.711 46.9673 cv
158.478 46.6763 158.362 46.2599 158.362 45.7182 cv
158.362 45.1809 158.478 44.7646 158.711 44.4691 cv
158.944 44.1736 159.275 44.0259 159.705 44.0259 cv
160.135 44.0259 160.466 44.1736 160.699 44.4691 cv
160.932 44.7646 161.048 45.1809 161.048 45.7182 cv
f
163.322 45.7137 mo
163.322 45.3063 163.282 45.0198 163.206 44.8497 cv
163.13 44.684 163 44.5989 162.821 44.5989 cv
162.642 44.5989 162.512 44.684 162.436 44.8497 cv
162.355 45.0198 162.32 45.3063 162.32 45.7137 cv
162.32 46.1256 162.355 46.4166 162.436 46.5867 cv
162.512 46.7568 162.642 46.8374 162.821 46.8374 cv
163 46.8374 163.125 46.7568 163.206 46.5867 cv
163.282 46.4166 163.322 46.1256 163.322 45.7137 cv
164.164 45.7182 mo
164.164 46.2599 164.048 46.6763 163.815 46.9673 cv
163.582 47.2627 163.251 47.406 162.821 47.406 cv
162.391 47.406 162.06 47.2627 161.827 46.9673 cv
161.594 46.6763 161.478 46.2599 161.478 45.7182 cv
161.478 45.1809 161.594 44.7646 161.827 44.4691 cv
162.06 44.1736 162.391 44.0259 162.821 44.0259 cv
163.251 44.0259 163.582 44.1736 163.815 44.4691 cv
164.048 44.7646 164.164 45.1809 164.164 45.7182 cv
f
grestore
1 /0 /CSD get_res sepcs
1 sep
DVZBWK+CMSS9*1 [8.9664 0 0 -8.9664 0 0 ]msf
167.142 24.512 mo
(Integration:)
[2.57338 4.76025 3.32738 4.09587 4.60783 3.14815 4.42766 3.32738 2.20041 4.60785 4.76025 0 
]xsh
true set_gvm
%ADOBeginSubsetFont: DLYAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
DVZBWJ+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7A73DC501F4900507988D419B48DDAD77641F5B7B7A0610
F725F249F9EF901FABA150F5DFDF3368527C74C6E805BDBD5282C0C7160670EC
94102CE3399959A838F779795ACA3B9153D7D64C1E5390455DA9733A521E3252
4900C9F4B7B6A6150799E5B7DB8A4C7CD8F7D3D8A02FBF85F82D7D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DVZBWJ+CMSS10 /Encoding get
dup 50 /two put
pop
%ADOEndSubsetFont
reset_gvm
/DVZBWJ+CMSS10*1 
[46{/.notdef}rp /period /.notdef /zero /.notdef /two /.notdef /four 
/five 202{/.notdef}rp]
DVZBWJ+CMSS10 nf
DVZBWJ+CMSS10*1 [9.9626 0 0 -9.9626 0 0 ]msf
177.993 36.467 mo
(2.422)
[4.98129 2.76764 4.98129 4.98131 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
true set_gvm
/DVZBWJ+CMSS10*1 uf
/DVZBWJ+CMSS10 uf
/DLYAAA+CMSS10 uf
reset_gvm
true set_gvm
/DVZBWL+CMSSBX10*1 uf
/DVZBWL+CMSSBX10 uf
/RUQAAA+CMSSBX10 uf
reset_gvm
true set_gvm
/DVZBWK+CMSS9*1 uf
/DVZBWK+CMSS9 uf
/HRABAA+CMSS9 uf
reset_gvm
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF

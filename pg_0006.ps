%!PS-Adobe-3.1
%ADO_DSC_Encoding: MacOS Roman
%%Title: pg_0006.pdf
%%Creator: Adobe Acrobat 9.5.3
%%For: varoquau
%%CreationDate: 03/26/2013, 02:17:05 PM
%%BoundingBox: 0 0 206 55
%%HiResBoundingBox: 0 0 205.5510 54.7520
%%CropBox: 0 0 205.5510 54.7520
%%LanguageLevel: 3
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq{pop}{setblackgeneration}ifelse
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq{pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1086 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-13:18:53        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
   xmp:CreateDate="2013-03-26T14:16:40+01:00"
   xmp:CreatorTool="LaTeX with hyperref package"
   xmp:ModifyDate="2013-03-26T14:16:40+01:00"
   pdf:Keywords=""
   pdf:Producer="pdfTeX-1.40.10"
   pdf:Trapped="False"
   pdfx:PTEX.Fullbanner="This is pdfTeX, Version 3.1415926-1.40.10-2.2 (TeX Live 2009/Debian) kpathsea version 5.0.0">
   <dc:creator>
    <rdf:Seq>
     <rdf:li/>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[{Catalog} {Doc_Metadata} /Metadata pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
<</PageSize [205.551 54.752 ] >> setpagedevice
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_CoolType_Core/ps get exec
true set_gvm
%ADOBeginSubsetFont: NNOAAA+CMSS10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /NNOAAA+CMSS10 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMSS10.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
def
/UniqueID 5000803 def
/FontBBox {-61 -250 999 759} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 444 461 656 678 694 716] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [61] def
/StdVW [78] def
/StemSnapH [61 64] def
/StemSnapV [78 89] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
1 dict dup begin
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/DVZBWM+CMSS10 /NNOAAA+CMSS10 findfont ct_VMDictPut
true set_gvm
%ADOBeginSubsetFont: BILAAA+CMSS9 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /BILAAA+CMSS9 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMSS9.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
def
/UniqueID 5000802 def
/FontBBox {-63 -250 1027 760} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 444 461 654 676 694 716] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [65] def
/StdVW [83] def
/StemSnapH [59 65] def
/StemSnapV [83 96] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
1 dict dup begin
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/DVZBWN+CMSS9 /BILAAA+CMSS9 findfont ct_VMDictPut
true set_gvm
%ADOBeginSubsetFont: EJIAAA+CMSSBX10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /EJIAAA+CMSSBX10 def
/FontInfo 7 dict dup begin
/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMSSBX10.) def
/Weight (Bold) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
def
/UniqueID 5000806 def
/FontBBox {-71 -250 1099 780} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 458 475 694 716] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [94] def
/StdVW [136] def
/StemSnapV [136 147] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
1 dict dup begin
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/DVZBWO+CMSSBX10 /EJIAAA+CMSSBX10 findfont ct_VMDictPut
Adobe_CoolType_Core/pt get exec
%%EndPageSetup
1 -1 scale 0 -54.752 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 54.752 li
205.551 54.752 li
205.551 0 li
cp
clp
[1 0 0 1 0 0 ]ct
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
true set_gvm
%ADOBeginSubsetFont: BILAAA+CMSS9 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
DVZBWN+CMSS9 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/colon <1C60D8A8C9B84FD8F93E5F23AFB84246DF387AC64A604ACFE36EB4D3
B5594946709A14F3F4E650797544> |-
/I <1C60D8A8C9B84D354550AB29F718F07EFECE901D91DA2EBA5CE3D1CB6F88
32C2> |-
/a <1C60D8A8C9B7AED803479F895DA89BF438A70F4D938F70F88AFE598D8DCD
1BBCE9E9D31D9175A51DFFEDD8A2C70DF73CF1E97D9112E6FCEB30D323DF9271
C09BEBACA122C4540EEC5BAA0CE6E43BDB7DF5EABEB58478FFB7B831604F32B4
F37C06E56C287AAFC0280501BB5F456AA075375DCCDB49> |-
/e <1C60D8A8C9B7734FF4F3E7BCFFCA91142C500836475C15153CDEB67E3341
C7113C8B03714F55D507852A634CC6832FE3434DAE2663213689ACE5CBF1D306
3602E0B80ED8AC41E4D7C67BF0556E9BF0AB4EAEA19214ACE875619A16CB50EA
A488E53D8EB1294A53> |-
/g <1C60D8A8C9B7BA8F197A6FEAD04E4EBE020858FD9A2AE2212A7934BD763B
1C284D6F3818549BB1540E5D147A5D9E9B5146CA52C4E2FCC4EE0F897F74AD15
D5D3674134111EF16E631D9FC7EA4524AEDFC7045EA9F043D424BBA812813434
6DA10406E6D8A684E5951C4E0F0197D00CA5CD8AA212F6BBAB7F1633E1DCEC03
8EDCFB0AED6F7AB8ACE76D1537E74D405ACABBEF51F0609CC1698CFA9AD6B3B2
47612EFD82E6A9D63753EA1D17FD008BCBE9EF1580BFF6EA6D38440942548742
D6B14D55B2E77B5612F7DD96A16A6C84D0249E0D16> |-
/i <1C60D8A8C9B8771BA79D8DB9F9EE0A4208D462A21ADA22C31E5A313B44F5
978919BD86FEABF204AD7F22BC680B874F> |-
/n <1C60D8A8C9B7890D0A580A77B2A7F7929C41CEB27320B88CE01DDC6128B9
BF6672F7D9F98E1FC3DE1FDA8B931E7B06A676C6F78E88B1886E3136EF1B4C47
80C114A32887A7> |-
/o <1C60D8A8C9B7BA8F6239473DA895CD1FAF335134AA807927EDBA1BEE8425
1487C4489D20164DAF3E0B9CC603EE659C11E7441DE3D33A7102EFF55FBFB4AE
1FFED5BB37F51218AA9AB4FB4D0F5EDEC617E969330EE86D24CDA3> |-
/r <1C60D8A8C9B80D901E94CB86B8B3E12150550D207388EBAB1332FEE5526D
056A37B1648E01D31C0FA10222A74188D39B160B> |-
/t <1C60D8A8C9B728C5DDD80236056327E47BCB94B39696D919F2D8F10EE972
39AD96FE625B778F4CE59148E11D79BC4292565F1B5DBE62BEDC2B5F1BE0CA36
105094A13EB4A688B7928C87BB9C4EAEFEA172> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DVZBWN+CMSS9 /Encoding get
dup 58 /colon put
dup 73 /I put
dup 97 /a put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 116 /t put
pop
%ADOEndSubsetFont
reset_gvm
/DVZBWN+CMSS9*1 
[58{/.notdef}rp /colon 14{/.notdef}rp /I 23{/.notdef}rp /a 3{/.notdef}rp /e 
/.notdef /g /.notdef /i 4{/.notdef}rp /n /o 2{/.notdef}rp 
/r /.notdef /t 139{/.notdef}rp]
DVZBWN+CMSS9 nf
DVZBWN+CMSS9*1 [7.62144 0 0 -7.62144 0 0 ]msf
.66 24.045 mo
(Integration:)
[2.18737 4.04621 2.82827 3.48149 3.91666 2.67592 3.7635 2.82827 1.87035 3.91666 4.04622 0 
]xsh
true set_gvm
%ADOBeginSubsetFont: NNOAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
DVZBWM+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B8574464859E074121EF25E578E57727A0111D8F02> |-
/zero <1C60D8A8C9B7A73D3B44BE74C368F4E2FC0D1E282D6B80C084CC069A0
A14712591F89EABDE27294D1768DD69DB23E7FDCDF76DD01EA2CE0CCF6F4531C
8A5BCAB0F1BE07F8191DEC09C9A3BC8F2BD2C623D1D6E463DE09FAA97A87D431
A34F6930759E9BEDE1196203F9A0CFDDAE3BE022EED71EB4AA4845FF1759BB73
5B5433870BF2F7C4D6B648D9C9DDAA0B7F47B27B9132A> |-
/four <1C60D8A8C9B7A73DC573E0FDE3AD73FEE82F9F14DB3F0AB3BE38D56A8
122A7A5F8B6ED2296ABF48856509B4E6DEF566772A914D1A13C3C012A3EDA96B
E7B991608A6C22F61F497C6E362> |-
/five <1C60D8A8C9B7A73D3B44BE743C0D26AD679F5F93FC6E985F4FDB089B8
726C660FA9B5F57D310BE08C36ED05112B17AD96AEB48FF2FC2898E2D336EBE9
EAD56A8D07216507E5146B1B78A220C1E81864951416BE98FD5933A8730B6A85
BD795303C655D884BCE53> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DVZBWM+CMSS10 /Encoding get
dup 46 /period put
dup 48 /zero put
dup 52 /four put
dup 53 /five put
pop
%ADOEndSubsetFont
reset_gvm
/DVZBWM+CMSS10*1 
[46{/.notdef}rp /period /.notdef /zero 3{/.notdef}rp /four /five 202{/.notdef}rp]
DVZBWM+CMSS10 nf
DVZBWM+CMSS10*1 [8.46821 0 0 -8.46821 0 0 ]msf
9.883 36 mo
(0.554)
[4.23411 2.35248 4.2341 4.2341 0 ]xsh
gsave
38.985 54.237 mo
92.7085 54.237 li
92.7085 .513452 li
38.985 .513452 li
38.985 54.237 li
clp
38.985 54.237 mo
92.7085 54.237 li
92.7085 .513452 li
38.985 .513452 li
38.985 54.237 li
1 /0 /CSD get_res sepcs
0 sep
f
42.9067 53.9684 mo
92.4119 53.9684 li
92.4119 4.46315 li
42.9067 4.46315 li
42.9067 53.9684 li
f
gsave
42.9067 53.9684 mo
92.4119 53.9684 li
92.4119 4.46315 li
42.9067 4.46315 li
42.9067 53.9684 li
clp
92.4119 53.9684 mo
42.9067 53.9684 li
42.9067 4.46315 li
92.4119 4.46315 li
92.4119 53.9684 li
gsave
/1 
[/DeviceCMYK] /CSA add_res
/1 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 54.752 ]ct
[49.7838 0 0 49.7838 42.7276 .604537 ]ct
snap_to_device
<<
/T 1
/W 278 
/H 278 
/M[278 0 0 -278 0 278 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"-MZ#)i/&Aq?5^P85"l+E$H8Z'iHpginA+Jd?PchEW%YP6p)Gqs\U7We64NS^$7h)ni82eGH::Y+`h
):?]m20rb%FRs%&hO"o24B\F<AjeRRf'&)2dERk4H=KEdo43j;QkA.:=edof6oRomk`$J-c'(#2@n(S3
A<#H5&`#QPUGldQ2c&#gN>^-gP;RYr7We64NS^$7h)ni82eGH::Y+`h):?]m20rb%FRs%&hO"o24B\F<
AjeRRf'&)2dERk4H=KEdo43j;QkA.:=edof6oRomk`$J-c'(#2@n(S3A<#H5&`#QPUGldQ2c&#gN>^-g
P;RYr7We64NS^$7h)ni82eGH::Y+`h):?]m20rb%FRs%&hO"o24B\F<AjeRRf'&)2dERk4H=KEdo43j;
QkA.:=edof6oRomk`$J-c'(#2@n(S3A<#H5&`#QPUGldQ2c&#gN>^-gP;RYr7We64NS^$7h)ni82eGH:
:Y+`h):?]m20rb%FRs%&hO"o24B\F<AjeRRf'&)2dERk4H=KEdo43j;QkA.:=edof6oRomk`$J-c'(#2
@n(S3A<#H5&`#QPUGldQ2c&#gN>^-gP;RYr7We64NS^$7h)ni82eGH::Y+`h):?]m20rb%FRs%&hO"o2
4B\F<AjeRRf'&)2dERk4H=KEdo43j;QkA.:=edof6oRomk`$J-c'(#2@n(S3A<#H5&`#QPUGldQ2c&#g
N>^-gP;RYr7We64NS^$7h)ni82eGH::Y+`h):?]m20rb%FRs%&hO"o24B\F<AjeRRf'&)2dERk4H=KEd
o43j;QkA.:=edof6oRomk`$J-c'(7#rG+lEo43j;QkA.:=edof6oRomk`$J-c'(#2@n(S3A<#H5&`#QP
UGldQ2c&#gN>^-gP;RYr7We64NS^$7h)ni82eGH::Y+`h):?]m20rb%FRs%&hO"o24B\F<AjeRRf'&)2
dERk4H=KEdo43j;QkA.:=edof6oRomk`$J-c'(#2@n(S3A<#H5&`#QPUGldQ2c&#gN>^-gP;RYr7We64
NS^$7h)ni82eGH::Y+`h):?]m20rb%FRs%&hO"o24B\F<AjeRRf'&)2dERk4H=KEdo43j;QkA.:=edof
6oRomk`$J-c'(#2@n(S3A<#H5&`#QPUGldQ2c&#gN>^-gP;RYr7We64NS^$7h)ni82eGH::Y+`h):?]m
20rb%FRs%&hO"o24B\F<AjeRRf'&)2dERk4H=KEdo43j;QkA.:=edof6oRomk`$J-c'(#2@n(S3A<#H5
&`#QPUGldQ2c&#gN>^-gP;RYr7We64NS^$7h)ni82eGH::Y+`h):?]m20rb%FRs%&hO"o24B\F<AjeRR
f'&)2dERk4H=KEdo43j;QkA.:=edof6oRomk`$J-c'(#2@n(S3A<#H5&`#QPUGldQ2c&#gN>^-gP;RYr
7We64NS^$7h)ni82eGH::Y+`h):?]m20rb%FRs%&hO"o24B\F<AjeRRf'&)2dERk4H=KEdo43j;QkA.:
=edof6oRomk`$J-c'(#2@n(S3A<#H5&`#QPUGldQ2c&#gN>^-gP;RYr7We64NS^$7h)ni82eGH::Y+`h
):?]m4:hC+2K\EK!kgB/\p&1GhO+i/41RWFb_GPV>bH:Q6ha>.co\S-HRBWnS_;B'P7.$.D!9`t"aXf>
FRS8l]e^V=GB/8kR17t6\NoW-L@1U;TQb!8pJ*?f40tW--Pu!;g!IEr$hV_\khaDbH=o-Xn)OP`1E3oL
Ee3)8%Ga+V5jupOm[[UUG@j5::+jmTZ_;^n([.FCd(PVNoZh::hT5qIB/Xl#j9!"N)nL66J_le(h)i/4
n'$OSSQqh3Ajc;f0$l\dTmJ.'kagDR]orirc>;_$aT[!'2K\EK!kgB/\p&1GhO+i/41RWFb_GPV>bH:Q
6ha>.co\S-HRBWnS_;B'P7.$.D!9`t"aXf>FRS8l]e^V=GB/8kR17t6\NoW-L@1U;TQb!8pJ*?f40tW-
-Pu!;g!IEr$hV_\khaDbH=o-Xn)OP`1E3oLEe3)8%Ga+V5jupOm[[UUG@j5::+jmTZ_;^n([.FCd(PVN
oZh::hT5qIB/Xl#j9!"N)nL66J_le(h)i/4n'$OSSQqh3Ajc;f0$l\dTmJ.'kagDR]orirc>;_$aT[!'
2K\EK!kgB/\p&1GhO+i/41RWFb_GPV>bH:Q6ha>.co\S-HRBWnS_;B'P7.$.D!9`t"aXf>FRS8l]e^V=
GB/8kR17t6\NoW-L@1U;TQb!8pJ*?f40tW--Pu!;g!IEr$hV_\khaDbH=o-Xn)OP`1E3oLEe3)8%Ga+V
5jupOm[[UUG@j5::+jmTZ_;^n([.FCd(PVNoZh::hT5qIB/Xl#j9!"N)nL66J_le(h)i/4n'$OSSQqh3
B(J4eb%/X`~>

%%EndBinary
grestore
np
grestore
51.1576 4.46315 mo
51.1576 4.46315 li
1 /0 /CSD get_res sepcs
1 sep
f
.12436 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
51.1576 4.46315 mo
51.1576 4.46315 li
@
51.3927 2.30476 mo
51.2271 2.30476 51.1017 2.3361 51.0211 2.38982 cv
50.9405 2.44355 50.9002 2.52413 50.9002 2.63158 cv
50.9002 2.73007 50.9316 2.81066 50.9987 2.86438 cv
51.0659 2.92258 51.1599 2.94944 51.2763 2.94944 cv
51.4241 2.94944 51.5494 2.9002 51.6479 2.79275 cv
51.7464 2.6853 51.8001 2.55547 51.8001 2.3943 cv
51.8001 2.30476 li
51.3927 2.30476 li
52.5881 2.00928 mo
52.5881 3.40609 li
51.8001 3.40609 li
51.8001 3.04346 li
51.6927 3.19568 51.5763 3.30312 51.4464 3.3658 cv
51.3121 3.42848 51.1554 3.46429 50.9674 3.46429 cv
50.7122 3.46429 50.5063 3.39266 50.3496 3.24492 cv
50.1884 3.10166 50.1123 2.90915 50.1123 2.67187 cv
50.1123 2.38535 50.2108 2.17493 50.4078 2.04062 cv
50.6048 1.90631 50.9137 1.83916 51.339 1.83916 cv
51.8001 1.83916 li
51.8001 1.77648 li
51.8001 1.6556 51.7509 1.56606 51.6524 1.50786 cv
51.5539 1.44966 51.4017 1.41832 51.1957 1.41832 cv
51.0256 1.41832 50.8689 1.43623 50.7256 1.47205 cv
50.5824 1.50786 50.4481 1.55711 50.3272 1.61979 cv
50.3272 1.02435 li
50.4928 .984058 50.6585 .952719 50.8286 .930334 cv
50.9987 .912426 51.1689 .898996 51.339 .898996 cv
51.7777 .898996 52.0956 .988535 52.2926 1.16314 cv
52.4896 1.33774 52.5881 1.61979 52.5881 2.00928 cv
f
67.6593 4.46315 mo
67.6593 4.46315 li
f
67.6593 4.46315 mo
67.6593 4.46315 li
@
68.0246 2.9002 mo
68.1903 2.9002 68.3156 2.842 68.4052 2.71664 cv
68.4947 2.59576 68.5395 2.41669 68.5395 2.18388 cv
68.5395 1.95108 68.4947 1.77648 68.4052 1.65112 cv
68.3156 1.53025 68.1903 1.46757 68.0246 1.46757 cv
67.8545 1.46757 67.7291 1.53025 67.6396 1.65112 cv
67.5501 1.77648 67.5053 1.95108 67.5053 2.18388 cv
67.5053 2.41669 67.5501 2.59576 67.6396 2.71664 cv
67.7291 2.842 67.8545 2.9002 68.0246 2.9002 cv
67.5053 1.31535 mo
67.6127 1.17209 67.7291 1.06912 67.8634 1.00197 cv
67.9933 .934811 68.1455 .898996 68.3156 .898996 cv
68.6156 .898996 68.8618 1.01987 69.0588 1.26163 cv
69.2513 1.50339 69.3498 1.80782 69.3498 2.18388 cv
69.3498 2.56442 69.2513 2.87334 69.0588 3.11061 cv
68.8618 3.34789 68.6156 3.46429 68.3156 3.46429 cv
68.1455 3.46429 67.9933 3.42848 67.8634 3.3658 cv
67.7291 3.30312 67.6127 3.19568 67.5053 3.05241 cv
67.5053 3.40609 li
66.7218 3.40609 li
66.7218 .00360346 li
67.5053 .00360346 li
67.5053 1.31535 li
f
84.1611 4.46315 mo
84.1611 4.46315 li
f
84.161 4.46315 mo
84.161 4.46315 li
@
85.4356 1.0333 mo
85.4356 1.67351 li
85.3281 1.60188 85.2207 1.54815 85.1132 1.51234 cv
85.0058 1.47652 84.8938 1.45862 84.7819 1.45862 cv
84.5625 1.45862 84.3924 1.52577 84.2715 1.65112 cv
84.1462 1.77648 84.088 1.95556 84.088 2.18388 cv
84.088 2.41669 84.1462 2.59576 84.2715 2.72112 cv
84.3924 2.84647 84.5625 2.90915 84.7819 2.90915 cv
84.9028 2.90915 85.0192 2.89124 85.1311 2.85543 cv
85.2386 2.81961 85.3415 2.76589 85.4356 2.69426 cv
85.4356 3.33446 li
85.3102 3.37923 85.1848 3.41057 85.0595 3.43296 cv
84.9341 3.45086 84.8088 3.46429 84.6834 3.46429 cv
84.2402 3.46429 83.8955 3.35237 83.6448 3.12852 cv
83.3941 2.90467 83.2732 2.58681 83.2732 2.18388 cv
83.2732 1.78096 83.3941 1.46757 83.6448 1.23924 cv
83.8955 1.0154 84.2402 .898996 84.6834 .898996 cv
84.8088 .898996 84.9341 .912426 85.0595 .934811 cv
85.1848 .957196 85.3102 .988535 85.4356 1.0333 cv
f
42.9067 12.714 mo
42.9067 12.714 li
f
42.9067 12.714 mo
42.9067 12.714 li
@
92.4119 12.714 mo
92.4119 12.714 li
f
92.4119 12.714 mo
92.4119 12.714 li
@
40.9092 12.8349 mo
40.7435 12.8349 40.6182 12.8663 40.5376 12.92 cv
40.457 12.9737 40.4167 13.0543 40.4167 13.1617 cv
40.4167 13.2602 40.4481 13.3408 40.5152 13.3945 cv
40.5824 13.4527 40.6764 13.4796 40.7928 13.4796 cv
40.9405 13.4796 41.0659 13.4304 41.1644 13.3229 cv
41.2629 13.2155 41.3166 13.0856 41.3166 12.9245 cv
41.3166 12.8349 li
40.9092 12.8349 li
42.1045 12.5394 mo
42.1045 13.9362 li
41.3166 13.9362 li
41.3166 13.5736 li
41.2091 13.7258 41.0927 13.8333 40.9629 13.896 cv
40.8286 13.9586 40.6719 13.9944 40.4839 13.9944 cv
40.2287 13.9944 40.0228 13.9228 39.8661 13.7751 cv
39.7049 13.6318 39.6288 13.4393 39.6288 13.202 cv
39.6288 12.9155 39.7273 12.7051 39.9243 12.5708 cv
40.1212 12.4365 40.4302 12.3693 40.8555 12.3693 cv
41.3166 12.3693 li
41.3166 12.3066 li
41.3166 12.1858 41.2673 12.0962 41.1689 12.038 cv
41.0704 11.9798 40.9181 11.9485 40.7122 11.9485 cv
40.5421 11.9485 40.3854 11.9664 40.2421 12.0022 cv
40.0989 12.038 39.9646 12.0873 39.8437 12.1499 cv
39.8437 11.5545 li
40.0093 11.5142 40.175 11.4829 40.3451 11.4605 cv
40.5152 11.4426 40.6853 11.4292 40.8555 11.4292 cv
41.2942 11.4292 41.6121 11.5187 41.8091 11.6933 cv
42.006 11.8679 42.1045 12.1499 42.1045 12.5394 cv
f
42.9067 29.2158 mo
42.9067 29.2158 li
f
42.9067 29.2158 mo
42.9067 29.2158 li
@
92.4119 29.2158 mo
92.4119 29.2158 li
f
92.4119 29.2158 mo
92.4119 29.2158 li
@
40.9636 30.379 mo
41.1292 30.379 41.2546 30.3208 41.3441 30.1955 cv
41.4337 30.0746 41.4784 29.8955 41.4784 29.6627 cv
41.4784 29.4299 41.4337 29.2553 41.3441 29.1299 cv
41.2546 29.0091 41.1292 28.9464 40.9636 28.9464 cv
40.7934 28.9464 40.6681 29.0091 40.5786 29.1299 cv
40.489 29.2553 40.4442 29.4299 40.4442 29.6627 cv
40.4442 29.8955 40.489 30.0746 40.5786 30.1955 cv
40.6681 30.3208 40.7934 30.379 40.9636 30.379 cv
40.4442 28.7942 mo
40.5517 28.6509 40.6681 28.5479 40.8024 28.4808 cv
40.9322 28.4136 41.0844 28.3778 41.2546 28.3778 cv
41.5545 28.3778 41.8008 28.4987 41.9977 28.7404 cv
42.1903 28.9822 42.2887 29.2866 42.2887 29.6627 cv
42.2887 30.0432 42.1903 30.3522 41.9977 30.5894 cv
41.8008 30.8267 41.5545 30.9431 41.2546 30.9431 cv
41.0844 30.9431 40.9322 30.9073 40.8024 30.8446 cv
40.6681 30.7819 40.5517 30.6745 40.4442 30.5312 cv
40.4442 30.8849 li
39.6608 30.8849 li
39.6608 27.4824 li
40.4442 27.4824 li
40.4442 28.7942 li
f
42.9067 45.7175 mo
42.9067 45.7175 li
f
42.9067 45.7175 mo
42.9067 45.7175 li
@
92.4119 45.7175 mo
92.4119 45.7175 li
f
92.4119 45.7175 mo
92.4119 45.7175 li
@
42.1059 44.5669 mo
42.1059 45.2072 li
41.9985 45.1355 41.891 45.0818 41.7836 45.046 cv
41.6762 45.0102 41.5642 44.9923 41.4523 44.9923 cv
41.2329 44.9923 41.0628 45.0594 40.9419 45.1848 cv
40.8166 45.3101 40.7584 45.4892 40.7584 45.7175 cv
40.7584 45.9503 40.8166 46.1294 40.9419 46.2548 cv
41.0628 46.3801 41.2329 46.4428 41.4523 46.4428 cv
41.5732 46.4428 41.6896 46.4249 41.8015 46.3891 cv
41.909 46.3533 42.0119 46.2995 42.1059 46.2279 cv
42.1059 46.8681 li
41.9806 46.9129 41.8552 46.9442 41.7299 46.9666 cv
41.6045 46.9845 41.4792 46.9979 41.3538 46.9979 cv
40.9106 46.9979 40.5659 46.886 40.3152 46.6622 cv
40.0644 46.4383 39.9436 46.1205 39.9436 45.7175 cv
39.9436 45.3146 40.0644 45.0012 40.3152 44.7729 cv
40.5659 44.549 40.9106 44.4326 41.3538 44.4326 cv
41.4792 44.4326 41.6045 44.4461 41.7299 44.4685 cv
41.8552 44.4908 41.9806 44.5222 42.1059 44.5669 cv
f
.24872 lw
2 lc
42.9067 4.46315 mo
92.4119 4.46315 li
@
92.4119 53.9684 mo
92.4119 4.46315 li
@
42.9067 53.9684 mo
92.4119 53.9684 li
@
42.9067 53.9684 mo
42.9067 4.46315 li
@
44.9562 13.7623 mo
45.6994 13.7623 li
45.6994 11.6537 li
44.9383 11.8103 li
44.9383 11.2373 li
45.6949 11.0806 li
46.4963 11.0806 li
46.4963 13.7623 li
47.2395 13.7623 li
47.2395 14.3443 li
44.9562 14.3443 li
44.9562 13.7623 li
1 /0 /CSD get_res sepcs
0 sep
f
48.005 13.4982 mo
48.793 13.4982 li
48.793 14.3443 li
48.005 14.3443 li
48.005 13.4982 li
f
51.309 12.7102 mo
51.309 12.3028 51.2687 12.0163 51.1926 11.8462 cv
51.1165 11.6805 50.9867 11.5955 50.8076 11.5955 cv
50.6285 11.5955 50.4987 11.6805 50.4226 11.8462 cv
50.342 12.0163 50.3062 12.3028 50.3062 12.7102 cv
50.3062 13.1221 50.342 13.4131 50.4226 13.5832 cv
50.4987 13.7533 50.6285 13.8339 50.8076 13.8339 cv
50.9867 13.8339 51.1121 13.7533 51.1926 13.5832 cv
51.2687 13.4131 51.309 13.1221 51.309 12.7102 cv
52.1507 12.7147 mo
52.1507 13.2564 52.0343 13.6728 51.8015 13.9638 cv
51.5687 14.2592 51.2374 14.4025 50.8076 14.4025 cv
50.3778 14.4025 50.0465 14.2592 49.8137 13.9638 cv
49.5809 13.6728 49.4645 13.2564 49.4645 12.7147 cv
49.4645 12.1775 49.5809 11.7611 49.8137 11.4656 cv
50.0465 11.1701 50.3778 11.0224 50.8076 11.0224 cv
51.2374 11.0224 51.5687 11.1701 51.8015 11.4656 cv
52.0343 11.7611 52.1507 12.1775 52.1507 12.7147 cv
f
54.425 12.7102 mo
54.425 12.3028 54.3847 12.0163 54.3086 11.8462 cv
54.2325 11.6805 54.1027 11.5955 53.9236 11.5955 cv
53.7445 11.5955 53.6147 11.6805 53.5386 11.8462 cv
53.458 12.0163 53.4222 12.3028 53.4222 12.7102 cv
53.4222 13.1221 53.458 13.4131 53.5386 13.5832 cv
53.6147 13.7533 53.7445 13.8339 53.9236 13.8339 cv
54.1027 13.8339 54.228 13.7533 54.3086 13.5832 cv
54.3847 13.4131 54.425 13.1221 54.425 12.7102 cv
55.2667 12.7147 mo
55.2667 13.2564 55.1503 13.6728 54.9175 13.9638 cv
54.6847 14.2592 54.3534 14.4025 53.9236 14.4025 cv
53.4938 14.4025 53.1625 14.2592 52.9297 13.9638 cv
52.6969 13.6728 52.5805 13.2564 52.5805 12.7147 cv
52.5805 12.1775 52.6969 11.7611 52.9297 11.4656 cv
53.1625 11.1701 53.4938 11.0224 53.9236 11.0224 cv
54.3534 11.0224 54.6847 11.1701 54.9175 11.4656 cv
55.1503 11.7611 55.2667 12.1775 55.2667 12.7147 cv
f
57.541 12.7102 mo
57.541 12.3028 57.5007 12.0163 57.4246 11.8462 cv
57.3484 11.6805 57.2186 11.5955 57.0395 11.5955 cv
56.8605 11.5955 56.7306 11.6805 56.6545 11.8462 cv
56.5739 12.0163 56.5381 12.3028 56.5381 12.7102 cv
56.5381 13.1221 56.5739 13.4131 56.6545 13.5832 cv
56.7306 13.7533 56.8605 13.8339 57.0395 13.8339 cv
57.2186 13.8339 57.344 13.7533 57.4246 13.5832 cv
57.5007 13.4131 57.541 13.1221 57.541 12.7102 cv
58.3826 12.7147 mo
58.3826 13.2564 58.2662 13.6728 58.0334 13.9638 cv
57.8006 14.2592 57.4693 14.4025 57.0395 14.4025 cv
56.6097 14.4025 56.2785 14.2592 56.0457 13.9638 cv
55.8129 13.6728 55.6964 13.2564 55.6964 12.7147 cv
55.6964 12.1775 55.8129 11.7611 56.0457 11.4656 cv
56.2785 11.1701 56.6097 11.0224 57.0395 11.0224 cv
57.4693 11.0224 57.8006 11.1701 58.0334 11.4656 cv
58.2662 11.7611 58.3826 12.1775 58.3826 12.7147 cv
f
46.3461 29.212 mo
46.3461 28.8046 46.3058 28.518 46.2297 28.3479 cv
46.1536 28.1823 46.0237 28.0972 45.8447 28.0972 cv
45.6656 28.0972 45.5357 28.1823 45.4596 28.3479 cv
45.3791 28.518 45.3432 28.8046 45.3432 29.212 cv
45.3432 29.6238 45.3791 29.9148 45.4596 30.085 cv
45.5357 30.2551 45.6656 30.3357 45.8447 30.3357 cv
46.0237 30.3357 46.1491 30.2551 46.2297 30.085 cv
46.3058 29.9148 46.3461 29.6238 46.3461 29.212 cv
47.1877 29.2164 mo
47.1877 29.7581 47.0713 30.1745 46.8385 30.4655 cv
46.6057 30.761 46.2744 30.9042 45.8447 30.9042 cv
45.4149 30.9042 45.0836 30.761 44.8508 30.4655 cv
44.618 30.1745 44.5016 29.7581 44.5016 29.2164 cv
44.5016 28.6792 44.618 28.2628 44.8508 27.9674 cv
45.0836 27.6719 45.4149 27.5241 45.8447 27.5241 cv
46.2744 27.5241 46.6057 27.6719 46.8385 27.9674 cv
47.0713 28.2628 47.1877 28.6792 47.1877 29.2164 cv
1 /0 /CSD get_res sepcs
1 sep
f
47.8593 29.9999 mo
48.6472 29.9999 li
48.6472 30.846 li
47.8593 30.846 li
47.8593 29.9999 li
f
50.7514 28.2763 mo
49.8292 29.6417 li
50.7514 29.6417 li
50.7514 28.2763 li
50.6126 27.5823 mo
51.5483 27.5823 li
51.5483 29.6417 li
52.0139 29.6417 li
52.0139 30.2506 li
51.5483 30.2506 li
51.5483 30.846 li
50.7514 30.846 li
50.7514 30.2506 li
49.3054 30.2506 li
49.3054 29.5298 li
50.6126 27.5823 li
f
52.6944 27.5823 mo
54.7852 27.5823 li
54.7852 28.2002 li
53.366 28.2002 li
53.366 28.7061 li
53.5585 28.6658 li
53.7599 28.6523 li
54.1584 28.6523 54.4673 28.7553 54.6911 28.9523 cv
54.9105 29.1493 55.0224 29.4269 55.0224 29.7805 cv
55.0224 30.1342 54.9016 30.4118 54.6598 30.6088 cv
54.4181 30.8058 54.0823 30.9042 53.657 30.9042 cv
53.4689 30.9042 53.2854 30.8863 53.1063 30.8505 cv
52.9227 30.8192 52.7437 30.7655 52.5646 30.6938 cv
52.5646 30.0312 li
52.7437 30.1342 52.9093 30.2103 53.0705 30.2596 cv
53.2317 30.3133 53.3794 30.3357 53.5227 30.3357 cv
53.7241 30.3357 53.8853 30.2864 54.0017 30.1879 cv
54.1181 30.0894 54.1808 29.9507 54.1808 29.7805 cv
54.1808 29.6104 54.1181 29.4761 54.0017 29.3776 cv
53.8853 29.2791 53.7241 29.2254 53.5227 29.2254 cv
53.3973 29.2254 53.2675 29.2433 53.1332 29.2746 cv
52.9989 29.306 52.8511 29.3552 52.6944 29.4179 cv
52.6944 27.5823 li
f
57.3952 29.212 mo
57.3952 28.8046 57.3549 28.518 57.2788 28.3479 cv
57.2027 28.1823 57.0729 28.0972 56.8938 28.0972 cv
56.7147 28.0972 56.5849 28.1823 56.5088 28.3479 cv
56.4282 28.518 56.3924 28.8046 56.3924 29.212 cv
56.3924 29.6238 56.4282 29.9148 56.5088 30.085 cv
56.5849 30.2551 56.7147 30.3357 56.8938 30.3357 cv
57.0729 30.3357 57.1982 30.2551 57.2788 30.085 cv
57.3549 29.9148 57.3952 29.6238 57.3952 29.212 cv
58.2369 29.2164 mo
58.2369 29.7581 58.1205 30.1745 57.8877 30.4655 cv
57.6549 30.761 57.3236 30.9042 56.8938 30.9042 cv
56.464 30.9042 56.1327 30.761 55.8999 30.4655 cv
55.6671 30.1745 55.5507 29.7581 55.5507 29.2164 cv
55.5507 28.6792 55.6671 28.2628 55.8999 27.9674 cv
56.1327 27.6719 56.464 27.5241 56.8938 27.5241 cv
57.3236 27.5241 57.6549 27.6719 57.8877 27.9674 cv
58.1205 28.2628 58.2369 28.6792 58.2369 29.2164 cv
f
46.3461 45.7137 mo
46.3461 45.3063 46.3058 45.0198 46.2297 44.8497 cv
46.1536 44.684 46.0237 44.5989 45.8447 44.5989 cv
45.6656 44.5989 45.5357 44.684 45.4596 44.8497 cv
45.3791 45.0198 45.3432 45.3063 45.3432 45.7137 cv
45.3432 46.1256 45.3791 46.4166 45.4596 46.5867 cv
45.5357 46.7568 45.6656 46.8374 45.8447 46.8374 cv
46.0237 46.8374 46.1491 46.7568 46.2297 46.5867 cv
46.3058 46.4166 46.3461 46.1256 46.3461 45.7137 cv
47.1877 45.7182 mo
47.1877 46.2599 47.0713 46.6763 46.8385 46.9673 cv
46.6057 47.2627 46.2744 47.406 45.8447 47.406 cv
45.4149 47.406 45.0836 47.2627 44.8508 46.9673 cv
44.618 46.6763 44.5016 46.2599 44.5016 45.7182 cv
44.5016 45.1809 44.618 44.7646 44.8508 44.4691 cv
45.0836 44.1736 45.4149 44.0259 45.8447 44.0259 cv
46.2744 44.0259 46.6057 44.1736 46.8385 44.4691 cv
47.0713 44.7646 47.1877 45.1809 47.1877 45.7182 cv
f
47.8593 46.5016 mo
48.6472 46.5016 li
48.6472 47.3478 li
47.8593 47.3478 li
47.8593 46.5016 li
f
50.7514 44.778 mo
49.8292 46.1435 li
50.7514 46.1435 li
50.7514 44.778 li
50.6126 44.0841 mo
51.5483 44.0841 li
51.5483 46.1435 li
52.0139 46.1435 li
52.0139 46.7524 li
51.5483 46.7524 li
51.5483 47.3478 li
50.7514 47.3478 li
50.7514 46.7524 li
49.3054 46.7524 li
49.3054 46.0316 li
50.6126 44.0841 li
f
52.6944 44.0841 mo
54.7852 44.0841 li
54.7852 44.7019 li
53.366 44.7019 li
53.366 45.2078 li
53.5585 45.1675 li
53.7599 45.1541 li
54.1584 45.1541 54.4673 45.2571 54.6911 45.454 cv
54.9105 45.651 55.0224 45.9286 55.0224 46.2823 cv
55.0224 46.636 54.9016 46.9135 54.6598 47.1105 cv
54.4181 47.3075 54.0823 47.406 53.657 47.406 cv
53.4689 47.406 53.2854 47.3881 53.1063 47.3523 cv
52.9227 47.3209 52.7437 47.2672 52.5646 47.1956 cv
52.5646 46.533 li
52.7437 46.636 52.9093 46.7121 53.0705 46.7613 cv
53.2317 46.815 53.3794 46.8374 53.5227 46.8374 cv
53.7241 46.8374 53.8853 46.7882 54.0017 46.6897 cv
54.1181 46.5912 54.1808 46.4524 54.1808 46.2823 cv
54.1808 46.1122 54.1181 45.9778 54.0017 45.8793 cv
53.8853 45.7809 53.7241 45.7271 53.5227 45.7271 cv
53.3973 45.7271 53.2675 45.745 53.1332 45.7764 cv
52.9989 45.8077 52.8511 45.857 52.6944 45.9196 cv
52.6944 44.0841 li
f
57.3952 45.7137 mo
57.3952 45.3063 57.3549 45.0198 57.2788 44.8497 cv
57.2027 44.684 57.0729 44.5989 56.8938 44.5989 cv
56.7147 44.5989 56.5849 44.684 56.5088 44.8497 cv
56.4282 45.0198 56.3924 45.3063 56.3924 45.7137 cv
56.3924 46.1256 56.4282 46.4166 56.5088 46.5867 cv
56.5849 46.7568 56.7147 46.8374 56.8938 46.8374 cv
57.0729 46.8374 57.1982 46.7568 57.2788 46.5867 cv
57.3549 46.4166 57.3952 46.1256 57.3952 45.7137 cv
58.2369 45.7182 mo
58.2369 46.2599 58.1205 46.6763 57.8877 46.9673 cv
57.6549 47.2627 57.3236 47.406 56.8938 47.406 cv
56.464 47.406 56.1327 47.2627 55.8999 46.9673 cv
55.6671 46.6763 55.5507 46.2599 55.5507 45.7182 cv
55.5507 45.1809 55.6671 44.7646 55.8999 44.4691 cv
56.1327 44.1736 56.464 44.0259 56.8938 44.0259 cv
57.3236 44.0259 57.6549 44.1736 57.8877 44.4691 cv
58.1205 44.7646 58.2369 45.1809 58.2369 45.7182 cv
f
62.8478 12.7102 mo
62.8478 12.3028 62.8075 12.0163 62.7314 11.8462 cv
62.6553 11.6805 62.5255 11.5955 62.3464 11.5955 cv
62.1673 11.5955 62.0375 11.6805 61.9614 11.8462 cv
61.8808 12.0163 61.845 12.3028 61.845 12.7102 cv
61.845 13.1221 61.8808 13.4131 61.9614 13.5832 cv
62.0375 13.7533 62.1673 13.8339 62.3464 13.8339 cv
62.5255 13.8339 62.6508 13.7533 62.7314 13.5832 cv
62.8075 13.4131 62.8478 13.1221 62.8478 12.7102 cv
63.6895 12.7147 mo
63.6895 13.2564 63.5731 13.6728 63.3403 13.9638 cv
63.1075 14.2592 62.7762 14.4025 62.3464 14.4025 cv
61.9166 14.4025 61.5853 14.2592 61.3525 13.9638 cv
61.1197 13.6728 61.0033 13.2564 61.0033 12.7147 cv
61.0033 12.1775 61.1197 11.7611 61.3525 11.4656 cv
61.5853 11.1701 61.9166 11.0224 62.3464 11.0224 cv
62.7762 11.0224 63.1075 11.1701 63.3403 11.4656 cv
63.5731 11.7611 63.6895 12.1775 63.6895 12.7147 cv
f
64.361 13.4982 mo
65.149 13.4982 li
65.149 14.3443 li
64.361 14.3443 li
64.361 13.4982 li
f
67.2532 11.7745 mo
66.3309 13.14 li
67.2532 13.14 li
67.2532 11.7745 li
67.1144 11.0806 mo
68.0501 11.0806 li
68.0501 13.14 li
68.5157 13.14 li
68.5157 13.7489 li
68.0501 13.7489 li
68.0501 14.3443 li
67.2532 14.3443 li
67.2532 13.7489 li
65.8071 13.7489 li
65.8071 13.0281 li
67.1144 11.0806 li
f
69.1962 11.0806 mo
71.2869 11.0806 li
71.2869 11.6984 li
69.8677 11.6984 li
69.8677 12.2043 li
70.0602 12.164 li
70.2617 12.1506 li
70.6601 12.1506 70.969 12.2536 71.1929 12.4506 cv
71.4123 12.6475 71.5242 12.9251 71.5242 13.2788 cv
71.5242 13.6325 71.4033 13.91 71.1615 14.107 cv
70.9198 14.304 70.584 14.4025 70.1587 14.4025 cv
69.9707 14.4025 69.7871 14.3846 69.608 14.3488 cv
69.4245 14.3174 69.2454 14.2637 69.0663 14.1921 cv
69.0663 13.5295 li
69.2454 13.6325 69.4111 13.7086 69.5722 13.7578 cv
69.7334 13.8115 69.8811 13.8339 70.0244 13.8339 cv
70.2259 13.8339 70.387 13.7847 70.5034 13.6862 cv
70.6198 13.5877 70.6825 13.4489 70.6825 13.2788 cv
70.6825 13.1087 70.6198 12.9744 70.5034 12.8759 cv
70.387 12.7774 70.2259 12.7236 70.0244 12.7236 cv
69.899 12.7236 69.7692 12.7416 69.6349 12.7729 cv
69.5006 12.8042 69.3529 12.8535 69.1962 12.9162 cv
69.1962 11.0806 li
f
73.897 12.7102 mo
73.897 12.3028 73.8567 12.0163 73.7806 11.8462 cv
73.7045 11.6805 73.5746 11.5955 73.3956 11.5955 cv
73.2165 11.5955 73.0866 11.6805 73.0105 11.8462 cv
72.9299 12.0163 72.8941 12.3028 72.8941 12.7102 cv
72.8941 13.1221 72.9299 13.4131 73.0105 13.5832 cv
73.0866 13.7533 73.2165 13.8339 73.3956 13.8339 cv
73.5746 13.8339 73.7 13.7533 73.7806 13.5832 cv
73.8567 13.4131 73.897 13.1221 73.897 12.7102 cv
74.7386 12.7147 mo
74.7386 13.2564 74.6222 13.6728 74.3894 13.9638 cv
74.1566 14.2592 73.8253 14.4025 73.3956 14.4025 cv
72.9658 14.4025 72.6345 14.2592 72.4017 13.9638 cv
72.1689 13.6728 72.0525 13.2564 72.0525 12.7147 cv
72.0525 12.1775 72.1689 11.7611 72.4017 11.4656 cv
72.6345 11.1701 72.9658 11.0224 73.3956 11.0224 cv
73.8253 11.0224 74.1566 11.1701 74.3894 11.4656 cv
74.6222 11.7611 74.7386 12.1775 74.7386 12.7147 cv
f
61.458 30.264 mo
62.2011 30.264 li
62.2011 28.1554 li
61.44 28.3121 li
61.44 27.739 li
62.1967 27.5823 li
62.998 27.5823 li
62.998 30.264 li
63.7412 30.264 li
63.7412 30.846 li
61.458 30.846 li
61.458 30.264 li
1 /0 /CSD get_res sepcs
0 sep
f
64.5068 29.9999 mo
65.2947 29.9999 li
65.2947 30.846 li
64.5068 30.846 li
64.5068 29.9999 li
f
67.8108 29.212 mo
67.8108 28.8046 67.7705 28.518 67.6944 28.3479 cv
67.6183 28.1823 67.4884 28.0972 67.3094 28.0972 cv
67.1303 28.0972 67.0005 28.1823 66.9243 28.3479 cv
66.8438 28.518 66.8079 28.8046 66.8079 29.212 cv
66.8079 29.6238 66.8438 29.9148 66.9243 30.085 cv
67.0005 30.2551 67.1303 30.3357 67.3094 30.3357 cv
67.4884 30.3357 67.6138 30.2551 67.6944 30.085 cv
67.7705 29.9148 67.8108 29.6238 67.8108 29.212 cv
68.6525 29.2164 mo
68.6525 29.7581 68.536 30.1745 68.3032 30.4655 cv
68.0704 30.761 67.7392 30.9042 67.3094 30.9042 cv
66.8796 30.9042 66.5483 30.761 66.3155 30.4655 cv
66.0827 30.1745 65.9663 29.7581 65.9663 29.2164 cv
65.9663 28.6792 66.0827 28.2628 66.3155 27.9674 cv
66.5483 27.6719 66.8796 27.5241 67.3094 27.5241 cv
67.7392 27.5241 68.0704 27.6719 68.3032 27.9674 cv
68.536 28.2628 68.6525 28.6792 68.6525 29.2164 cv
f
70.9267 29.212 mo
70.9267 28.8046 70.8865 28.518 70.8103 28.3479 cv
70.7342 28.1823 70.6044 28.0972 70.4253 28.0972 cv
70.2462 28.0972 70.1164 28.1823 70.0403 28.3479 cv
69.9597 28.518 69.9239 28.8046 69.9239 29.212 cv
69.9239 29.6238 69.9597 29.9148 70.0403 30.085 cv
70.1164 30.2551 70.2462 30.3357 70.4253 30.3357 cv
70.6044 30.3357 70.7298 30.2551 70.8103 30.085 cv
70.8865 29.9148 70.9267 29.6238 70.9267 29.212 cv
71.7684 29.2164 mo
71.7684 29.7581 71.652 30.1745 71.4192 30.4655 cv
71.1864 30.761 70.8551 30.9042 70.4253 30.9042 cv
69.9955 30.9042 69.6642 30.761 69.4314 30.4655 cv
69.1986 30.1745 69.0822 29.7581 69.0822 29.2164 cv
69.0822 28.6792 69.1986 28.2628 69.4314 27.9674 cv
69.6642 27.6719 69.9955 27.5241 70.4253 27.5241 cv
70.8551 27.5241 71.1864 27.6719 71.4192 27.9674 cv
71.652 28.2628 71.7684 28.6792 71.7684 29.2164 cv
f
74.0427 29.212 mo
74.0427 28.8046 74.0024 28.518 73.9263 28.3479 cv
73.8502 28.1823 73.7204 28.0972 73.5413 28.0972 cv
73.3622 28.0972 73.2324 28.1823 73.1563 28.3479 cv
73.0757 28.518 73.0399 28.8046 73.0399 29.212 cv
73.0399 29.6238 73.0757 29.9148 73.1563 30.085 cv
73.2324 30.2551 73.3622 30.3357 73.5413 30.3357 cv
73.7204 30.3357 73.8457 30.2551 73.9263 30.085 cv
74.0024 29.9148 74.0427 29.6238 74.0427 29.212 cv
74.8844 29.2164 mo
74.8844 29.7581 74.768 30.1745 74.5352 30.4655 cv
74.3024 30.761 73.9711 30.9042 73.5413 30.9042 cv
73.1115 30.9042 72.7802 30.761 72.5474 30.4655 cv
72.3146 30.1745 72.1982 29.7581 72.1982 29.2164 cv
72.1982 28.6792 72.3146 28.2628 72.5474 27.9674 cv
72.7802 27.6719 73.1115 27.5241 73.5413 27.5241 cv
73.9711 27.5241 74.3024 27.6719 74.5352 27.9674 cv
74.768 28.2628 74.8844 28.6792 74.8844 29.2164 cv
f
62.8478 45.7137 mo
62.8478 45.3063 62.8075 45.0198 62.7314 44.8497 cv
62.6553 44.684 62.5255 44.5989 62.3464 44.5989 cv
62.1673 44.5989 62.0375 44.684 61.9614 44.8497 cv
61.8808 45.0198 61.845 45.3063 61.845 45.7137 cv
61.845 46.1256 61.8808 46.4166 61.9614 46.5867 cv
62.0375 46.7568 62.1673 46.8374 62.3464 46.8374 cv
62.5255 46.8374 62.6508 46.7568 62.7314 46.5867 cv
62.8075 46.4166 62.8478 46.1256 62.8478 45.7137 cv
63.6895 45.7182 mo
63.6895 46.2599 63.5731 46.6763 63.3403 46.9673 cv
63.1075 47.2627 62.7762 47.406 62.3464 47.406 cv
61.9166 47.406 61.5853 47.2627 61.3525 46.9673 cv
61.1197 46.6763 61.0033 46.2599 61.0033 45.7182 cv
61.0033 45.1809 61.1197 44.7646 61.3525 44.4691 cv
61.5853 44.1736 61.9166 44.0259 62.3464 44.0259 cv
62.7762 44.0259 63.1075 44.1736 63.3403 44.4691 cv
63.5731 44.7646 63.6895 45.1809 63.6895 45.7182 cv
1 /0 /CSD get_res sepcs
1 sep
f
64.361 46.5016 mo
65.149 46.5016 li
65.149 47.3478 li
64.361 47.3478 li
64.361 46.5016 li
f
67.2532 44.778 mo
66.3309 46.1435 li
67.2532 46.1435 li
67.2532 44.778 li
67.1144 44.0841 mo
68.0501 44.0841 li
68.0501 46.1435 li
68.5157 46.1435 li
68.5157 46.7524 li
68.0501 46.7524 li
68.0501 47.3478 li
67.2532 47.3478 li
67.2532 46.7524 li
65.8071 46.7524 li
65.8071 46.0316 li
67.1144 44.0841 li
f
69.1962 44.0841 mo
71.2869 44.0841 li
71.2869 44.7019 li
69.8677 44.7019 li
69.8677 45.2078 li
70.0602 45.1675 li
70.2617 45.1541 li
70.6601 45.1541 70.969 45.2571 71.1929 45.454 cv
71.4123 45.651 71.5242 45.9286 71.5242 46.2823 cv
71.5242 46.636 71.4033 46.9135 71.1615 47.1105 cv
70.9198 47.3075 70.584 47.406 70.1587 47.406 cv
69.9707 47.406 69.7871 47.3881 69.608 47.3523 cv
69.4245 47.3209 69.2454 47.2672 69.0663 47.1956 cv
69.0663 46.533 li
69.2454 46.636 69.4111 46.7121 69.5722 46.7613 cv
69.7334 46.815 69.8811 46.8374 70.0244 46.8374 cv
70.2259 46.8374 70.387 46.7882 70.5034 46.6897 cv
70.6198 46.5912 70.6825 46.4524 70.6825 46.2823 cv
70.6825 46.1122 70.6198 45.9778 70.5034 45.8793 cv
70.387 45.7809 70.2259 45.7271 70.0244 45.7271 cv
69.899 45.7271 69.7692 45.745 69.6349 45.7764 cv
69.5006 45.8077 69.3529 45.857 69.1962 45.9196 cv
69.1962 44.0841 li
f
73.897 45.7137 mo
73.897 45.3063 73.8567 45.0198 73.7806 44.8497 cv
73.7045 44.684 73.5746 44.5989 73.3956 44.5989 cv
73.2165 44.5989 73.0866 44.684 73.0105 44.8497 cv
72.9299 45.0198 72.8941 45.3063 72.8941 45.7137 cv
72.8941 46.1256 72.9299 46.4166 73.0105 46.5867 cv
73.0866 46.7568 73.2165 46.8374 73.3956 46.8374 cv
73.5746 46.8374 73.7 46.7568 73.7806 46.5867 cv
73.8567 46.4166 73.897 46.1256 73.897 45.7137 cv
74.7386 45.7182 mo
74.7386 46.2599 74.6222 46.6763 74.3894 46.9673 cv
74.1566 47.2627 73.8253 47.406 73.3956 47.406 cv
72.9658 47.406 72.6345 47.2627 72.4017 46.9673 cv
72.1689 46.6763 72.0525 46.2599 72.0525 45.7182 cv
72.0525 45.1809 72.1689 44.7646 72.4017 44.4691 cv
72.6345 44.1736 72.9658 44.0259 73.3956 44.0259 cv
73.8253 44.0259 74.1566 44.1736 74.3894 44.4691 cv
74.6222 44.7646 74.7386 45.1809 74.7386 45.7182 cv
f
79.3496 12.7102 mo
79.3496 12.3028 79.3093 12.0163 79.2332 11.8462 cv
79.1571 11.6805 79.0272 11.5955 78.8481 11.5955 cv
78.6691 11.5955 78.5392 11.6805 78.4631 11.8462 cv
78.3825 12.0163 78.3467 12.3028 78.3467 12.7102 cv
78.3467 13.1221 78.3825 13.4131 78.4631 13.5832 cv
78.5392 13.7533 78.6691 13.8339 78.8481 13.8339 cv
79.0272 13.8339 79.1526 13.7533 79.2332 13.5832 cv
79.3093 13.4131 79.3496 13.1221 79.3496 12.7102 cv
80.1912 12.7147 mo
80.1912 13.2564 80.0748 13.6728 79.842 13.9638 cv
79.6092 14.2592 79.2779 14.4025 78.8481 14.4025 cv
78.4184 14.4025 78.0871 14.2592 77.8543 13.9638 cv
77.6215 13.6728 77.5051 13.2564 77.5051 12.7147 cv
77.5051 12.1775 77.6215 11.7611 77.8543 11.4656 cv
78.0871 11.1701 78.4184 11.0224 78.8481 11.0224 cv
79.2779 11.0224 79.6092 11.1701 79.842 11.4656 cv
80.0748 11.7611 80.1912 12.1775 80.1912 12.7147 cv
f
80.8628 13.4982 mo
81.6507 13.4982 li
81.6507 14.3443 li
80.8628 14.3443 li
80.8628 13.4982 li
f
83.7549 11.7745 mo
82.8327 13.14 li
83.7549 13.14 li
83.7549 11.7745 li
83.6161 11.0806 mo
84.5518 11.0806 li
84.5518 13.14 li
85.0174 13.14 li
85.0174 13.7489 li
84.5518 13.7489 li
84.5518 14.3443 li
83.7549 14.3443 li
83.7549 13.7489 li
82.3089 13.7489 li
82.3089 13.0281 li
83.6161 11.0806 li
f
85.6979 11.0806 mo
87.7887 11.0806 li
87.7887 11.6984 li
86.3695 11.6984 li
86.3695 12.2043 li
86.562 12.164 li
86.7634 12.1506 li
87.1619 12.1506 87.4708 12.2536 87.6946 12.4506 cv
87.914 12.6475 88.0259 12.9251 88.0259 13.2788 cv
88.0259 13.6325 87.9051 13.91 87.6633 14.107 cv
87.4215 14.304 87.0858 14.4025 86.6605 14.4025 cv
86.4724 14.4025 86.2889 14.3846 86.1098 14.3488 cv
85.9262 14.3174 85.7472 14.2637 85.5681 14.1921 cv
85.5681 13.5295 li
85.7472 13.6325 85.9128 13.7086 86.074 13.7578 cv
86.2351 13.8115 86.3829 13.8339 86.5261 13.8339 cv
86.7276 13.8339 86.8888 13.7847 87.0052 13.6862 cv
87.1216 13.5877 87.1843 13.4489 87.1843 13.2788 cv
87.1843 13.1087 87.1216 12.9744 87.0052 12.8759 cv
86.8888 12.7774 86.7276 12.7236 86.5261 12.7236 cv
86.4008 12.7236 86.271 12.7416 86.1367 12.7729 cv
86.0023 12.8042 85.8546 12.8535 85.6979 12.9162 cv
85.6979 11.0806 li
f
90.3987 12.7102 mo
90.3987 12.3028 90.3584 12.0163 90.2823 11.8462 cv
90.2062 11.6805 90.0764 11.5955 89.8973 11.5955 cv
89.7182 11.5955 89.5884 11.6805 89.5123 11.8462 cv
89.4317 12.0163 89.3959 12.3028 89.3959 12.7102 cv
89.3959 13.1221 89.4317 13.4131 89.5123 13.5832 cv
89.5884 13.7533 89.7182 13.8339 89.8973 13.8339 cv
90.0764 13.8339 90.2017 13.7533 90.2823 13.5832 cv
90.3584 13.4131 90.3987 13.1221 90.3987 12.7102 cv
91.2404 12.7147 mo
91.2404 13.2564 91.124 13.6728 90.8912 13.9638 cv
90.6584 14.2592 90.3271 14.4025 89.8973 14.4025 cv
89.4675 14.4025 89.1362 14.2592 88.9034 13.9638 cv
88.6706 13.6728 88.5542 13.2564 88.5542 12.7147 cv
88.5542 12.1775 88.6706 11.7611 88.9034 11.4656 cv
89.1362 11.1701 89.4675 11.0224 89.8973 11.0224 cv
90.3271 11.0224 90.6584 11.1701 90.8912 11.4656 cv
91.124 11.7611 91.2404 12.1775 91.2404 12.7147 cv
f
79.3496 29.212 mo
79.3496 28.8046 79.3093 28.518 79.2332 28.3479 cv
79.1571 28.1823 79.0272 28.0972 78.8481 28.0972 cv
78.6691 28.0972 78.5392 28.1823 78.4631 28.3479 cv
78.3825 28.518 78.3467 28.8046 78.3467 29.212 cv
78.3467 29.6238 78.3825 29.9148 78.4631 30.085 cv
78.5392 30.2551 78.6691 30.3357 78.8481 30.3357 cv
79.0272 30.3357 79.1526 30.2551 79.2332 30.085 cv
79.3093 29.9148 79.3496 29.6238 79.3496 29.212 cv
80.1912 29.2164 mo
80.1912 29.7581 80.0748 30.1745 79.842 30.4655 cv
79.6092 30.761 79.2779 30.9042 78.8481 30.9042 cv
78.4184 30.9042 78.0871 30.761 77.8543 30.4655 cv
77.6215 30.1745 77.5051 29.7581 77.5051 29.2164 cv
77.5051 28.6792 77.6215 28.2628 77.8543 27.9674 cv
78.0871 27.6719 78.4184 27.5241 78.8481 27.5241 cv
79.2779 27.5241 79.6092 27.6719 79.842 27.9674 cv
80.0748 28.2628 80.1912 28.6792 80.1912 29.2164 cv
f
80.8628 29.9999 mo
81.6507 29.9999 li
81.6507 30.846 li
80.8628 30.846 li
80.8628 29.9999 li
f
83.7549 28.2763 mo
82.8327 29.6417 li
83.7549 29.6417 li
83.7549 28.2763 li
83.6161 27.5823 mo
84.5518 27.5823 li
84.5518 29.6417 li
85.0174 29.6417 li
85.0174 30.2506 li
84.5518 30.2506 li
84.5518 30.846 li
83.7549 30.846 li
83.7549 30.2506 li
82.3089 30.2506 li
82.3089 29.5298 li
83.6161 27.5823 li
f
85.6979 27.5823 mo
87.7887 27.5823 li
87.7887 28.2002 li
86.3695 28.2002 li
86.3695 28.7061 li
86.562 28.6658 li
86.7634 28.6523 li
87.1619 28.6523 87.4708 28.7553 87.6946 28.9523 cv
87.914 29.1493 88.0259 29.4269 88.0259 29.7805 cv
88.0259 30.1342 87.9051 30.4118 87.6633 30.6088 cv
87.4215 30.8058 87.0858 30.9042 86.6605 30.9042 cv
86.4724 30.9042 86.2889 30.8863 86.1098 30.8505 cv
85.9262 30.8192 85.7472 30.7655 85.5681 30.6938 cv
85.5681 30.0312 li
85.7472 30.1342 85.9128 30.2103 86.074 30.2596 cv
86.2351 30.3133 86.3829 30.3357 86.5261 30.3357 cv
86.7276 30.3357 86.8888 30.2864 87.0052 30.1879 cv
87.1216 30.0894 87.1843 29.9507 87.1843 29.7805 cv
87.1843 29.6104 87.1216 29.4761 87.0052 29.3776 cv
86.8888 29.2791 86.7276 29.2254 86.5261 29.2254 cv
86.4008 29.2254 86.271 29.2433 86.1367 29.2746 cv
86.0023 29.306 85.8546 29.3552 85.6979 29.4179 cv
85.6979 27.5823 li
f
90.3987 29.212 mo
90.3987 28.8046 90.3584 28.518 90.2823 28.3479 cv
90.2062 28.1823 90.0764 28.0972 89.8973 28.0972 cv
89.7182 28.0972 89.5884 28.1823 89.5123 28.3479 cv
89.4317 28.518 89.3959 28.8046 89.3959 29.212 cv
89.3959 29.6238 89.4317 29.9148 89.5123 30.085 cv
89.5884 30.2551 89.7182 30.3357 89.8973 30.3357 cv
90.0764 30.3357 90.2017 30.2551 90.2823 30.085 cv
90.3584 29.9148 90.3987 29.6238 90.3987 29.212 cv
91.2404 29.2164 mo
91.2404 29.7581 91.124 30.1745 90.8912 30.4655 cv
90.6584 30.761 90.3271 30.9042 89.8973 30.9042 cv
89.4675 30.9042 89.1362 30.761 88.9034 30.4655 cv
88.6706 30.1745 88.5542 29.7581 88.5542 29.2164 cv
88.5542 28.6792 88.6706 28.2628 88.9034 27.9674 cv
89.1362 27.6719 89.4675 27.5241 89.8973 27.5241 cv
90.3271 27.5241 90.6584 27.6719 90.8912 27.9674 cv
91.124 28.2628 91.2404 28.6792 91.2404 29.2164 cv
f
77.9597 46.7658 mo
78.7029 46.7658 li
78.7029 44.6571 li
77.9418 44.8138 li
77.9418 44.2408 li
78.6984 44.0841 li
79.4998 44.0841 li
79.4998 46.7658 li
80.243 46.7658 li
80.243 47.3478 li
77.9597 47.3478 li
77.9597 46.7658 li
1 /0 /CSD get_res sepcs
0 sep
f
81.0085 46.5016 mo
81.7965 46.5016 li
81.7965 47.3478 li
81.0085 47.3478 li
81.0085 46.5016 li
f
84.3125 45.7137 mo
84.3125 45.3063 84.2722 45.0198 84.1961 44.8497 cv
84.12 44.684 83.9902 44.5989 83.8111 44.5989 cv
83.632 44.5989 83.5022 44.684 83.4261 44.8497 cv
83.3455 45.0198 83.3097 45.3063 83.3097 45.7137 cv
83.3097 46.1256 83.3455 46.4166 83.4261 46.5867 cv
83.5022 46.7568 83.632 46.8374 83.8111 46.8374 cv
83.9902 46.8374 84.1155 46.7568 84.1961 46.5867 cv
84.2722 46.4166 84.3125 46.1256 84.3125 45.7137 cv
85.1542 45.7182 mo
85.1542 46.2599 85.0378 46.6763 84.805 46.9673 cv
84.5722 47.2627 84.2409 47.406 83.8111 47.406 cv
83.3813 47.406 83.05 47.2627 82.8172 46.9673 cv
82.5844 46.6763 82.468 46.2599 82.468 45.7182 cv
82.468 45.1809 82.5844 44.7646 82.8172 44.4691 cv
83.05 44.1736 83.3813 44.0259 83.8111 44.0259 cv
84.2409 44.0259 84.5722 44.1736 84.805 44.4691 cv
85.0378 44.7646 85.1542 45.1809 85.1542 45.7182 cv
f
87.4285 45.7137 mo
87.4285 45.3063 87.3882 45.0198 87.3121 44.8497 cv
87.236 44.684 87.1061 44.5989 86.9271 44.5989 cv
86.748 44.5989 86.6182 44.684 86.5421 44.8497 cv
86.4615 45.0198 86.4257 45.3063 86.4257 45.7137 cv
86.4257 46.1256 86.4615 46.4166 86.5421 46.5867 cv
86.6182 46.7568 86.748 46.8374 86.9271 46.8374 cv
87.1061 46.8374 87.2315 46.7568 87.3121 46.5867 cv
87.3882 46.4166 87.4285 46.1256 87.4285 45.7137 cv
88.2702 45.7182 mo
88.2702 46.2599 88.1538 46.6763 87.921 46.9673 cv
87.6882 47.2627 87.3569 47.406 86.9271 47.406 cv
86.4973 47.406 86.166 47.2627 85.9332 46.9673 cv
85.7004 46.6763 85.584 46.2599 85.584 45.7182 cv
85.584 45.1809 85.7004 44.7646 85.9332 44.4691 cv
86.166 44.1736 86.4973 44.0259 86.9271 44.0259 cv
87.3569 44.0259 87.6882 44.1736 87.921 44.4691 cv
88.1538 44.7646 88.2702 45.1809 88.2702 45.7182 cv
f
90.5444 45.7137 mo
90.5444 45.3063 90.5042 45.0198 90.428 44.8497 cv
90.3519 44.684 90.2221 44.5989 90.043 44.5989 cv
89.864 44.5989 89.7341 44.684 89.658 44.8497 cv
89.5774 45.0198 89.5416 45.3063 89.5416 45.7137 cv
89.5416 46.1256 89.5774 46.4166 89.658 46.5867 cv
89.7341 46.7568 89.864 46.8374 90.043 46.8374 cv
90.2221 46.8374 90.3475 46.7568 90.428 46.5867 cv
90.5042 46.4166 90.5444 46.1256 90.5444 45.7137 cv
91.3861 45.7182 mo
91.3861 46.2599 91.2697 46.6763 91.0369 46.9673 cv
90.8041 47.2627 90.4728 47.406 90.043 47.406 cv
89.6132 47.406 89.2819 47.2627 89.0491 46.9673 cv
88.8163 46.6763 88.6999 46.2599 88.6999 45.7182 cv
88.6999 45.1809 88.8163 44.7646 89.0491 44.4691 cv
89.2819 44.1736 89.6132 44.0259 90.043 44.0259 cv
90.4728 44.0259 90.8041 44.1736 91.0369 44.4691 cv
91.2697 44.7646 91.3861 45.1809 91.3861 45.7182 cv
f
grestore
gsave
99.062 54.252 mo
107.348 54.252 li
107.348 4.53744 li
99.062 4.53744 li
99.062 54.252 li
clp
99.062 54.252 mo
107.348 54.252 li
107.348 4.53744 li
99.062 4.53744 li
99.062 54.252 li
1 /0 /CSD get_res sepcs
0 sep
f
99.3106 54.0034 mo
107.099 54.0034 li
107.099 4.78604 li
99.3106 4.78604 li
99.3106 54.0034 li
f
gsave
99.3106 54.0034 mo
107.099 54.0034 li
107.099 4.78604 li
99.3106 4.78604 li
99.3106 54.0034 li
clp
107.099 54.0034 mo
99.3106 54.0034 li
99.3106 4.78604 li
107.099 4.78604 li
107.099 54.0034 li
gsave
/1 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 54.752 ]ct
[8.12004 0 0 49.5488 99.1449 .582861 ]ct
snap_to_device
<<
/T 1
/W 49 
/H 299 
/M[49 0 0 -299 0 299 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"-IqbPab!64QTiI89t1<hZ#e?gVYc$;rN1FhsY\mgMY1FpX`N#$JcX5ViI(,!dB2q)J&3(:b1?sGN3
,19:U1.7@K?F#D)Tq!&tS].5Jep3j8TC'&"Ist"J$I4p"/(n-GQJHujqt<(rYU_2H['D4;k@e;5e*/j2
m[FhZ1V4YRNg&h<PrbAdI<D3UOko3^4--Z$>d:>\h5=8bO0\ZD:uN"0)\3b8ZcfO$Y%+rTf(fE[]Xn'L
m+0^Rf!*=\>#rmcc11?lluF!pWn:mTW2sP(:/b^a]ouIRZ<Q.4Y`.Dm/_*U>Dk4$[As[e?[YS3Y>MX1?
YIFO2_!]_\%GTRLEq/p*Ft[3;r0lH!.nsBV>CQ73ce,qXEI&;1k<%E^@^l!Up3_$t?,(g/m^\gRo@Q4l
l<)6t)0]^G]>^B0GM+S=p>k^aA[>V)o4>12i'R^\q*)I5DI+tsZ'u-&A=!A1aR2W-)7q8HFEW]IBn$*S
;ErT9_Cc]sAN'ir`9pK1!P@%#4Ee&]'R!&51:rsiCj%Ub,^.XfR0'7lHN]_YDAk3ch,Ib`].(NTG*@K^
lm;`DYaYpRa)1rtYM[75BKsKX%ub$X%N*#7&\*VP=Q"(?$,@*qpB,WF)ZpLX2]<OSDA:Hih$>-ph/K$Z
J2h_iJ/EGsJS94ZJLG\c!-WMfJ-^>-$]#&)rGLr=fPs/)]3#*]5R=tm+IHGfJ1r+%>nCCRB+nYQA$K-h
oEt(j!eOL(a("k*\1I`tAI/W*Q@NpI5dr$^r$A"/^^U=8!j2pp&9,l,&H371]-SS)(3!-d"TdciZjSi@
TM7\PJ//0`">gKG+lJ`<T*62H:bSJ:_"Rm?$TKQ-;F%dC1'(,N`<,`=-krmYJ4%+q!F#_D&b(L)9`d3[
fH;;D^j6%M$Wnq;4TT=$A.-HkO=;;>^`*>U$!8WaKn*_9dKQEQ8F>NJ=MWAek54p:e]TV"TC"?6Z[D[_
Gkk)*n=(t:]UN5(U5*(EK3j!5!lfK[NH3JU)<RY03^gcV*dV5spk?c[MhhrV.DX4^4A8!o5J+Hp01nL:
J/A<l&mY(gN14-<itKcii;`f'nh70HNrZX8+S5rL.A0m1Q[g%IillNGf*#=nE(.Pg!U&^dR^3'!"oKjC
=[81$#'r#d7fg"!WWdc?0A9A23$=k^J5\]f]dU3W5_4G+!k-L71g:*!(@\SZ%J9#L!s*ZKed9Eo(L_=e
X;6mD+Hp-AGtl(I!g_:C1[+t,#Y:d.C)./D.j.8G1;+6_,[cL[M=cDE6NRl(,gZoS,6clQB4rC,*\:\A
4e([h+GQIBFoc"Q63PpD=:9f\4TM5Kq[<~>

%%EndBinary
grestore
np
grestore
.23016 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
99.3106 4.78601 mo
107.099 4.78601 li
1 /0 /CSD get_res sepcs
1 sep
@
107.099 54.0034 mo
107.099 4.78601 li
@
99.3106 54.0034 mo
107.099 54.0034 li
@
99.3106 54.0034 mo
99.3106 4.78601 li
@
grestore
1 /0 /CSD get_res sepcs
1 sep
true set_gvm
%ADOBeginSubsetFont: EJIAAA+CMSSBX10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
DVZBWO+CMSSBX10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/zero <1C60D8A8C9B795A0335964371F4A4CA7FE73AF3B8BEC93A4723E1E000
6587A524086FFB8AFE852C45BAD4113AFD64CF3B4AA1AE0CB7FD854DB68ADBA8
300892E0591E04AA71233C37D4CAFB659E8CA41D5D53D4D6F32CCE483FBF1316
456353D58DDB1063D61EB69A4FC385EA560ED68E8D6C2FC59AAE3538D4C1891A
E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DVZBWO+CMSSBX10 /Encoding get
dup 48 /zero put
pop
%ADOEndSubsetFont
reset_gvm
/DVZBWO+CMSSBX10*1 
[48{/.notdef}rp /zero 207{/.notdef}rp]
DVZBWO+CMSSBX10 nf
DVZBWO+CMSSBX10*1 [6.9738 0 0 -6.9738 0 0 ]msf
101.196 52.536 mo
(0)sh
1 /0 /CSD get_res sepcs
0 sep
true set_gvm
%ADOBeginSubsetFont: EJIAAA+CMSSBX10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
DVZBWO+CMSSBX10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B795A0CD6BCD21B40205F6F7BA65C738D282953681BF5185
9DC859EB177150154F0E13E86B5C92A79F1E2BB1E30C10719657DE6A0E40F3D0
74BE07DBDA4DC7BFCD0099861FED004AA46F2B2C2C3870E8553A9E2F3F4C154B
0F4494E5> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DVZBWO+CMSSBX10 /Encoding get
dup 49 /one put
pop
%ADOEndSubsetFont
reset_gvm
/DVZBWO+CMSSBX10*1 
[48{/.notdef}rp /zero /one 206{/.notdef}rp]
DVZBWO+CMSSBX10 nf
DVZBWO+CMSSBX10*1 [6.9738 0 0 -6.9738 0 0 ]msf
101.196 10.928 mo
(1)sh
gsave
112.411 54.237 mo
166.135 54.237 li
166.135 .513452 li
112.411 .513452 li
112.411 54.237 li
clp
112.411 54.237 mo
166.135 54.237 li
166.135 .513452 li
112.411 .513452 li
112.411 54.237 li
f
116.333 53.9684 mo
165.838 53.9684 li
165.838 4.46315 li
116.333 4.46315 li
116.333 53.9684 li
f
gsave
116.333 53.9684 mo
165.838 53.9684 li
165.838 4.46315 li
116.333 4.46315 li
116.333 53.9684 li
clp
165.838 53.9684 mo
116.333 53.9684 li
116.333 4.46315 li
165.838 4.46315 li
165.838 53.9684 li
gsave
/1 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 54.752 ]ct
[49.7838 0 0 49.7838 116.154 .604537 ]ct
snap_to_device
<<
/T 1
/W 278 
/H 278 
/M[278 0 0 -278 0 278 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"-MZ#'RD$j8iscJ3m]cCCjSQQfMIT4%,<WIS*bIt.ISo;M-(kA-[^g)cf&X@P9NUcYVO2cc^n/(1!=
VAh&6N>:^'C=A.Wl,JU&B=7!DMKE>s]!L+4@n!u6,2HC=]!3I8=HW$Q2VhJtDQHBQ<h"!.82jSF40)(7
<hpZbd[epc)_9?r($X"Ydu>+,`enkN[HY\gFCRbNZeBM27Co`Jh-"U+Yp/"+Om];/h,oeWX@RP9Rr5;u
2cc_9X%bNRU`1i4S^jSV/(0Cll-=%mN>:]tMKEL=l,JU&@n!u8g2pgn]!3I8=`(aT,2H@`m]8>&=HRL&
89\+(DQHAf<hqgX9fH+K)_9@-eYX99dZ#"+c>(gf($W_qFD&#G`enkJ7CohZFCRbNYp/",D7Ztrh,og-
X>\m:O`%6kG?12NX@P9NUcYVO2cc^n/(1!=VAh&6N>:^'C=A.Wl,JU&B=7!DMKE>s]!L+4@n!u6,2HC=
]!3I8=HW$Q2VhJtDQHBQ<h"!.82jSF40)(7<hpZbd[epc)_9?r($X"Ydu>+,`enkN[HY\gFCRbNZeBM2
7Co`Jh-"U+Yp/"+Om];/h,oeWX@RP9Rr5;u2cc_9X%bNRU`1i4S^jSV/(0Cll-=%mN>:]tMKEL=l,JU&
@n!u8g2pgn]!3I8=`(aT,2H@`m]8>&=HRL&89\+(DQHAf<hqgX9fH+K)_9@-eYX99dZ#"+c>(gf($W_q
FD&#G`enkJ7CohZFCRbNYp/",D7Ztrh,og-X>\m:O`%6kG?12NX@P9NUcYVO2cc^n/(1!=VAh&6N>:^'
C=A.Wl,JU&B=7!DMKE>s]!L+4@n!u6,2HC=]!3I8=HW$Q2VhJtDQHBQ<h"!.82jSF40)(7<hpZbd[epc
)_9?r($X"Ydu>+,`enkN[HY\gFCRbNZeBM27Co`Jh-"U+Yp/"+Om];/h,oeWX@RP9Rr5;u2cc_9X%bNR
U`1i4S^jSV/(0Cll-=%mN>:]tMKEL=l,JU&@n!u8g2pgn]!3I8=`(aT,2H@`m]8>&=HRL&89\+(DQHAf
<hqgX9fH+K)_9@-eYX99dZ#"+c>(gf($W_qFD&#GHPbq]<hsXtF%nSoUi/G<9fH+KDa&5:2cc_m5''FW
<hsXtF%nSoUi/G<9fH+KDa&5:2cc_m5''FW<hsXtF%nSoUi/G<9fH+KDa&5:2cc_m5''FW<hsXtF%nSo
Ui/G<9fH+KDa&5:2cc_m5''FW<hsXtF%nSoUi/G<9fH+KDa&5:2cc_m5''FW<hsXtF%nSoUi/G<9fH+K
Da&5:2cc_m5''FW<hsXtF%nSoUi/G<9fH+KDa&5:2cc_m5''FW<hsXtF%nSoUi/G<9fH+KDa&5:2cc_m
5''FW<hsXtF%nSoUi/G<9fH+KDa&5:2cc_m5''FW<hsXtF%nSoUi/G<9fH+KDa&5:2cc_m5''FW<hsXt
F%nSoUi/G<9fH+KDa&5:2cc_m5''FW<hsXtF%nSoUi/G<9fH+KDa&5:2cc_m5''FW<hsXtF%nSoUi/G<
9fH+KDa&5:2cc_m5''FW<hsXtF%nSoUi/G<9fH+KDa&5:2cc_m5''FW<hsXtF%nSoUi/G<9fH+KDa&5:
2cc_m5''FW<hsXtF%nSoUi/G<9fH+KDa&5:2cc_m5''FW<hsXtF%nSoUi/G<9fH+KDa&5:2cc_m5''FW
<hsXtF%nSoUi/G<9fH+KDa&5:2cc_m5''FW<hsXtF%nSoUi/G<9fH+KDa&5:2cc_m5''FW<hsXtF%nSo
Ui/G<9fH+KDa&5:2cc_m5''FW<hsXtF%nSoUi/G<9fH+KDa&5:2cc_m5''FW<hsXtF%nSoUi/G<9fH+K
Da&5:2cc_m5''FW<hsXtF%nSoUi/G<9fH+KDa&5:2cc_m?LuklT>#T5rbFC&Z/Tk87CofDh,n[.Yp/",
NGbgWh,og-X@>-LS8PE!G?1IX.o&$(UcYX)N>8?1/(1!=kf/M/N>:^'C33t)l,JU&B/R9*icJ[!]!E=2
=E1pW,2HC]DQGhR=HW$Q7Q4A<DQHBQ<hgTa:,c4L40-bg'rN!$d[eqP`er6)($X"YFCW;S`enkN27g'P
FCRbNZPqY%EOrD!h-#_TX>o$<Om];?2ccGdX@RP9UDk^Y2cc_9X3lnAV]./7S^lrDMURP"l-=$cA&[]P
MKEJg]!:7:@n!u8)VnM8]!3I8=cI=#38I]!m]8l:<h+'/89\+0)_4ZB<hqgXd>\m=)_9@-e`b#1du>+,
c>%H2`TbC"FD!JBZ/Tk87CofDh,n[.Yp/",NGbgWh,og-X@>-LS8PE!G?1IX.o&$(UcYX)N>8?1/(1!=
kf/M/N>:^'C33t)l,JU&B/R9*icJ[!]!E=2=E1pW,2HC]DQGhR=HW$Q7Q4A<DQHBQ<hgTa:,c4L40-bg
'rN!$d[eqP`er6)($X"YFCW;S`enkN27g'PFCRbNZPqY%EOrD!h-#_TX>o$<Om];?2ccGdX@RP9UDk^Y
2cc_9X3lnAV]./7S^lrDMURP"l-=$cA&[]PMKEJg]!:7:@n!u8)VnM8]!3I8=cI=#38I]!m]8l:<h+'/
89\+0)_4ZB<hqgXd>\m=)_9@-e`b#1du>+,c>%H2`TbC"FD!JBZ/Tk87CofDh,n[.Yp/",NGbgWh,og-
X@>-LS8PE!G?1IX.o&$(UcYX)N>8?1/(1!=kf/M/N>:^'C33t)l,JU&B/R9*icJ[!]!E=2=E1pW,2HC]
DQGhR=HW$Q7Q4A<DQHBQ<hgTa:,c4L40-bg'rN!$d[eqP`er6)($X"YFCW;S`enkN27g'PFCRbNZPqY%
EOrD!h-#_TX>o$<Om];?2ccGdX@RP9UDk^Y2cc_9X3lnAV]./7S^lrDMURP"l-=$cA&[]PMKEJg]!:7:
@n!u8)VnM8]!3I8=cI=#38I]!m]8l:<h+'/89\,+56-K"##>~>

%%EndBinary
grestore
np
grestore
124.584 4.46315 mo
124.584 4.46315 li
1 /0 /CSD get_res sepcs
1 sep
f
.12436 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
124.584 4.46315 mo
124.584 4.46315 li
@
124.819 2.30476 mo
124.653 2.30476 124.528 2.3361 124.447 2.38982 cv
124.367 2.44355 124.326 2.52413 124.326 2.63158 cv
124.326 2.73007 124.358 2.81066 124.425 2.86438 cv
124.492 2.92258 124.586 2.94944 124.702 2.94944 cv
124.85 2.94944 124.975 2.9002 125.074 2.79275 cv
125.172 2.6853 125.226 2.55547 125.226 2.3943 cv
125.226 2.30476 li
124.819 2.30476 li
126.014 2.00928 mo
126.014 3.40609 li
125.226 3.40609 li
125.226 3.04346 li
125.119 3.19568 125.002 3.30312 124.872 3.3658 cv
124.738 3.42848 124.581 3.46429 124.393 3.46429 cv
124.138 3.46429 123.932 3.39266 123.776 3.24492 cv
123.614 3.10166 123.538 2.90915 123.538 2.67187 cv
123.538 2.38535 123.637 2.17493 123.834 2.04062 cv
124.031 1.90631 124.34 1.83916 124.765 1.83916 cv
125.226 1.83916 li
125.226 1.77648 li
125.226 1.6556 125.177 1.56606 125.078 1.50786 cv
124.98 1.44966 124.828 1.41832 124.622 1.41832 cv
124.452 1.41832 124.295 1.43623 124.152 1.47205 cv
124.008 1.50786 123.874 1.55711 123.753 1.61979 cv
123.753 1.02435 li
123.919 .984058 124.084 .952719 124.255 .930334 cv
124.425 .912426 124.595 .898996 124.765 .898996 cv
125.204 .898996 125.522 .988535 125.719 1.16314 cv
125.916 1.33774 126.014 1.61979 126.014 2.00928 cv
f
141.085 4.46315 mo
141.085 4.46315 li
f
141.085 4.46315 mo
141.085 4.46315 li
@
141.451 2.9002 mo
141.616 2.9002 141.742 2.842 141.831 2.71664 cv
141.921 2.59576 141.965 2.41669 141.965 2.18388 cv
141.965 1.95108 141.921 1.77648 141.831 1.65112 cv
141.742 1.53025 141.616 1.46757 141.451 1.46757 cv
141.28 1.46757 141.155 1.53025 141.066 1.65112 cv
140.976 1.77648 140.931 1.95108 140.931 2.18388 cv
140.931 2.41669 140.976 2.59576 141.066 2.71664 cv
141.155 2.842 141.28 2.9002 141.451 2.9002 cv
140.931 1.31535 mo
141.039 1.17209 141.155 1.06912 141.289 1.00197 cv
141.419 .934811 141.572 .898996 141.742 .898996 cv
142.042 .898996 142.288 1.01987 142.485 1.26163 cv
142.677 1.50339 142.776 1.80782 142.776 2.18388 cv
142.776 2.56442 142.677 2.87334 142.485 3.11061 cv
142.288 3.34789 142.042 3.46429 141.742 3.46429 cv
141.572 3.46429 141.419 3.42848 141.289 3.3658 cv
141.155 3.30312 141.039 3.19568 140.931 3.05241 cv
140.931 3.40609 li
140.148 3.40609 li
140.148 .00360346 li
140.931 .00360346 li
140.931 1.31535 li
f
157.587 4.46315 mo
157.587 4.46315 li
f
157.587 4.46315 mo
157.587 4.46315 li
@
158.862 1.0333 mo
158.862 1.67351 li
158.754 1.60188 158.647 1.54815 158.539 1.51234 cv
158.432 1.47652 158.32 1.45862 158.208 1.45862 cv
157.989 1.45862 157.818 1.52577 157.698 1.65112 cv
157.572 1.77648 157.514 1.95556 157.514 2.18388 cv
157.514 2.41669 157.572 2.59576 157.698 2.72112 cv
157.818 2.84647 157.989 2.90915 158.208 2.90915 cv
158.329 2.90915 158.445 2.89124 158.557 2.85543 cv
158.665 2.81961 158.768 2.76589 158.862 2.69426 cv
158.862 3.33446 li
158.736 3.37923 158.611 3.41057 158.486 3.43296 cv
158.36 3.45086 158.235 3.46429 158.109 3.46429 cv
157.666 3.46429 157.321 3.35237 157.071 3.12852 cv
156.82 2.90467 156.699 2.58681 156.699 2.18388 cv
156.699 1.78096 156.82 1.46757 157.071 1.23924 cv
157.321 1.0154 157.666 .898996 158.109 .898996 cv
158.235 .898996 158.36 .912426 158.486 .934811 cv
158.611 .957196 158.736 .988535 158.862 1.0333 cv
f
116.333 12.714 mo
116.333 12.714 li
f
116.333 12.714 mo
116.333 12.714 li
@
165.838 12.714 mo
165.838 12.714 li
f
165.838 12.714 mo
165.838 12.714 li
@
114.335 12.8349 mo
114.17 12.8349 114.044 12.8663 113.964 12.92 cv
113.883 12.9737 113.843 13.0543 113.843 13.1617 cv
113.843 13.2602 113.874 13.3408 113.941 13.3945 cv
114.008 13.4527 114.102 13.4796 114.219 13.4796 cv
114.367 13.4796 114.492 13.4304 114.59 13.3229 cv
114.689 13.2155 114.743 13.0856 114.743 12.9245 cv
114.743 12.8349 li
114.335 12.8349 li
115.531 12.5394 mo
115.531 13.9362 li
114.743 13.9362 li
114.743 13.5736 li
114.635 13.7258 114.519 13.8333 114.389 13.896 cv
114.255 13.9586 114.098 13.9944 113.91 13.9944 cv
113.655 13.9944 113.449 13.9228 113.292 13.7751 cv
113.131 13.6318 113.055 13.4393 113.055 13.202 cv
113.055 12.9155 113.153 12.7051 113.35 12.5708 cv
113.547 12.4365 113.856 12.3693 114.281 12.3693 cv
114.743 12.3693 li
114.743 12.3066 li
114.743 12.1858 114.693 12.0962 114.595 12.038 cv
114.496 11.9798 114.344 11.9485 114.138 11.9485 cv
113.968 11.9485 113.811 11.9664 113.668 12.0022 cv
113.525 12.038 113.391 12.0873 113.27 12.1499 cv
113.27 11.5545 li
113.435 11.5142 113.601 11.4829 113.771 11.4605 cv
113.941 11.4426 114.111 11.4292 114.281 11.4292 cv
114.72 11.4292 115.038 11.5187 115.235 11.6933 cv
115.432 11.8679 115.531 12.1499 115.531 12.5394 cv
f
116.333 29.2158 mo
116.333 29.2158 li
f
116.333 29.2158 mo
116.333 29.2158 li
@
165.838 29.2158 mo
165.838 29.2158 li
f
165.838 29.2158 mo
165.838 29.2158 li
@
114.39 30.379 mo
114.555 30.379 114.681 30.3208 114.77 30.1955 cv
114.86 30.0746 114.904 29.8955 114.904 29.6627 cv
114.904 29.4299 114.86 29.2553 114.77 29.1299 cv
114.681 29.0091 114.555 28.9464 114.39 28.9464 cv
114.219 28.9464 114.094 29.0091 114.005 29.1299 cv
113.915 29.2553 113.87 29.4299 113.87 29.6627 cv
113.87 29.8955 113.915 30.0746 114.005 30.1955 cv
114.094 30.3208 114.219 30.379 114.39 30.379 cv
113.87 28.7942 mo
113.978 28.6509 114.094 28.5479 114.228 28.4808 cv
114.358 28.4136 114.51 28.3778 114.681 28.3778 cv
114.981 28.3778 115.227 28.4987 115.424 28.7404 cv
115.616 28.9822 115.715 29.2866 115.715 29.6627 cv
115.715 30.0432 115.616 30.3522 115.424 30.5894 cv
115.227 30.8267 114.981 30.9431 114.681 30.9431 cv
114.51 30.9431 114.358 30.9073 114.228 30.8446 cv
114.094 30.7819 113.978 30.6745 113.87 30.5312 cv
113.87 30.8849 li
113.087 30.8849 li
113.087 27.4824 li
113.87 27.4824 li
113.87 28.7942 li
f
116.333 45.7175 mo
116.333 45.7175 li
f
116.333 45.7175 mo
116.333 45.7175 li
@
165.838 45.7175 mo
165.838 45.7175 li
f
165.838 45.7175 mo
165.838 45.7175 li
@
115.532 44.5669 mo
115.532 45.2072 li
115.424 45.1355 115.317 45.0818 115.21 45.046 cv
115.102 45.0102 114.99 44.9923 114.878 44.9923 cv
114.659 44.9923 114.489 45.0594 114.368 45.1848 cv
114.243 45.3101 114.184 45.4892 114.184 45.7175 cv
114.184 45.9503 114.243 46.1294 114.368 46.2548 cv
114.489 46.3801 114.659 46.4428 114.878 46.4428 cv
114.999 46.4428 115.116 46.4249 115.228 46.3891 cv
115.335 46.3533 115.438 46.2995 115.532 46.2279 cv
115.532 46.8681 li
115.407 46.9129 115.281 46.9442 115.156 46.9666 cv
115.031 46.9845 114.905 46.9979 114.78 46.9979 cv
114.337 46.9979 113.992 46.886 113.741 46.6622 cv
113.49 46.4383 113.37 46.1205 113.37 45.7175 cv
113.37 45.3146 113.49 45.0012 113.741 44.7729 cv
113.992 44.549 114.337 44.4326 114.78 44.4326 cv
114.905 44.4326 115.031 44.4461 115.156 44.4685 cv
115.281 44.4908 115.407 44.5222 115.532 44.5669 cv
f
.24872 lw
2 lc
116.333 4.46315 mo
165.838 4.46315 li
@
165.838 53.9684 mo
165.838 4.46315 li
@
116.333 53.9684 mo
165.838 53.9684 li
@
116.333 53.9684 mo
116.333 4.46315 li
@
118.382 13.7623 mo
119.125 13.7623 li
119.125 11.6537 li
118.364 11.8103 li
118.364 11.2373 li
119.121 11.0806 li
119.922 11.0806 li
119.922 13.7623 li
120.665 13.7623 li
120.665 14.3443 li
118.382 14.3443 li
118.382 13.7623 li
1 /0 /CSD get_res sepcs
0 sep
f
121.431 13.4982 mo
122.219 13.4982 li
122.219 14.3443 li
121.431 14.3443 li
121.431 13.4982 li
f
124.735 12.7102 mo
124.735 12.3028 124.695 12.0163 124.619 11.8462 cv
124.543 11.6805 124.413 11.5955 124.234 11.5955 cv
124.055 11.5955 123.925 11.6805 123.849 11.8462 cv
123.768 12.0163 123.732 12.3028 123.732 12.7102 cv
123.732 13.1221 123.768 13.4131 123.849 13.5832 cv
123.925 13.7533 124.055 13.8339 124.234 13.8339 cv
124.413 13.8339 124.538 13.7533 124.619 13.5832 cv
124.695 13.4131 124.735 13.1221 124.735 12.7102 cv
125.577 12.7147 mo
125.577 13.2564 125.46 13.6728 125.228 13.9638 cv
124.995 14.2592 124.663 14.4025 124.234 14.4025 cv
123.804 14.4025 123.473 14.2592 123.24 13.9638 cv
123.007 13.6728 122.891 13.2564 122.891 12.7147 cv
122.891 12.1775 123.007 11.7611 123.24 11.4656 cv
123.473 11.1701 123.804 11.0224 124.234 11.0224 cv
124.663 11.0224 124.995 11.1701 125.228 11.4656 cv
125.46 11.7611 125.577 12.1775 125.577 12.7147 cv
f
127.851 12.7102 mo
127.851 12.3028 127.811 12.0163 127.735 11.8462 cv
127.658 11.6805 127.529 11.5955 127.35 11.5955 cv
127.171 11.5955 127.041 11.6805 126.965 11.8462 cv
126.884 12.0163 126.848 12.3028 126.848 12.7102 cv
126.848 13.1221 126.884 13.4131 126.965 13.5832 cv
127.041 13.7533 127.171 13.8339 127.35 13.8339 cv
127.529 13.8339 127.654 13.7533 127.735 13.5832 cv
127.811 13.4131 127.851 13.1221 127.851 12.7102 cv
128.693 12.7147 mo
128.693 13.2564 128.576 13.6728 128.343 13.9638 cv
128.111 14.2592 127.779 14.4025 127.35 14.4025 cv
126.92 14.4025 126.589 14.2592 126.356 13.9638 cv
126.123 13.6728 126.007 13.2564 126.007 12.7147 cv
126.007 12.1775 126.123 11.7611 126.356 11.4656 cv
126.589 11.1701 126.92 11.0224 127.35 11.0224 cv
127.779 11.0224 128.111 11.1701 128.343 11.4656 cv
128.576 11.7611 128.693 12.1775 128.693 12.7147 cv
f
130.967 12.7102 mo
130.967 12.3028 130.927 12.0163 130.851 11.8462 cv
130.774 11.6805 130.645 11.5955 130.466 11.5955 cv
130.286 11.5955 130.157 11.6805 130.081 11.8462 cv
130 12.0163 129.964 12.3028 129.964 12.7102 cv
129.964 13.1221 130 13.4131 130.081 13.5832 cv
130.157 13.7533 130.286 13.8339 130.466 13.8339 cv
130.645 13.8339 130.77 13.7533 130.851 13.5832 cv
130.927 13.4131 130.967 13.1221 130.967 12.7102 cv
131.809 12.7147 mo
131.809 13.2564 131.692 13.6728 131.459 13.9638 cv
131.227 14.2592 130.895 14.4025 130.466 14.4025 cv
130.036 14.4025 129.704 14.2592 129.472 13.9638 cv
129.239 13.6728 129.122 13.2564 129.122 12.7147 cv
129.122 12.1775 129.239 11.7611 129.472 11.4656 cv
129.704 11.1701 130.036 11.0224 130.466 11.0224 cv
130.895 11.0224 131.227 11.1701 131.459 11.4656 cv
131.692 11.7611 131.809 12.1775 131.809 12.7147 cv
f
119.823 29.212 mo
119.823 28.8046 119.782 28.518 119.706 28.3479 cv
119.63 28.1823 119.5 28.0972 119.321 28.0972 cv
119.142 28.0972 119.012 28.1823 118.936 28.3479 cv
118.856 28.518 118.82 28.8046 118.82 29.212 cv
118.82 29.6238 118.856 29.9148 118.936 30.085 cv
119.012 30.2551 119.142 30.3357 119.321 30.3357 cv
119.5 30.3357 119.626 30.2551 119.706 30.085 cv
119.782 29.9148 119.823 29.6238 119.823 29.212 cv
120.664 29.2164 mo
120.664 29.7581 120.548 30.1745 120.315 30.4655 cv
120.082 30.761 119.751 30.9042 119.321 30.9042 cv
118.891 30.9042 118.56 30.761 118.327 30.4655 cv
118.094 30.1745 117.978 29.7581 117.978 29.2164 cv
117.978 28.6792 118.094 28.2628 118.327 27.9674 cv
118.56 27.6719 118.891 27.5241 119.321 27.5241 cv
119.751 27.5241 120.082 27.6719 120.315 27.9674 cv
120.548 28.2628 120.664 28.6792 120.664 29.2164 cv
f
121.336 29.9999 mo
122.124 29.9999 li
122.124 30.846 li
121.336 30.846 li
121.336 29.9999 li
f
124.201 29.2343 mo
124.053 29.2343 123.941 29.2836 123.87 29.3776 cv
123.794 29.4761 123.758 29.6194 123.758 29.8074 cv
123.758 29.9999 123.794 30.1432 123.87 30.2372 cv
123.941 30.3357 124.053 30.3804 124.201 30.3804 cv
124.349 30.3804 124.461 30.3357 124.532 30.2372 cv
124.604 30.1432 124.644 29.9999 124.644 29.8074 cv
124.644 29.6194 124.604 29.4761 124.532 29.3776 cv
124.461 29.2836 124.349 29.2343 124.201 29.2343 cv
125.24 27.6674 mo
125.24 28.2718 li
125.101 28.2091 124.971 28.1599 124.85 28.1285 cv
124.725 28.0972 124.608 28.0793 124.492 28.0793 cv
124.241 28.0793 124.044 28.1509 123.906 28.2897 cv
123.762 28.4285 123.682 28.6344 123.659 28.9075 cv
123.753 28.8359 123.856 28.7822 123.973 28.7464 cv
124.085 28.7105 124.206 28.6926 124.34 28.6926 cv
124.671 28.6926 124.94 28.7911 125.146 28.9881 cv
125.352 29.1851 125.455 29.4403 125.455 29.7537 cv
125.455 30.1029 125.338 30.3849 125.11 30.5909 cv
124.882 30.8013 124.577 30.9042 124.192 30.9042 cv
123.767 30.9042 123.44 30.7655 123.207 30.4789 cv
122.974 30.1924 122.858 29.7895 122.858 29.2612 cv
122.858 28.724 122.992 28.2987 123.265 27.9897 cv
123.534 27.6853 123.91 27.5286 124.385 27.5286 cv
124.532 27.5286 124.676 27.5421 124.819 27.5644 cv
124.962 27.5868 125.101 27.6226 125.24 27.6674 cv
f
125.996 27.5823 mo
128.454 27.5823 li
128.454 28.0569 li
127.183 30.846 li
126.363 30.846 li
127.568 28.2002 li
125.996 28.2002 li
125.996 27.5823 li
f
129.287 27.5823 mo
131.378 27.5823 li
131.378 28.2002 li
129.958 28.2002 li
129.958 28.7061 li
130.151 28.6658 li
130.352 28.6523 li
130.751 28.6523 131.06 28.7553 131.284 28.9523 cv
131.503 29.1493 131.615 29.4269 131.615 29.7805 cv
131.615 30.1342 131.494 30.4118 131.252 30.6088 cv
131.011 30.8058 130.675 30.9042 130.249 30.9042 cv
130.061 30.9042 129.878 30.8863 129.699 30.8505 cv
129.515 30.8192 129.336 30.7655 129.157 30.6938 cv
129.157 30.0312 li
129.336 30.1342 129.502 30.2103 129.663 30.2596 cv
129.824 30.3133 129.972 30.3357 130.115 30.3357 cv
130.317 30.3357 130.478 30.2864 130.594 30.1879 cv
130.711 30.0894 130.773 29.9507 130.773 29.7805 cv
130.773 29.6104 130.711 29.4761 130.594 29.3776 cv
130.478 29.2791 130.317 29.2254 130.115 29.2254 cv
129.99 29.2254 129.86 29.2433 129.726 29.2746 cv
129.591 29.306 129.444 29.3552 129.287 29.4179 cv
129.287 27.5823 li
f
119.772 45.7137 mo
119.772 45.3063 119.732 45.0198 119.656 44.8497 cv
119.58 44.684 119.45 44.5989 119.271 44.5989 cv
119.092 44.5989 118.962 44.684 118.886 44.8497 cv
118.805 45.0198 118.769 45.3063 118.769 45.7137 cv
118.769 46.1256 118.805 46.4166 118.886 46.5867 cv
118.962 46.7568 119.092 46.8374 119.271 46.8374 cv
119.45 46.8374 119.575 46.7568 119.656 46.5867 cv
119.732 46.4166 119.772 46.1256 119.772 45.7137 cv
120.614 45.7182 mo
120.614 46.2599 120.497 46.6763 120.265 46.9673 cv
120.032 47.2627 119.7 47.406 119.271 47.406 cv
118.841 47.406 118.51 47.2627 118.277 46.9673 cv
118.044 46.6763 117.928 46.2599 117.928 45.7182 cv
117.928 45.1809 118.044 44.7646 118.277 44.4691 cv
118.51 44.1736 118.841 44.0259 119.271 44.0259 cv
119.7 44.0259 120.032 44.1736 120.265 44.4691 cv
120.497 44.7646 120.614 45.1809 120.614 45.7182 cv
1 /0 /CSD get_res sepcs
1 sep
f
121.285 46.5016 mo
122.073 46.5016 li
122.073 47.3478 li
121.285 47.3478 li
121.285 46.5016 li
f
124.589 45.7137 mo
124.589 45.3063 124.549 45.0198 124.473 44.8497 cv
124.397 44.684 124.267 44.5989 124.088 44.5989 cv
123.909 44.5989 123.779 44.684 123.703 44.8497 cv
123.622 45.0198 123.586 45.3063 123.586 45.7137 cv
123.586 46.1256 123.622 46.4166 123.703 46.5867 cv
123.779 46.7568 123.909 46.8374 124.088 46.8374 cv
124.267 46.8374 124.392 46.7568 124.473 46.5867 cv
124.549 46.4166 124.589 46.1256 124.589 45.7137 cv
125.431 45.7182 mo
125.431 46.2599 125.315 46.6763 125.082 46.9673 cv
124.849 47.2627 124.518 47.406 124.088 47.406 cv
123.658 47.406 123.327 47.2627 123.094 46.9673 cv
122.861 46.6763 122.745 46.2599 122.745 45.7182 cv
122.745 45.1809 122.861 44.7646 123.094 44.4691 cv
123.327 44.1736 123.658 44.0259 124.088 44.0259 cv
124.518 44.0259 124.849 44.1736 125.082 44.4691 cv
125.315 44.7646 125.431 45.1809 125.431 45.7182 cv
f
127.705 45.7137 mo
127.705 45.3063 127.665 45.0198 127.589 44.8497 cv
127.513 44.684 127.383 44.5989 127.204 44.5989 cv
127.025 44.5989 126.895 44.684 126.819 44.8497 cv
126.738 45.0198 126.702 45.3063 126.702 45.7137 cv
126.702 46.1256 126.738 46.4166 126.819 46.5867 cv
126.895 46.7568 127.025 46.8374 127.204 46.8374 cv
127.383 46.8374 127.508 46.7568 127.589 46.5867 cv
127.665 46.4166 127.705 46.1256 127.705 45.7137 cv
128.547 45.7182 mo
128.547 46.2599 128.431 46.6763 128.198 46.9673 cv
127.965 47.2627 127.634 47.406 127.204 47.406 cv
126.774 47.406 126.443 47.2627 126.21 46.9673 cv
125.977 46.6763 125.861 46.2599 125.861 45.7182 cv
125.861 45.1809 125.977 44.7646 126.21 44.4691 cv
126.443 44.1736 126.774 44.0259 127.204 44.0259 cv
127.634 44.0259 127.965 44.1736 128.198 44.4691 cv
128.431 44.7646 128.547 45.1809 128.547 45.7182 cv
f
130.821 45.7137 mo
130.821 45.3063 130.781 45.0198 130.705 44.8497 cv
130.629 44.684 130.499 44.5989 130.32 44.5989 cv
130.141 44.5989 130.011 44.684 129.935 44.8497 cv
129.854 45.0198 129.818 45.3063 129.818 45.7137 cv
129.818 46.1256 129.854 46.4166 129.935 46.5867 cv
130.011 46.7568 130.141 46.8374 130.32 46.8374 cv
130.499 46.8374 130.624 46.7568 130.705 46.5867 cv
130.781 46.4166 130.821 46.1256 130.821 45.7137 cv
131.663 45.7182 mo
131.663 46.2599 131.546 46.6763 131.314 46.9673 cv
131.081 47.2627 130.75 47.406 130.32 47.406 cv
129.89 47.406 129.559 47.2627 129.326 46.9673 cv
129.093 46.6763 128.977 46.2599 128.977 45.7182 cv
128.977 45.1809 129.093 44.7646 129.326 44.4691 cv
129.559 44.1736 129.89 44.0259 130.32 44.0259 cv
130.75 44.0259 131.081 44.1736 131.314 44.4691 cv
131.546 44.7646 131.663 45.1809 131.663 45.7182 cv
f
136.324 12.7102 mo
136.324 12.3028 136.284 12.0163 136.208 11.8462 cv
136.132 11.6805 136.002 11.5955 135.823 11.5955 cv
135.644 11.5955 135.514 11.6805 135.438 11.8462 cv
135.357 12.0163 135.322 12.3028 135.322 12.7102 cv
135.322 13.1221 135.357 13.4131 135.438 13.5832 cv
135.514 13.7533 135.644 13.8339 135.823 13.8339 cv
136.002 13.8339 136.127 13.7533 136.208 13.5832 cv
136.284 13.4131 136.324 13.1221 136.324 12.7102 cv
137.166 12.7147 mo
137.166 13.2564 137.05 13.6728 136.817 13.9638 cv
136.584 14.2592 136.253 14.4025 135.823 14.4025 cv
135.393 14.4025 135.062 14.2592 134.829 13.9638 cv
134.596 13.6728 134.48 13.2564 134.48 12.7147 cv
134.48 12.1775 134.596 11.7611 134.829 11.4656 cv
135.062 11.1701 135.393 11.0224 135.823 11.0224 cv
136.253 11.0224 136.584 11.1701 136.817 11.4656 cv
137.05 11.7611 137.166 12.1775 137.166 12.7147 cv
1 /0 /CSD get_res sepcs
0 sep
f
137.838 13.4982 mo
138.626 13.4982 li
138.626 14.3443 li
137.838 14.3443 li
137.838 13.4982 li
f
140.703 12.7326 mo
140.555 12.7326 140.443 12.7818 140.372 12.8759 cv
140.295 12.9744 140.26 13.1176 140.26 13.3057 cv
140.26 13.4982 140.295 13.6414 140.372 13.7354 cv
140.443 13.8339 140.555 13.8787 140.703 13.8787 cv
140.851 13.8787 140.962 13.8339 141.034 13.7354 cv
141.106 13.6414 141.146 13.4982 141.146 13.3057 cv
141.146 13.1176 141.106 12.9744 141.034 12.8759 cv
140.962 12.7818 140.851 12.7326 140.703 12.7326 cv
141.741 11.1657 mo
141.741 11.7701 li
141.603 11.7074 141.473 11.6581 141.352 11.6268 cv
141.227 11.5955 141.11 11.5775 140.994 11.5775 cv
140.743 11.5775 140.546 11.6492 140.407 11.788 cv
140.264 11.9267 140.184 12.1327 140.161 12.4058 cv
140.255 12.3342 140.358 12.2804 140.475 12.2446 cv
140.586 12.2088 140.707 12.1909 140.842 12.1909 cv
141.173 12.1909 141.442 12.2894 141.647 12.4864 cv
141.853 12.6834 141.956 12.9385 141.956 13.2519 cv
141.956 13.6011 141.84 13.8832 141.612 14.0891 cv
141.383 14.2995 141.079 14.4025 140.694 14.4025 cv
140.269 14.4025 139.942 14.2637 139.709 13.9772 cv
139.476 13.6907 139.36 13.2877 139.36 12.7595 cv
139.36 12.2222 139.494 11.7969 139.767 11.488 cv
140.036 11.1836 140.412 11.0269 140.886 11.0269 cv
141.034 11.0269 141.177 11.0403 141.321 11.0627 cv
141.464 11.0851 141.603 11.1209 141.741 11.1657 cv
f
142.498 11.0806 mo
144.956 11.0806 li
144.956 11.5552 li
143.684 14.3443 li
142.865 14.3443 li
144.07 11.6984 li
142.498 11.6984 li
142.498 11.0806 li
f
145.789 11.0806 mo
147.879 11.0806 li
147.879 11.6984 li
146.46 11.6984 li
146.46 12.2043 li
146.653 12.164 li
146.854 12.1506 li
147.253 12.1506 147.562 12.2536 147.785 12.4506 cv
148.005 12.6475 148.117 12.9251 148.117 13.2788 cv
148.117 13.6325 147.996 13.91 147.754 14.107 cv
147.512 14.304 147.176 14.4025 146.751 14.4025 cv
146.563 14.4025 146.38 14.3846 146.201 14.3488 cv
146.017 14.3174 145.838 14.2637 145.659 14.1921 cv
145.659 13.5295 li
145.838 13.6325 146.004 13.7086 146.165 13.7578 cv
146.326 13.8115 146.474 13.8339 146.617 13.8339 cv
146.818 13.8339 146.98 13.7847 147.096 13.6862 cv
147.212 13.5877 147.275 13.4489 147.275 13.2788 cv
147.275 13.1087 147.212 12.9744 147.096 12.8759 cv
146.98 12.7774 146.818 12.7236 146.617 12.7236 cv
146.492 12.7236 146.362 12.7416 146.227 12.7729 cv
146.093 12.8042 145.945 12.8535 145.789 12.9162 cv
145.789 11.0806 li
f
134.884 30.264 mo
135.627 30.264 li
135.627 28.1554 li
134.866 28.3121 li
134.866 27.739 li
135.623 27.5823 li
136.424 27.5823 li
136.424 30.264 li
137.167 30.264 li
137.167 30.846 li
134.884 30.846 li
134.884 30.264 li
f
137.933 29.9999 mo
138.721 29.9999 li
138.721 30.846 li
137.933 30.846 li
137.933 29.9999 li
f
141.237 29.212 mo
141.237 28.8046 141.196 28.518 141.12 28.3479 cv
141.044 28.1823 140.914 28.0972 140.735 28.0972 cv
140.556 28.0972 140.426 28.1823 140.35 28.3479 cv
140.27 28.518 140.234 28.8046 140.234 29.212 cv
140.234 29.6238 140.27 29.9148 140.35 30.085 cv
140.426 30.2551 140.556 30.3357 140.735 30.3357 cv
140.914 30.3357 141.04 30.2551 141.12 30.085 cv
141.196 29.9148 141.237 29.6238 141.237 29.212 cv
142.078 29.2164 mo
142.078 29.7581 141.962 30.1745 141.729 30.4655 cv
141.496 30.761 141.165 30.9042 140.735 30.9042 cv
140.306 30.9042 139.974 30.761 139.741 30.4655 cv
139.509 30.1745 139.392 29.7581 139.392 29.2164 cv
139.392 28.6792 139.509 28.2628 139.741 27.9674 cv
139.974 27.6719 140.306 27.5241 140.735 27.5241 cv
141.165 27.5241 141.496 27.6719 141.729 27.9674 cv
141.962 28.2628 142.078 28.6792 142.078 29.2164 cv
f
144.353 29.212 mo
144.353 28.8046 144.312 28.518 144.236 28.3479 cv
144.16 28.1823 144.03 28.0972 143.851 28.0972 cv
143.672 28.0972 143.542 28.1823 143.466 28.3479 cv
143.386 28.518 143.35 28.8046 143.35 29.212 cv
143.35 29.6238 143.386 29.9148 143.466 30.085 cv
143.542 30.2551 143.672 30.3357 143.851 30.3357 cv
144.03 30.3357 144.156 30.2551 144.236 30.085 cv
144.312 29.9148 144.353 29.6238 144.353 29.212 cv
145.194 29.2164 mo
145.194 29.7581 145.078 30.1745 144.845 30.4655 cv
144.612 30.761 144.281 30.9042 143.851 30.9042 cv
143.422 30.9042 143.09 30.761 142.857 30.4655 cv
142.625 30.1745 142.508 29.7581 142.508 29.2164 cv
142.508 28.6792 142.625 28.2628 142.857 27.9674 cv
143.09 27.6719 143.422 27.5241 143.851 27.5241 cv
144.281 27.5241 144.612 27.6719 144.845 27.9674 cv
145.078 28.2628 145.194 28.6792 145.194 29.2164 cv
f
147.469 29.212 mo
147.469 28.8046 147.428 28.518 147.352 28.3479 cv
147.276 28.1823 147.146 28.0972 146.967 28.0972 cv
146.788 28.0972 146.658 28.1823 146.582 28.3479 cv
146.502 28.518 146.466 28.8046 146.466 29.212 cv
146.466 29.6238 146.502 29.9148 146.582 30.085 cv
146.658 30.2551 146.788 30.3357 146.967 30.3357 cv
147.146 30.3357 147.272 30.2551 147.352 30.085 cv
147.428 29.9148 147.469 29.6238 147.469 29.212 cv
148.31 29.2164 mo
148.31 29.7581 148.194 30.1745 147.961 30.4655 cv
147.728 30.761 147.397 30.9042 146.967 30.9042 cv
146.537 30.9042 146.206 30.761 145.973 30.4655 cv
145.741 30.1745 145.624 29.7581 145.624 29.2164 cv
145.624 28.6792 145.741 28.2628 145.973 27.9674 cv
146.206 27.6719 146.537 27.5241 146.967 27.5241 cv
147.397 27.5241 147.728 27.6719 147.961 27.9674 cv
148.194 28.2628 148.31 28.6792 148.31 29.2164 cv
f
136.324 45.7137 mo
136.324 45.3063 136.284 45.0198 136.208 44.8497 cv
136.132 44.684 136.002 44.5989 135.823 44.5989 cv
135.644 44.5989 135.514 44.684 135.438 44.8497 cv
135.357 45.0198 135.322 45.3063 135.322 45.7137 cv
135.322 46.1256 135.357 46.4166 135.438 46.5867 cv
135.514 46.7568 135.644 46.8374 135.823 46.8374 cv
136.002 46.8374 136.127 46.7568 136.208 46.5867 cv
136.284 46.4166 136.324 46.1256 136.324 45.7137 cv
137.166 45.7182 mo
137.166 46.2599 137.05 46.6763 136.817 46.9673 cv
136.584 47.2627 136.253 47.406 135.823 47.406 cv
135.393 47.406 135.062 47.2627 134.829 46.9673 cv
134.596 46.6763 134.48 46.2599 134.48 45.7182 cv
134.48 45.1809 134.596 44.7646 134.829 44.4691 cv
135.062 44.1736 135.393 44.0259 135.823 44.0259 cv
136.253 44.0259 136.584 44.1736 136.817 44.4691 cv
137.05 44.7646 137.166 45.1809 137.166 45.7182 cv
f
137.838 46.5016 mo
138.626 46.5016 li
138.626 47.3478 li
137.838 47.3478 li
137.838 46.5016 li
f
140.703 45.7361 mo
140.555 45.7361 140.443 45.7853 140.372 45.8793 cv
140.295 45.9778 140.26 46.1211 140.26 46.3091 cv
140.26 46.5016 140.295 46.6449 140.372 46.7389 cv
140.443 46.8374 140.555 46.8822 140.703 46.8822 cv
140.851 46.8822 140.962 46.8374 141.034 46.7389 cv
141.106 46.6449 141.146 46.5016 141.146 46.3091 cv
141.146 46.1211 141.106 45.9778 141.034 45.8793 cv
140.962 45.7853 140.851 45.7361 140.703 45.7361 cv
141.741 44.1692 mo
141.741 44.7735 li
141.603 44.7109 141.473 44.6616 141.352 44.6303 cv
141.227 44.5989 141.11 44.581 140.994 44.581 cv
140.743 44.581 140.546 44.6527 140.407 44.7915 cv
140.264 44.9302 140.184 45.1362 140.161 45.4093 cv
140.255 45.3376 140.358 45.2839 140.475 45.2481 cv
140.586 45.2123 140.707 45.1944 140.842 45.1944 cv
141.173 45.1944 141.442 45.2929 141.647 45.4899 cv
141.853 45.6868 141.956 45.942 141.956 46.2554 cv
141.956 46.6046 141.84 46.8867 141.612 47.0926 cv
141.383 47.303 141.079 47.406 140.694 47.406 cv
140.269 47.406 139.942 47.2672 139.709 46.9807 cv
139.476 46.6942 139.36 46.2912 139.36 45.763 cv
139.36 45.2257 139.494 44.8004 139.767 44.4915 cv
140.036 44.1871 140.412 44.0304 140.886 44.0304 cv
141.034 44.0304 141.177 44.0438 141.321 44.0662 cv
141.464 44.0886 141.603 44.1244 141.741 44.1692 cv
f
142.498 44.0841 mo
144.956 44.0841 li
144.956 44.5586 li
143.684 47.3478 li
142.865 47.3478 li
144.07 44.7019 li
142.498 44.7019 li
142.498 44.0841 li
f
145.789 44.0841 mo
147.879 44.0841 li
147.879 44.7019 li
146.46 44.7019 li
146.46 45.2078 li
146.653 45.1675 li
146.854 45.1541 li
147.253 45.1541 147.562 45.2571 147.785 45.454 cv
148.005 45.651 148.117 45.9286 148.117 46.2823 cv
148.117 46.636 147.996 46.9135 147.754 47.1105 cv
147.512 47.3075 147.176 47.406 146.751 47.406 cv
146.563 47.406 146.38 47.3881 146.201 47.3523 cv
146.017 47.3209 145.838 47.2672 145.659 47.1956 cv
145.659 46.533 li
145.838 46.636 146.004 46.7121 146.165 46.7613 cv
146.326 46.815 146.474 46.8374 146.617 46.8374 cv
146.818 46.8374 146.98 46.7882 147.096 46.6897 cv
147.212 46.5912 147.275 46.4524 147.275 46.2823 cv
147.275 46.1122 147.212 45.9778 147.096 45.8793 cv
146.98 45.7809 146.818 45.7271 146.617 45.7271 cv
146.492 45.7271 146.362 45.745 146.227 45.7764 cv
146.093 45.8077 145.945 45.857 145.789 45.9196 cv
145.789 44.0841 li
f
152.776 12.7102 mo
152.776 12.3028 152.735 12.0163 152.659 11.8462 cv
152.583 11.6805 152.453 11.5955 152.274 11.5955 cv
152.095 11.5955 151.965 11.6805 151.889 11.8462 cv
151.809 12.0163 151.773 12.3028 151.773 12.7102 cv
151.773 13.1221 151.809 13.4131 151.889 13.5832 cv
151.965 13.7533 152.095 13.8339 152.274 13.8339 cv
152.453 13.8339 152.579 13.7533 152.659 13.5832 cv
152.735 13.4131 152.776 13.1221 152.776 12.7102 cv
153.617 12.7147 mo
153.617 13.2564 153.501 13.6728 153.268 13.9638 cv
153.035 14.2592 152.704 14.4025 152.274 14.4025 cv
151.844 14.4025 151.513 14.2592 151.28 13.9638 cv
151.047 13.6728 150.931 13.2564 150.931 12.7147 cv
150.931 12.1775 151.047 11.7611 151.28 11.4656 cv
151.513 11.1701 151.844 11.0224 152.274 11.0224 cv
152.704 11.0224 153.035 11.1701 153.268 11.4656 cv
153.501 11.7611 153.617 12.1775 153.617 12.7147 cv
1 /0 /CSD get_res sepcs
1 sep
f
154.289 13.4982 mo
155.077 13.4982 li
155.077 14.3443 li
154.289 14.3443 li
154.289 13.4982 li
f
157.593 12.7102 mo
157.593 12.3028 157.552 12.0163 157.476 11.8462 cv
157.4 11.6805 157.27 11.5955 157.091 11.5955 cv
156.912 11.5955 156.782 11.6805 156.706 11.8462 cv
156.626 12.0163 156.59 12.3028 156.59 12.7102 cv
156.59 13.1221 156.626 13.4131 156.706 13.5832 cv
156.782 13.7533 156.912 13.8339 157.091 13.8339 cv
157.27 13.8339 157.396 13.7533 157.476 13.5832 cv
157.552 13.4131 157.593 13.1221 157.593 12.7102 cv
158.434 12.7147 mo
158.434 13.2564 158.318 13.6728 158.085 13.9638 cv
157.852 14.2592 157.521 14.4025 157.091 14.4025 cv
156.662 14.4025 156.33 14.2592 156.097 13.9638 cv
155.865 13.6728 155.748 13.2564 155.748 12.7147 cv
155.748 12.1775 155.865 11.7611 156.097 11.4656 cv
156.33 11.1701 156.662 11.0224 157.091 11.0224 cv
157.521 11.0224 157.852 11.1701 158.085 11.4656 cv
158.318 11.7611 158.434 12.1775 158.434 12.7147 cv
f
160.709 12.7102 mo
160.709 12.3028 160.668 12.0163 160.592 11.8462 cv
160.516 11.6805 160.386 11.5955 160.207 11.5955 cv
160.028 11.5955 159.898 11.6805 159.822 11.8462 cv
159.742 12.0163 159.706 12.3028 159.706 12.7102 cv
159.706 13.1221 159.742 13.4131 159.822 13.5832 cv
159.898 13.7533 160.028 13.8339 160.207 13.8339 cv
160.386 13.8339 160.512 13.7533 160.592 13.5832 cv
160.668 13.4131 160.709 13.1221 160.709 12.7102 cv
161.55 12.7147 mo
161.55 13.2564 161.434 13.6728 161.201 13.9638 cv
160.968 14.2592 160.637 14.4025 160.207 14.4025 cv
159.778 14.4025 159.446 14.2592 159.213 13.9638 cv
158.981 13.6728 158.864 13.2564 158.864 12.7147 cv
158.864 12.1775 158.981 11.7611 159.213 11.4656 cv
159.446 11.1701 159.778 11.0224 160.207 11.0224 cv
160.637 11.0224 160.968 11.1701 161.201 11.4656 cv
161.434 11.7611 161.55 12.1775 161.55 12.7147 cv
f
163.825 12.7102 mo
163.825 12.3028 163.784 12.0163 163.708 11.8462 cv
163.632 11.6805 163.502 11.5955 163.323 11.5955 cv
163.144 11.5955 163.014 11.6805 162.938 11.8462 cv
162.858 12.0163 162.822 12.3028 162.822 12.7102 cv
162.822 13.1221 162.858 13.4131 162.938 13.5832 cv
163.014 13.7533 163.144 13.8339 163.323 13.8339 cv
163.502 13.8339 163.628 13.7533 163.708 13.5832 cv
163.784 13.4131 163.825 13.1221 163.825 12.7102 cv
164.666 12.7147 mo
164.666 13.2564 164.55 13.6728 164.317 13.9638 cv
164.084 14.2592 163.753 14.4025 163.323 14.4025 cv
162.894 14.4025 162.562 14.2592 162.329 13.9638 cv
162.097 13.6728 161.98 13.2564 161.98 12.7147 cv
161.98 12.1775 162.097 11.7611 162.329 11.4656 cv
162.562 11.1701 162.894 11.0224 163.323 11.0224 cv
163.753 11.0224 164.084 11.1701 164.317 11.4656 cv
164.55 11.7611 164.666 12.1775 164.666 12.7147 cv
f
152.826 29.212 mo
152.826 28.8046 152.786 28.518 152.71 28.3479 cv
152.634 28.1823 152.504 28.0972 152.325 28.0972 cv
152.146 28.0972 152.016 28.1823 151.94 28.3479 cv
151.859 28.518 151.823 28.8046 151.823 29.212 cv
151.823 29.6238 151.859 29.9148 151.94 30.085 cv
152.016 30.2551 152.146 30.3357 152.325 30.3357 cv
152.504 30.3357 152.629 30.2551 152.71 30.085 cv
152.786 29.9148 152.826 29.6238 152.826 29.212 cv
153.668 29.2164 mo
153.668 29.7581 153.551 30.1745 153.319 30.4655 cv
153.086 30.761 152.754 30.9042 152.325 30.9042 cv
151.895 30.9042 151.564 30.761 151.331 30.4655 cv
151.098 30.1745 150.982 29.7581 150.982 29.2164 cv
150.982 28.6792 151.098 28.2628 151.331 27.9674 cv
151.564 27.6719 151.895 27.5241 152.325 27.5241 cv
152.754 27.5241 153.086 27.6719 153.319 27.9674 cv
153.551 28.2628 153.668 28.6792 153.668 29.2164 cv
1 /0 /CSD get_res sepcs
0 sep
f
154.339 29.9999 mo
155.127 29.9999 li
155.127 30.846 li
154.339 30.846 li
154.339 29.9999 li
f
157.205 29.2343 mo
157.057 29.2343 156.945 29.2836 156.873 29.3776 cv
156.797 29.4761 156.761 29.6194 156.761 29.8074 cv
156.761 29.9999 156.797 30.1432 156.873 30.2372 cv
156.945 30.3357 157.057 30.3804 157.205 30.3804 cv
157.352 30.3804 157.464 30.3357 157.536 30.2372 cv
157.607 30.1432 157.648 29.9999 157.648 29.8074 cv
157.648 29.6194 157.607 29.4761 157.536 29.3776 cv
157.464 29.2836 157.352 29.2343 157.205 29.2343 cv
158.243 27.6674 mo
158.243 28.2718 li
158.104 28.2091 157.975 28.1599 157.854 28.1285 cv
157.728 28.0972 157.612 28.0793 157.496 28.0793 cv
157.245 28.0793 157.048 28.1509 156.909 28.2897 cv
156.766 28.4285 156.685 28.6344 156.663 28.9075 cv
156.757 28.8359 156.86 28.7822 156.976 28.7464 cv
157.088 28.7105 157.209 28.6926 157.343 28.6926 cv
157.675 28.6926 157.943 28.7911 158.149 28.9881 cv
158.355 29.1851 158.458 29.4403 158.458 29.7537 cv
158.458 30.1029 158.342 30.3849 158.113 30.5909 cv
157.885 30.8013 157.581 30.9042 157.196 30.9042 cv
156.77 30.9042 156.443 30.7655 156.211 30.4789 cv
155.978 30.1924 155.861 29.7895 155.861 29.2612 cv
155.861 28.724 155.996 28.2987 156.269 27.9897 cv
156.538 27.6853 156.914 27.5286 157.388 27.5286 cv
157.536 27.5286 157.679 27.5421 157.822 27.5644 cv
157.966 27.5868 158.104 27.6226 158.243 27.6674 cv
f
159 27.5823 mo
161.458 27.5823 li
161.458 28.0569 li
160.186 30.846 li
159.367 30.846 li
160.571 28.2002 li
159 28.2002 li
159 27.5823 li
f
162.29 27.5823 mo
164.381 27.5823 li
164.381 28.2002 li
162.962 28.2002 li
162.962 28.7061 li
163.154 28.6658 li
163.356 28.6523 li
163.754 28.6523 164.063 28.7553 164.287 28.9523 cv
164.506 29.1493 164.618 29.4269 164.618 29.7805 cv
164.618 30.1342 164.498 30.4118 164.256 30.6088 cv
164.014 30.8058 163.678 30.9042 163.253 30.9042 cv
163.065 30.9042 162.881 30.8863 162.702 30.8505 cv
162.519 30.8192 162.34 30.7655 162.161 30.6938 cv
162.161 30.0312 li
162.34 30.1342 162.505 30.2103 162.666 30.2596 cv
162.828 30.3133 162.975 30.3357 163.119 30.3357 cv
163.32 30.3357 163.481 30.2864 163.598 30.1879 cv
163.714 30.0894 163.777 29.9507 163.777 29.7805 cv
163.777 29.6104 163.714 29.4761 163.598 29.3776 cv
163.481 29.2791 163.32 29.2254 163.119 29.2254 cv
162.993 29.2254 162.863 29.2433 162.729 29.2746 cv
162.595 29.306 162.447 29.3552 162.29 29.4179 cv
162.29 27.5823 li
f
151.386 46.7658 mo
152.129 46.7658 li
152.129 44.6571 li
151.368 44.8138 li
151.368 44.2408 li
152.124 44.0841 li
152.926 44.0841 li
152.926 46.7658 li
153.669 46.7658 li
153.669 47.3478 li
151.386 47.3478 li
151.386 46.7658 li
f
154.435 46.5016 mo
155.222 46.5016 li
155.222 47.3478 li
154.435 47.3478 li
154.435 46.5016 li
f
157.739 45.7137 mo
157.739 45.3063 157.698 45.0198 157.622 44.8497 cv
157.546 44.684 157.416 44.5989 157.237 44.5989 cv
157.058 44.5989 156.928 44.684 156.852 44.8497 cv
156.771 45.0198 156.736 45.3063 156.736 45.7137 cv
156.736 46.1256 156.771 46.4166 156.852 46.5867 cv
156.928 46.7568 157.058 46.8374 157.237 46.8374 cv
157.416 46.8374 157.542 46.7568 157.622 46.5867 cv
157.698 46.4166 157.739 46.1256 157.739 45.7137 cv
158.58 45.7182 mo
158.58 46.2599 158.464 46.6763 158.231 46.9673 cv
157.998 47.2627 157.667 47.406 157.237 47.406 cv
156.807 47.406 156.476 47.2627 156.243 46.9673 cv
156.01 46.6763 155.894 46.2599 155.894 45.7182 cv
155.894 45.1809 156.01 44.7646 156.243 44.4691 cv
156.476 44.1736 156.807 44.0259 157.237 44.0259 cv
157.667 44.0259 157.998 44.1736 158.231 44.4691 cv
158.464 44.7646 158.58 45.1809 158.58 45.7182 cv
f
160.854 45.7137 mo
160.854 45.3063 160.814 45.0198 160.738 44.8497 cv
160.662 44.684 160.532 44.5989 160.353 44.5989 cv
160.174 44.5989 160.044 44.684 159.968 44.8497 cv
159.887 45.0198 159.852 45.3063 159.852 45.7137 cv
159.852 46.1256 159.887 46.4166 159.968 46.5867 cv
160.044 46.7568 160.174 46.8374 160.353 46.8374 cv
160.532 46.8374 160.658 46.7568 160.738 46.5867 cv
160.814 46.4166 160.854 46.1256 160.854 45.7137 cv
161.696 45.7182 mo
161.696 46.2599 161.58 46.6763 161.347 46.9673 cv
161.114 47.2627 160.783 47.406 160.353 47.406 cv
159.923 47.406 159.592 47.2627 159.359 46.9673 cv
159.126 46.6763 159.01 46.2599 159.01 45.7182 cv
159.01 45.1809 159.126 44.7646 159.359 44.4691 cv
159.592 44.1736 159.923 44.0259 160.353 44.0259 cv
160.783 44.0259 161.114 44.1736 161.347 44.4691 cv
161.58 44.7646 161.696 45.1809 161.696 45.7182 cv
f
163.97 45.7137 mo
163.97 45.3063 163.93 45.0198 163.854 44.8497 cv
163.778 44.684 163.648 44.5989 163.469 44.5989 cv
163.29 44.5989 163.16 44.684 163.084 44.8497 cv
163.003 45.0198 162.968 45.3063 162.968 45.7137 cv
162.968 46.1256 163.003 46.4166 163.084 46.5867 cv
163.16 46.7568 163.29 46.8374 163.469 46.8374 cv
163.648 46.8374 163.773 46.7568 163.854 46.5867 cv
163.93 46.4166 163.97 46.1256 163.97 45.7137 cv
164.812 45.7182 mo
164.812 46.2599 164.696 46.6763 164.463 46.9673 cv
164.23 47.2627 163.899 47.406 163.469 47.406 cv
163.039 47.406 162.708 47.2627 162.475 46.9673 cv
162.242 46.6763 162.126 46.2599 162.126 45.7182 cv
162.126 45.1809 162.242 44.7646 162.475 44.4691 cv
162.708 44.1736 163.039 44.0259 163.469 44.0259 cv
163.899 44.0259 164.23 44.1736 164.463 44.4691 cv
164.696 44.7646 164.812 45.1809 164.812 45.7182 cv
f
grestore
1 /0 /CSD get_res sepcs
1 sep
DVZBWN+CMSS9*1 [7.62144 0 0 -7.62144 0 0 ]msf
166.726 24.045 mo
(Integration:)
[2.18736 4.04622 2.82828 3.48148 3.91667 2.67592 3.7635 2.82828 1.87035 3.91667 4.04622 0 
]xsh
true set_gvm
%ADOBeginSubsetFont: NNOAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
DVZBWM+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7A73DC501F4900507988D419B48DDAD77641F5B7B7A0610
F725F249F9EF901FABA150F5DFDF3368527C74C6E805BDBD5282C0C7160670EC
94102CE3399959A838F779795ACA3B9153D7D64C1E5390455DA9733A521E3252
4900C9F4B7B6A6150799E5B7DB8A4C7CD8F7D3D8A02FBF85F82D7D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DVZBWM+CMSS10 /Encoding get
dup 50 /two put
pop
%ADOEndSubsetFont
reset_gvm
/DVZBWM+CMSS10*1 
[46{/.notdef}rp /period /.notdef /zero /.notdef /two /.notdef /four 
/five 202{/.notdef}rp]
DVZBWM+CMSS10 nf
DVZBWM+CMSS10*1 [8.46821 0 0 -8.46821 0 0 ]msf
175.95 36 mo
(2.422)
[4.23409 2.35249 4.2341 4.23412 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
true set_gvm
/DVZBWN+CMSS9*1 uf
/DVZBWN+CMSS9 uf
/BILAAA+CMSS9 uf
reset_gvm
true set_gvm
/DVZBWM+CMSS10*1 uf
/DVZBWM+CMSS10 uf
/NNOAAA+CMSS10 uf
reset_gvm
true set_gvm
/DVZBWO+CMSSBX10*1 uf
/DVZBWO+CMSSBX10 uf
/EJIAAA+CMSSBX10 uf
reset_gvm
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
